
Rcup_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800877c  0800877c  0000977c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087dc  080087dc  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  080087dc  080087dc  000097dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087e4  080087e4  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087e4  080087e4  000097e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087e8  080087e8  000097e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  080087ec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d00  200000fc  080088e8  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dfc  080088e8  0000adfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a00  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003782  00000000  00000000  0001eb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  000222b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7c  00000000  00000000  00023328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f3b  00000000  00000000  00023fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d28  00000000  00000000  0003cedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aac0  00000000  00000000  00052c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd6c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c4  00000000  00000000  000dd70c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e1ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008764 	.word	0x08008764

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08008764 	.word	0x08008764

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <AxelFlow_servo_init>:

Instruction_Packet packet;

Servo AxelFlow_servo_init(uint8_t id, UART_HandleTypeDef *huartx,
		bool jointMode)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b098      	sub	sp, #96	@ 0x60
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	607a      	str	r2, [r7, #4]
 80004d2:	461a      	mov	r2, r3
 80004d4:	460b      	mov	r3, r1
 80004d6:	72fb      	strb	r3, [r7, #11]
 80004d8:	4613      	mov	r3, r2
 80004da:	72bb      	strb	r3, [r7, #10]
	Servo servo;
	servo.id = id;
 80004dc:	7afb      	ldrb	r3, [r7, #11]
 80004de:	743b      	strb	r3, [r7, #16]
	servo.huartx = *huartx;
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	4611      	mov	r1, r2
 80004e8:	2248      	movs	r2, #72	@ 0x48
 80004ea:	4618      	mov	r0, r3
 80004ec:	f008 f92c 	bl	8008748 <memcpy>
	servo.jointMode = jointMode;
 80004f0:	7abb      	ldrb	r3, [r7, #10]
 80004f2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	return servo;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	2250      	movs	r2, #80	@ 0x50
 8000500:	4619      	mov	r1, r3
 8000502:	f008 f921 	bl	8008748 <memcpy>
}
 8000506:	68f8      	ldr	r0, [r7, #12]
 8000508:	3760      	adds	r7, #96	@ 0x60
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <degreesToData>:
	else
		return 0;
}

uint8_t* degreesToData(float degrees)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint8_t data[2];
	uint16_t degrees_Hex = (uint16_t) (degrees * 3.41f); // 1023/300
 800051a:	edd7 7a01 	vldr	s15, [r7, #4]
 800051e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800056c <degreesToData+0x5c>
 8000522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800052a:	ee17 3a90 	vmov	r3, s15
 800052e:	81fb      	strh	r3, [r7, #14]
	data[0] = degrees_Hex;
 8000530:	89fb      	ldrh	r3, [r7, #14]
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b0e      	ldr	r3, [pc, #56]	@ (8000570 <degreesToData+0x60>)
 8000536:	701a      	strb	r2, [r3, #0]
	data[1] = degrees_Hex >> 8;
 8000538:	89fb      	ldrh	r3, [r7, #14]
 800053a:	0a1b      	lsrs	r3, r3, #8
 800053c:	b29b      	uxth	r3, r3
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b0b      	ldr	r3, [pc, #44]	@ (8000570 <degreesToData+0x60>)
 8000542:	705a      	strb	r2, [r3, #1]
	if (degrees == 0.0)
 8000544:	edd7 7a01 	vldr	s15, [r7, #4]
 8000548:	eef5 7a40 	vcmp.f32	s15, #0.0
 800054c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000550:	d105      	bne.n	800055e <degreesToData+0x4e>
	{
		data[0] = 0;
 8000552:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <degreesToData+0x60>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
		data[1] = 0;
 8000558:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <degreesToData+0x60>)
 800055a:	2200      	movs	r2, #0
 800055c:	705a      	strb	r2, [r3, #1]
	}

	return data;
 800055e:	4b04      	ldr	r3, [pc, #16]	@ (8000570 <degreesToData+0x60>)
}
 8000560:	4618      	mov	r0, r3
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	405a3d71 	.word	0x405a3d71
 8000570:	20000128 	.word	0x20000128

08000574 <setPosition>:
	packet.Instruction = COMMAND_WRITE_DATA;
	packet.Param = param_array;
	return AxelFlow_fire(&servo.huartx, packet);
}
Status_Packet setPosition(float angle, Servo servo)
{
 8000574:	b084      	sub	sp, #16
 8000576:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000578:	b087      	sub	sp, #28
 800057a:	af02      	add	r7, sp, #8
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	ed87 0a00 	vstr	s0, [r7]
 8000582:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t *data = degreesToData(angle);
 800058a:	ed97 0a00 	vldr	s0, [r7]
 800058e:	f7ff ffbf 	bl	8000510 <degreesToData>
 8000592:	60f8      	str	r0, [r7, #12]
	uint8_t param_array[3] = { RAM_GOAL_POSITION_L, data[0], data[1] };
 8000594:	231e      	movs	r3, #30
 8000596:	723b      	strb	r3, [r7, #8]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	727b      	strb	r3, [r7, #9]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	785b      	ldrb	r3, [r3, #1]
 80005a2:	72bb      	strb	r3, [r7, #10]
	packet.Packet_ID = servo.id;
 80005a4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80005a8:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <setPosition+0x7c>)
 80005aa:	709a      	strb	r2, [r3, #2]
	packet.Length = sizeof(param_array) + 2;
 80005ac:	4b10      	ldr	r3, [pc, #64]	@ (80005f0 <setPosition+0x7c>)
 80005ae:	2205      	movs	r2, #5
 80005b0:	70da      	strb	r2, [r3, #3]
	packet.Instruction = COMMAND_WRITE_DATA;
 80005b2:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <setPosition+0x7c>)
 80005b4:	2203      	movs	r2, #3
 80005b6:	711a      	strb	r2, [r3, #4]
	packet.Param = param_array;
 80005b8:	4a0d      	ldr	r2, [pc, #52]	@ (80005f0 <setPosition+0x7c>)
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	6093      	str	r3, [r2, #8]
	return AxelFlow_fire(&servo.huartx, packet);
 80005c0:	687c      	ldr	r4, [r7, #4]
 80005c2:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <setPosition+0x7c>)
 80005c4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80005c8:	1d15      	adds	r5, r2, #4
 80005ca:	466e      	mov	r6, sp
 80005cc:	f103 0208 	add.w	r2, r3, #8
 80005d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d4:	e886 0003 	stmia.w	r6, {r0, r1}
 80005d8:	cb0c      	ldmia	r3, {r2, r3}
 80005da:	4629      	mov	r1, r5
 80005dc:	4620      	mov	r0, r4
 80005de:	f000 f9bb 	bl	8000958 <AxelFlow_fire>
}
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80005ec:	b004      	add	sp, #16
 80005ee:	4770      	bx	lr
 80005f0:	20000118 	.word	0x20000118

080005f4 <setSpeed>:
	packet.Param = param_array;
	return AxelFlow_fire(&servo.huartx, packet);
}

Status_Packet setSpeed(float speed, Servo servo)
{
 80005f4:	b084      	sub	sp, #16
 80005f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f8:	b087      	sub	sp, #28
 80005fa:	af02      	add	r7, sp, #8
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	ed87 0a00 	vstr	s0, [r7]
 8000602:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t *data;
	if (servo.jointMode)
 800060a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800060e:	2b00      	cmp	r3, #0
 8000610:	d017      	beq.n	8000642 <setSpeed+0x4e>
	{
		data = (speed < 99) ? degreesToData(speed * 3) : 0; // 1023 / (100*3.41)
 8000612:	edd7 7a00 	vldr	s15, [r7]
 8000616:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800071c <setSpeed+0x128>
 800061a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000622:	d50b      	bpl.n	800063c <setSpeed+0x48>
 8000624:	edd7 7a00 	vldr	s15, [r7]
 8000628:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800062c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000630:	eeb0 0a67 	vmov.f32	s0, s15
 8000634:	f7ff ff6c 	bl	8000510 <degreesToData>
 8000638:	4603      	mov	r3, r0
 800063a:	e000      	b.n	800063e <setSpeed+0x4a>
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	e03d      	b.n	80006be <setSpeed+0xca>
	}
	else // TODO; Add switch
	{
		speed *= CLOCKWISE_SWITCH;
		data = (speed >= 0 && speed <= 100) ?
				degreesToData(speed * 3.0) :
 8000642:	edd7 7a00 	vldr	s15, [r7]
 8000646:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800064a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800064e:	db14      	blt.n	800067a <setSpeed+0x86>
		data = (speed >= 0 && speed <= 100) ?
 8000650:	edd7 7a00 	vldr	s15, [r7]
 8000654:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8000720 <setSpeed+0x12c>
 8000658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800065c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000660:	d80b      	bhi.n	800067a <setSpeed+0x86>
				degreesToData(speed * 3.0) :
 8000662:	edd7 7a00 	vldr	s15, [r7]
 8000666:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800066a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800066e:	eeb0 0a67 	vmov.f32	s0, s15
 8000672:	f7ff ff4d 	bl	8000510 <degreesToData>
 8000676:	4603      	mov	r3, r0
 8000678:	e020      	b.n	80006bc <setSpeed+0xc8>
				((speed < 0 && speed >= -100) ?
						degreesToData((-speed + 100) * 3) : 0);
 800067a:	edd7 7a00 	vldr	s15, [r7]
 800067e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000686:	d518      	bpl.n	80006ba <setSpeed+0xc6>
				((speed < 0 && speed >= -100) ?
 8000688:	edd7 7a00 	vldr	s15, [r7]
 800068c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000724 <setSpeed+0x130>
 8000690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000698:	db0f      	blt.n	80006ba <setSpeed+0xc6>
						degreesToData((-speed + 100) * 3) : 0);
 800069a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000720 <setSpeed+0x12c>
 800069e:	edd7 7a00 	vldr	s15, [r7]
 80006a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006a6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80006aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ae:	eeb0 0a67 	vmov.f32	s0, s15
 80006b2:	f7ff ff2d 	bl	8000510 <degreesToData>
 80006b6:	4603      	mov	r3, r0
 80006b8:	e000      	b.n	80006bc <setSpeed+0xc8>
 80006ba:	2300      	movs	r3, #0
		data = (speed >= 0 && speed <= 100) ?
 80006bc:	60fb      	str	r3, [r7, #12]
	}
	uint8_t param_array[3] = { RAM_GOAL_SPEED_L, data[0], data[1] };
 80006be:	2320      	movs	r3, #32
 80006c0:	723b      	strb	r3, [r7, #8]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	727b      	strb	r3, [r7, #9]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	785b      	ldrb	r3, [r3, #1]
 80006cc:	72bb      	strb	r3, [r7, #10]
	packet.Packet_ID = servo.id;
 80006ce:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <setSpeed+0x134>)
 80006d4:	709a      	strb	r2, [r3, #2]
	packet.Length = sizeof(param_array) + 2;
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <setSpeed+0x134>)
 80006d8:	2205      	movs	r2, #5
 80006da:	70da      	strb	r2, [r3, #3]
	packet.Instruction = COMMAND_WRITE_DATA;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <setSpeed+0x134>)
 80006de:	2203      	movs	r2, #3
 80006e0:	711a      	strb	r2, [r3, #4]
	packet.Param = param_array;
 80006e2:	4a11      	ldr	r2, [pc, #68]	@ (8000728 <setSpeed+0x134>)
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	6093      	str	r3, [r2, #8]
	return AxelFlow_fire(&servo.huartx, packet);
 80006ea:	687c      	ldr	r4, [r7, #4]
 80006ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <setSpeed+0x134>)
 80006ee:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80006f2:	1d15      	adds	r5, r2, #4
 80006f4:	466e      	mov	r6, sp
 80006f6:	f103 0208 	add.w	r2, r3, #8
 80006fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006fe:	e886 0003 	stmia.w	r6, {r0, r1}
 8000702:	cb0c      	ldmia	r3, {r2, r3}
 8000704:	4629      	mov	r1, r5
 8000706:	4620      	mov	r0, r4
 8000708:	f000 f926 	bl	8000958 <AxelFlow_fire>
}
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000716:	b004      	add	sp, #16
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	42c60000 	.word	0x42c60000
 8000720:	42c80000 	.word	0x42c80000
 8000724:	c2c80000 	.word	0xc2c80000
 8000728:	20000118 	.word	0x20000118

0800072c <AxelFlow_debug_init>:
#include "AxelFlow_Debug.h"

UART_HandleTypeDef huartx;

void AxelFlow_debug_init(UART_HandleTypeDef *huart)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	huartx = *huart;
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <AxelFlow_debug_init+0x20>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4610      	mov	r0, r2
 800073a:	4619      	mov	r1, r3
 800073c:	2348      	movs	r3, #72	@ 0x48
 800073e:	461a      	mov	r2, r3
 8000740:	f008 f802 	bl	8008748 <memcpy>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000012c 	.word	0x2000012c

08000750 <AxelFlow_UART_Init>:
//#define DEBUG_PRINT_COMMUNICATION
uint8_t info_array[INSTRUCTION_FRAME_BUFFER];

UART_HandleTypeDef AxelFlow_UART_Init(USART_TypeDef *UART_ID,
		uint32_t baud_rate)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b096      	sub	sp, #88	@ 0x58
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
	UART_HandleTypeDef huartx;
	huartx.Instance = UART_ID;
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	613b      	str	r3, [r7, #16]
	huartx.Init.BaudRate = baud_rate;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	617b      	str	r3, [r7, #20]
	huartx.Init.WordLength = UART_WORDLENGTH_8B;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
	huartx.Init.StopBits = UART_STOPBITS_1;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
	huartx.Init.Parity = UART_PARITY_NONE;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
	huartx.Init.Mode = UART_MODE_TX_RX;
 8000770:	230c      	movs	r3, #12
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
	huartx.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000774:	2300      	movs	r3, #0
 8000776:	62bb      	str	r3, [r7, #40]	@ 0x28
	huartx.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
//	huartx.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	HAL_HalfDuplex_Init(&huartx);
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4618      	mov	r0, r3
 8000782:	f002 ff51 	bl	8003628 <HAL_HalfDuplex_Init>
	return huartx;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4618      	mov	r0, r3
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	2248      	movs	r2, #72	@ 0x48
 8000790:	4619      	mov	r1, r3
 8000792:	f007 ffd9 	bl	8008748 <memcpy>
}
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	3758      	adds	r7, #88	@ 0x58
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <getChecksum>:

uint8_t getChecksum(Instruction_Packet packet)
{
 800079e:	b490      	push	{r4, r7}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	463c      	mov	r4, r7
 80007a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t sum = packet.Packet_ID + packet.Length + packet.Instruction;
 80007aa:	78ba      	ldrb	r2, [r7, #2]
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	4413      	add	r3, r2
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	793b      	ldrb	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	75fb      	strb	r3, [r7, #23]

	for (uint8_t i = 0; i < packet.Length - 2; i++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	75bb      	strb	r3, [r7, #22]
 80007bc:	e009      	b.n	80007d2 <getChecksum+0x34>
	{
		sum += packet.Param[i];
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	7dbb      	ldrb	r3, [r7, #22]
 80007c2:	4413      	add	r3, r2
 80007c4:	781a      	ldrb	r2, [r3, #0]
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
 80007c8:	4413      	add	r3, r2
 80007ca:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < packet.Length - 2; i++)
 80007cc:	7dbb      	ldrb	r3, [r7, #22]
 80007ce:	3301      	adds	r3, #1
 80007d0:	75bb      	strb	r3, [r7, #22]
 80007d2:	7dba      	ldrb	r2, [r7, #22]
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	3b02      	subs	r3, #2
 80007d8:	429a      	cmp	r2, r3
 80007da:	dbf0      	blt.n	80007be <getChecksum+0x20>
	}
	return ~sum;
 80007dc:	7dfb      	ldrb	r3, [r7, #23]
 80007de:	43db      	mvns	r3, r3
 80007e0:	b2db      	uxtb	r3, r3
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc90      	pop	{r4, r7}
 80007ea:	4770      	bx	lr

080007ec <struct_to_arr>:

void struct_to_arr(Instruction_Packet packet)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b087      	sub	sp, #28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	463c      	mov	r4, r7
 80007f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	info_array[0] = HEADER;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <struct_to_arr+0x8c>)
 80007fa:	22ff      	movs	r2, #255	@ 0xff
 80007fc:	701a      	strb	r2, [r3, #0]
	info_array[1] = HEADER;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <struct_to_arr+0x8c>)
 8000800:	22ff      	movs	r2, #255	@ 0xff
 8000802:	705a      	strb	r2, [r3, #1]
	info_array[2] = packet.Packet_ID;
 8000804:	78ba      	ldrb	r2, [r7, #2]
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <struct_to_arr+0x8c>)
 8000808:	709a      	strb	r2, [r3, #2]
	info_array[3] = packet.Length;
 800080a:	78fa      	ldrb	r2, [r7, #3]
 800080c:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <struct_to_arr+0x8c>)
 800080e:	70da      	strb	r2, [r3, #3]
	info_array[4] = packet.Instruction;
 8000810:	793a      	ldrb	r2, [r7, #4]
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <struct_to_arr+0x8c>)
 8000814:	711a      	strb	r2, [r3, #4]

	for (uint8_t i = 5; i < packet.Length + 3; i++)
 8000816:	2305      	movs	r3, #5
 8000818:	75fb      	strb	r3, [r7, #23]
 800081a:	e00a      	b.n	8000832 <struct_to_arr+0x46>
		info_array[i] = packet.Param[i - 5];
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	7dfb      	ldrb	r3, [r7, #23]
 8000820:	3b05      	subs	r3, #5
 8000822:	441a      	add	r2, r3
 8000824:	7dfb      	ldrb	r3, [r7, #23]
 8000826:	7811      	ldrb	r1, [r2, #0]
 8000828:	4a13      	ldr	r2, [pc, #76]	@ (8000878 <struct_to_arr+0x8c>)
 800082a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 5; i < packet.Length + 3; i++)
 800082c:	7dfb      	ldrb	r3, [r7, #23]
 800082e:	3301      	adds	r3, #1
 8000830:	75fb      	strb	r3, [r7, #23]
 8000832:	78fb      	ldrb	r3, [r7, #3]
 8000834:	1c9a      	adds	r2, r3, #2
 8000836:	7dfb      	ldrb	r3, [r7, #23]
 8000838:	429a      	cmp	r2, r3
 800083a:	daef      	bge.n	800081c <struct_to_arr+0x30>

	info_array[packet.Length + 3] = getChecksum(packet);
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	1cdc      	adds	r4, r3, #3
 8000840:	463b      	mov	r3, r7
 8000842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000844:	f7ff ffab 	bl	800079e <getChecksum>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <struct_to_arr+0x8c>)
 800084e:	551a      	strb	r2, [r3, r4]

	for (uint8_t i = packet.Length + 4; i <= INSTRUCTION_FRAME_BUFFER; i++)
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	3304      	adds	r3, #4
 8000854:	75bb      	strb	r3, [r7, #22]
 8000856:	e006      	b.n	8000866 <struct_to_arr+0x7a>
	{
		info_array[i] = 0;
 8000858:	7dbb      	ldrb	r3, [r7, #22]
 800085a:	4a07      	ldr	r2, [pc, #28]	@ (8000878 <struct_to_arr+0x8c>)
 800085c:	2100      	movs	r1, #0
 800085e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = packet.Length + 4; i <= INSTRUCTION_FRAME_BUFFER; i++)
 8000860:	7dbb      	ldrb	r3, [r7, #22]
 8000862:	3301      	adds	r3, #1
 8000864:	75bb      	strb	r3, [r7, #22]
 8000866:	7dbb      	ldrb	r3, [r7, #22]
 8000868:	2b0f      	cmp	r3, #15
 800086a:	d9f5      	bls.n	8000858 <struct_to_arr+0x6c>
	}
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	371c      	adds	r7, #28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd90      	pop	{r4, r7, pc}
 8000876:	bf00      	nop
 8000878:	20000174 	.word	0x20000174

0800087c <arr_to_struct>:

Status_Packet arr_to_struct(uint8_t array[])
{
 800087c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000880:	b08a      	sub	sp, #40	@ 0x28
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
 8000888:	466b      	mov	r3, sp
 800088a:	461e      	mov	r6, r3
	Status_Packet packet;
	packet.Header_1 = array[0];
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	733b      	strb	r3, [r7, #12]
	packet.Header_2 = array[1];
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	785b      	ldrb	r3, [r3, #1]
 8000896:	737b      	strb	r3, [r7, #13]
	packet.Packet_ID = array[2];
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	789b      	ldrb	r3, [r3, #2]
 800089c:	73bb      	strb	r3, [r7, #14]
	packet.Length = array[3];
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	78db      	ldrb	r3, [r3, #3]
 80008a2:	73fb      	strb	r3, [r7, #15]
	packet.Error = array[4];
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	791b      	ldrb	r3, [r3, #4]
 80008a8:	743b      	strb	r3, [r7, #16]
	uint8_t prm[packet.Length - 2];
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	1e99      	subs	r1, r3, #2
 80008ae:	1e4b      	subs	r3, r1, #1
 80008b0:	623b      	str	r3, [r7, #32]
 80008b2:	460a      	mov	r2, r1
 80008b4:	2300      	movs	r3, #0
 80008b6:	4690      	mov	r8, r2
 80008b8:	4699      	mov	r9, r3
 80008ba:	f04f 0200 	mov.w	r2, #0
 80008be:	f04f 0300 	mov.w	r3, #0
 80008c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008ce:	460a      	mov	r2, r1
 80008d0:	2300      	movs	r3, #0
 80008d2:	4614      	mov	r4, r2
 80008d4:	461d      	mov	r5, r3
 80008d6:	f04f 0200 	mov.w	r2, #0
 80008da:	f04f 0300 	mov.w	r3, #0
 80008de:	00eb      	lsls	r3, r5, #3
 80008e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008e4:	00e2      	lsls	r2, r4, #3
 80008e6:	460b      	mov	r3, r1
 80008e8:	3307      	adds	r3, #7
 80008ea:	08db      	lsrs	r3, r3, #3
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	ebad 0d03 	sub.w	sp, sp, r3
 80008f2:	466b      	mov	r3, sp
 80008f4:	3300      	adds	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 5; i < packet.Length + 3; i++)
 80008f8:	2305      	movs	r3, #5
 80008fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80008fe:	e00e      	b.n	800091e <arr_to_struct+0xa2>
	{
		prm[i - 5] = array[i];
 8000900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	441a      	add	r2, r3
 8000908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800090c:	3b05      	subs	r3, #5
 800090e:	7811      	ldrb	r1, [r2, #0]
 8000910:	69fa      	ldr	r2, [r7, #28]
 8000912:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 5; i < packet.Length + 3; i++)
 8000914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000918:	3301      	adds	r3, #1
 800091a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	1c9a      	adds	r2, r3, #2
 8000922:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000926:	429a      	cmp	r2, r3
 8000928:	daea      	bge.n	8000900 <arr_to_struct+0x84>
	}
	packet.Param = prm;
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	617b      	str	r3, [r7, #20]
	packet.Checksum = array[packet.Length + 3];
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	3303      	adds	r3, #3
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	4413      	add	r3, r2
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	763b      	strb	r3, [r7, #24]

	return packet;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	461c      	mov	r4, r3
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000948:	46b5      	mov	sp, r6
}
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	3728      	adds	r7, #40	@ 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000954:	4770      	bx	lr
	...

08000958 <AxelFlow_fire>:

Status_Packet AxelFlow_fire(UART_HandleTypeDef *huart, Instruction_Packet ip)
{
 8000958:	b082      	sub	sp, #8
 800095a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800095e:	b0a1      	sub	sp, #132	@ 0x84
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800096a:	e881 000c 	stmia.w	r1, {r2, r3}
 800096e:	466b      	mov	r3, sp
 8000970:	461e      	mov	r6, r3
	HAL_StatusTypeDef err1, err2;
#ifndef DEBUG_PRINT_COMMUNICATION
	(void) err1, (void) err2; // silence warnings
#endif
	uint8_t Status_array[STATUS_FRAME_BUFFER];
	memset(Status_array, 0, STATUS_FRAME_BUFFER);
 8000972:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000976:	220a      	movs	r2, #10
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f007 feb8 	bl	80086f0 <memset>
	struct_to_arr(ip);
 8000980:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000986:	f7ff ff31 	bl	80007ec <struct_to_arr>

	UART_HandleTypeDef huartx = *huart;
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4611      	mov	r1, r2
 8000992:	2248      	movs	r2, #72	@ 0x48
 8000994:	4618      	mov	r0, r3
 8000996:	f007 fed7 	bl	8008748 <memcpy>

	err1 = HAL_UART_Transmit(&huartx, info_array, ip.Length + 4, HAL_MAX_DELAY);
 800099a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800099e:	3304      	adds	r3, #4
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	f107 001c 	add.w	r0, r7, #28
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	4951      	ldr	r1, [pc, #324]	@ (8000af0 <AxelFlow_fire+0x198>)
 80009ac:	f002 fe94 	bl	80036d8 <HAL_UART_Transmit>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
	__HAL_UART_ENABLE_IT(&huartx, UART_IT_RXNE); // Enable receive interrupt after transmission
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	68da      	ldr	r2, [r3, #12]
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	f042 0220 	orr.w	r2, r2, #32
 80009c0:	60da      	str	r2, [r3, #12]
	err2 = HAL_UART_Receive(&huartx, Status_array, STATUS_FRAME_BUFFER,
 80009c2:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80009c6:	f107 001c 	add.w	r0, r7, #28
 80009ca:	2332      	movs	r3, #50	@ 0x32
 80009cc:	220a      	movs	r2, #10
 80009ce:	f002 ff0e 	bl	80037ee <HAL_UART_Receive>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	STATUS_PACKET_TIMEOUT);
	uint8_t Start_Index = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	for (uint8_t i = 0; i < STATUS_FRAME_BUFFER - 1; i++)
 80009de:	2300      	movs	r3, #0
 80009e0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80009e4:	e023      	b.n	8000a2e <AxelFlow_fire+0xd6>
	{
		if (Status_array[i] == 0xFF && Status_array[i + 1] == 0xFF
 80009e6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80009ea:	3380      	adds	r3, #128	@ 0x80
 80009ec:	443b      	add	r3, r7
 80009ee:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80009f2:	2bff      	cmp	r3, #255	@ 0xff
 80009f4:	d116      	bne.n	8000a24 <AxelFlow_fire+0xcc>
 80009f6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80009fa:	3301      	adds	r3, #1
 80009fc:	3380      	adds	r3, #128	@ 0x80
 80009fe:	443b      	add	r3, r7
 8000a00:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000a04:	2bff      	cmp	r3, #255	@ 0xff
 8000a06:	d10d      	bne.n	8000a24 <AxelFlow_fire+0xcc>
				&& Status_array[i + 2] != 0xFF)
 8000a08:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	3380      	adds	r3, #128	@ 0x80
 8000a10:	443b      	add	r3, r7
 8000a12:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d004      	beq.n	8000a24 <AxelFlow_fire+0xcc>
		{
			Start_Index = i;
 8000a1a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000a1e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			break;
 8000a22:	e008      	b.n	8000a36 <AxelFlow_fire+0xde>
	for (uint8_t i = 0; i < STATUS_FRAME_BUFFER - 1; i++)
 8000a24:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000a28:	3301      	adds	r3, #1
 8000a2a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8000a2e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000a32:	2b08      	cmp	r3, #8
 8000a34:	d9d7      	bls.n	80009e6 <AxelFlow_fire+0x8e>
		}
	}
	uint8_t Status_array_filtered[Status_array[Start_Index + 3] + 4];
 8000a36:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a3a:	3303      	adds	r3, #3
 8000a3c:	3380      	adds	r3, #128	@ 0x80
 8000a3e:	443b      	add	r3, r7
 8000a40:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000a44:	1d19      	adds	r1, r3, #4
 8000a46:	1e4b      	subs	r3, r1, #1
 8000a48:	677b      	str	r3, [r7, #116]	@ 0x74
 8000a4a:	460a      	mov	r2, r1
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	4690      	mov	r8, r2
 8000a50:	4699      	mov	r9, r3
 8000a52:	f04f 0200 	mov.w	r2, #0
 8000a56:	f04f 0300 	mov.w	r3, #0
 8000a5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a66:	460a      	mov	r2, r1
 8000a68:	2300      	movs	r3, #0
 8000a6a:	4614      	mov	r4, r2
 8000a6c:	461d      	mov	r5, r3
 8000a6e:	f04f 0200 	mov.w	r2, #0
 8000a72:	f04f 0300 	mov.w	r3, #0
 8000a76:	00eb      	lsls	r3, r5, #3
 8000a78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a7c:	00e2      	lsls	r2, r4, #3
 8000a7e:	460b      	mov	r3, r1
 8000a80:	3307      	adds	r3, #7
 8000a82:	08db      	lsrs	r3, r3, #3
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	ebad 0d03 	sub.w	sp, sp, r3
 8000a8a:	466b      	mov	r3, sp
 8000a8c:	3300      	adds	r3, #0
 8000a8e:	673b      	str	r3, [r7, #112]	@ 0x70

	for (uint8_t i = 0; i < sizeof(Status_array_filtered); i++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8000a96:	e011      	b.n	8000abc <AxelFlow_fire+0x164>
	{
		Status_array_filtered[i] = Status_array[Start_Index + i];
 8000a98:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000a9c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8000aa0:	441a      	add	r2, r3
 8000aa2:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8000aa6:	3280      	adds	r2, #128	@ 0x80
 8000aa8:	443a      	add	r2, r7
 8000aaa:	f812 0c1c 	ldrb.w	r0, [r2, #-28]
 8000aae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000ab0:	54d0      	strb	r0, [r2, r3]
	for (uint8_t i = 0; i < sizeof(Status_array_filtered); i++)
 8000ab2:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8000abc:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d3e8      	bcc.n	8000a98 <AxelFlow_fire+0x140>
	}
	Status_Packet packet = arr_to_struct(Status_array_filtered);
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fed5 	bl	800087c <arr_to_struct>
		AxelFlow_debug_println(temp);
		sprintf(temp, "err2: %u", err2);
		AxelFlow_debug_println(temp);
	}
#endif
	return packet;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	461c      	mov	r4, r3
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ae0:	46b5      	mov	sp, r6
}
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	3784      	adds	r7, #132	@ 0x84
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000aec:	b002      	add	sp, #8
 8000aee:	4770      	bx	lr
 8000af0:	20000174 	.word	0x20000174

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b5b0      	push	{r4, r5, r7, lr}
 8000af6:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8000afa:	af12      	add	r7, sp, #72	@ 0x48

  /* USER CODE BEGIN 1 */
	AxelFlow_debug_init(&huart2);
 8000afc:	485d      	ldr	r0, [pc, #372]	@ (8000c74 <main+0x180>)
 8000afe:	f7ff fe15 	bl	800072c <AxelFlow_debug_init>
	UART_HandleTypeDef servo1_UART_Handle = AxelFlow_UART_Init(USART1, 1000000); // Make sure that interrupt is selected.
 8000b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b06:	4a5c      	ldr	r2, [pc, #368]	@ (8000c78 <main+0x184>)
 8000b08:	495c      	ldr	r1, [pc, #368]	@ (8000c7c <main+0x188>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fe20 	bl	8000750 <AxelFlow_UART_Init>
	Servo servo1 = AxelFlow_servo_init(0x04, &servo1_UART_Handle, false);
 8000b10:	f507 70d8 	add.w	r0, r7, #432	@ 0x1b0
 8000b14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8000b18:	2300      	movs	r3, #0
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	f7ff fcd4 	bl	80004c8 <AxelFlow_servo_init>
	Servo servo2 = AxelFlow_servo_init(0x03, &servo1_UART_Handle, false);
 8000b20:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8000b24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2103      	movs	r1, #3
 8000b2c:	f7ff fccc 	bl	80004c8 <AxelFlow_servo_init>
	Servo servo3 = AxelFlow_servo_init(0x01, &servo1_UART_Handle, false);
 8000b30:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000b34:	f5a3 709c 	sub.w	r0, r3, #312	@ 0x138
 8000b38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	2101      	movs	r1, #1
 8000b40:	f7ff fcc2 	bl	80004c8 <AxelFlow_servo_init>
	Servo servo4 = AxelFlow_servo_init(0x05, &servo1_UART_Handle, false);
 8000b44:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000b48:	f5a3 70c4 	sub.w	r0, r3, #392	@ 0x188
 8000b4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8000b50:	2300      	movs	r3, #0
 8000b52:	2105      	movs	r1, #5
 8000b54:	f7ff fcb8 	bl	80004c8 <AxelFlow_servo_init>
	Servo servo5 = AxelFlow_servo_init(0x02, &servo1_UART_Handle, true);
 8000b58:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000b5c:	f5a3 70ec 	sub.w	r0, r3, #472	@ 0x1d8
 8000b60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8000b64:	2301      	movs	r3, #1
 8000b66:	2102      	movs	r1, #2
 8000b68:	f7ff fcae 	bl	80004c8 <AxelFlow_servo_init>
	Servo servo6 = AxelFlow_servo_init(0x09, &servo1_UART_Handle, false);
 8000b6c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000b70:	f5a3 700a 	sub.w	r0, r3, #552	@ 0x228
 8000b74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8000b78:	2300      	movs	r3, #0
 8000b7a:	2109      	movs	r1, #9
 8000b7c:	f7ff fca4 	bl	80004c8 <AxelFlow_servo_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b80:	f000 fa9a 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b84:	f000 f880 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b88:	f000 f93c 	bl	8000e04 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b8c:	f000 f8e6 	bl	8000d5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b90:	f000 f90e 	bl	8000db0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000b94:	f007 f8c2 	bl	8007d1c <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		setSpeed(20, servo6);
 8000b98:	463d      	mov	r5, r7
 8000b9a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000b9e:	f5a3 740a 	sub.w	r4, r3, #552	@ 0x228
 8000ba2:	4668      	mov	r0, sp
 8000ba4:	f104 030c 	add.w	r3, r4, #12
 8000ba8:	2244      	movs	r2, #68	@ 0x44
 8000baa:	4619      	mov	r1, r3
 8000bac:	f007 fdcc 	bl	8008748 <memcpy>
 8000bb0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000bb4:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f7ff fd1b 	bl	80005f4 <setSpeed>
		HAL_Delay(2000);
 8000bbe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000bc2:	f000 faeb 	bl	800119c <HAL_Delay>
		setPosition(120, servo6);
 8000bc6:	463d      	mov	r5, r7
 8000bc8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000bcc:	f5a3 740a 	sub.w	r4, r3, #552	@ 0x228
 8000bd0:	4668      	mov	r0, sp
 8000bd2:	f104 030c 	add.w	r3, r4, #12
 8000bd6:	2244      	movs	r2, #68	@ 0x44
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f007 fdb5 	bl	8008748 <memcpy>
 8000bde:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000be2:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8000c80 <main+0x18c>
 8000be6:	4628      	mov	r0, r5
 8000be8:	f7ff fcc4 	bl	8000574 <setPosition>
		setSpeed(20, servo6);
 8000bec:	463d      	mov	r5, r7
 8000bee:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000bf2:	f5a3 740a 	sub.w	r4, r3, #552	@ 0x228
 8000bf6:	4668      	mov	r0, sp
 8000bf8:	f104 030c 	add.w	r3, r4, #12
 8000bfc:	2244      	movs	r2, #68	@ 0x44
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f007 fda2 	bl	8008748 <memcpy>
 8000c04:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000c08:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	f7ff fcf1 	bl	80005f4 <setSpeed>
		HAL_Delay(2000);
 8000c12:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c16:	f000 fac1 	bl	800119c <HAL_Delay>
		setPosition(180, servo6);
 8000c1a:	463d      	mov	r5, r7
 8000c1c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000c20:	f5a3 740a 	sub.w	r4, r3, #552	@ 0x228
 8000c24:	4668      	mov	r0, sp
 8000c26:	f104 030c 	add.w	r3, r4, #12
 8000c2a:	2244      	movs	r2, #68	@ 0x44
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f007 fd8b 	bl	8008748 <memcpy>
 8000c32:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000c36:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000c84 <main+0x190>
 8000c3a:	4628      	mov	r0, r5
 8000c3c:	f7ff fc9a 	bl	8000574 <setPosition>
		setSpeed(20, servo6);
 8000c40:	463d      	mov	r5, r7
 8000c42:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000c46:	f5a3 740a 	sub.w	r4, r3, #552	@ 0x228
 8000c4a:	4668      	mov	r0, sp
 8000c4c:	f104 030c 	add.w	r3, r4, #12
 8000c50:	2244      	movs	r2, #68	@ 0x44
 8000c52:	4619      	mov	r1, r3
 8000c54:	f007 fd78 	bl	8008748 <memcpy>
 8000c58:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000c5c:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000c60:	4628      	mov	r0, r5
 8000c62:	f7ff fcc7 	bl	80005f4 <setSpeed>
		HAL_Delay(2000);
 8000c66:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c6a:	f000 fa97 	bl	800119c <HAL_Delay>
		setSpeed(20, servo6);
 8000c6e:	bf00      	nop
 8000c70:	e792      	b.n	8000b98 <main+0xa4>
 8000c72:	bf00      	nop
 8000c74:	200001cc 	.word	0x200001cc
 8000c78:	000f4240 	.word	0x000f4240
 8000c7c:	40011000 	.word	0x40011000
 8000c80:	42f00000 	.word	0x42f00000
 8000c84:	43340000 	.word	0x43340000

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b094      	sub	sp, #80	@ 0x50
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0320 	add.w	r3, r7, #32
 8000c92:	2230      	movs	r2, #48	@ 0x30
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f007 fd2a 	bl	80086f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	4b28      	ldr	r3, [pc, #160]	@ (8000d54 <SystemClock_Config+0xcc>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb4:	4a27      	ldr	r2, [pc, #156]	@ (8000d54 <SystemClock_Config+0xcc>)
 8000cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbc:	4b25      	ldr	r3, [pc, #148]	@ (8000d54 <SystemClock_Config+0xcc>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	4b22      	ldr	r3, [pc, #136]	@ (8000d58 <SystemClock_Config+0xd0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a21      	ldr	r2, [pc, #132]	@ (8000d58 <SystemClock_Config+0xd0>)
 8000cd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d58 <SystemClock_Config+0xd0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000cf8:	2319      	movs	r3, #25
 8000cfa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cfc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d02:	2304      	movs	r3, #4
 8000d04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d06:	2307      	movs	r3, #7
 8000d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 ffe2 	bl	8002cd8 <HAL_RCC_OscConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d1a:	f000 f89b 	bl	8000e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1e:	230f      	movs	r3, #15
 8000d20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d22:	2302      	movs	r3, #2
 8000d24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 fa44 	bl	80031c8 <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d46:	f000 f885 	bl	8000e54 <Error_Handler>
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3750      	adds	r7, #80	@ 0x50
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40007000 	.word	0x40007000

08000d5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d60:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <MX_USART1_UART_Init+0x48>)
 8000d62:	4a11      	ldr	r2, [pc, #68]	@ (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <MX_USART1_UART_Init+0x48>)
 8000d68:	4a10      	ldr	r2, [pc, #64]	@ (8000dac <MX_USART1_UART_Init+0x50>)
 8000d6a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <MX_USART1_UART_Init+0x48>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <MX_USART1_UART_Init+0x48>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <MX_USART1_UART_Init+0x48>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <MX_USART1_UART_Init+0x48>)
 8000d80:	220c      	movs	r2, #12
 8000d82:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <MX_USART1_UART_Init+0x48>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <MX_USART1_UART_Init+0x48>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	@ (8000da4 <MX_USART1_UART_Init+0x48>)
 8000d92:	f002 fc49 	bl	8003628 <HAL_HalfDuplex_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000d9c:	f000 f85a 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000184 	.word	0x20000184
 8000da8:	40011000 	.word	0x40011000
 8000dac:	000f4240 	.word	0x000f4240

08000db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	@ (8000e00 <MX_USART2_UART_Init+0x50>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000de8:	f002 fbce 	bl	8003588 <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000df2:	f000 f82f 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200001cc 	.word	0x200001cc
 8000e00:	40004400 	.word	0x40004400

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <MX_GPIO_Init+0x4c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a0f      	ldr	r2, [pc, #60]	@ (8000e50 <MX_GPIO_Init+0x4c>)
 8000e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <MX_GPIO_Init+0x4c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <MX_GPIO_Init+0x4c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a08      	ldr	r2, [pc, #32]	@ (8000e50 <MX_GPIO_Init+0x4c>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <MX_GPIO_Init+0x4c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <Error_Handler+0x8>

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	@ 0x30
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a36      	ldr	r2, [pc, #216]	@ (8000fa8 <HAL_UART_MspInit+0xf8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d135      	bne.n	8000f3e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
 8000ed6:	4b35      	ldr	r3, [pc, #212]	@ (8000fac <HAL_UART_MspInit+0xfc>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eda:	4a34      	ldr	r2, [pc, #208]	@ (8000fac <HAL_UART_MspInit+0xfc>)
 8000edc:	f043 0310 	orr.w	r3, r3, #16
 8000ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee2:	4b32      	ldr	r3, [pc, #200]	@ (8000fac <HAL_UART_MspInit+0xfc>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	f003 0310 	and.w	r3, r3, #16
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <HAL_UART_MspInit+0xfc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8000fac <HAL_UART_MspInit+0xfc>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b2b      	ldr	r3, [pc, #172]	@ (8000fac <HAL_UART_MspInit+0xfc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	4822      	ldr	r0, [pc, #136]	@ (8000fb0 <HAL_UART_MspInit+0x100>)
 8000f28:	f000 fb00 	bl	800152c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2025      	movs	r0, #37	@ 0x25
 8000f32:	f000 fa32 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f36:	2025      	movs	r0, #37	@ 0x25
 8000f38:	f000 fa4b 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f3c:	e030      	b.n	8000fa0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb4 <HAL_UART_MspInit+0x104>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d12b      	bne.n	8000fa0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <HAL_UART_MspInit+0xfc>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f50:	4a16      	ldr	r2, [pc, #88]	@ (8000fac <HAL_UART_MspInit+0xfc>)
 8000f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <HAL_UART_MspInit+0xfc>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <HAL_UART_MspInit+0xfc>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000fac <HAL_UART_MspInit+0xfc>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f74:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <HAL_UART_MspInit+0xfc>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f80:	230c      	movs	r3, #12
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f90:	2307      	movs	r3, #7
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <HAL_UART_MspInit+0x100>)
 8000f9c:	f000 fac6 	bl	800152c <HAL_GPIO_Init>
}
 8000fa0:	bf00      	nop
 8000fa2:	3730      	adds	r7, #48	@ 0x30
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40004400 	.word	0x40004400

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <NMI_Handler+0x4>

08000fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <MemManage_Handler+0x4>

08000fd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100e:	f000 f8a5 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <USART1_IRQHandler+0x10>)
 800101e:	f002 fc7d 	bl	800391c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000184 	.word	0x20000184

0800102c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <OTG_FS_IRQHandler+0x10>)
 8001032:	f000 fd43 	bl	8001abc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200016f8 	.word	0x200016f8

08001040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <SystemInit+0x20>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104a:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <SystemInit+0x20>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800109c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001068:	f7ff ffea 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800106c:	480c      	ldr	r0, [pc, #48]	@ (80010a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106e:	490d      	ldr	r1, [pc, #52]	@ (80010a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001070:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001084:	4c0a      	ldr	r4, [pc, #40]	@ (80010b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001092:	f007 fb35 	bl	8008700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001096:	f7ff fd2d 	bl	8000af4 <main>
  bx  lr    
 800109a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800109c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80010a8:	080087ec 	.word	0x080087ec
  ldr r2, =_sbss
 80010ac:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80010b0:	20001dfc 	.word	0x20001dfc

080010b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <HAL_Init+0x40>)
 80010c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <HAL_Init+0x40>)
 80010ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	@ (80010f8 <HAL_Init+0x40>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f94f 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	200f      	movs	r0, #15
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff feb8 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f967 	bl	80013ee <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 f92f 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	@ (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	20000214 	.word	0x20000214

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000214 	.word	0x20000214

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4907      	ldr	r1, [pc, #28]	@ (8001280 <__NVIC_EnableIRQ+0x38>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	@ (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	@ (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	@ 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	@ 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff8e 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff29 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff3e 	bl	800122c <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff8e 	bl	80012d8 <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5d 	bl	8001284 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff31 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffa2 	bl	8001340 <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001414:	f7ff feb6 	bl	8001184 <HAL_GetTick>
 8001418:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d008      	beq.n	8001438 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2280      	movs	r2, #128	@ 0x80
 800142a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e052      	b.n	80014de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0216 	bic.w	r2, r2, #22
 8001446:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001456:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <HAL_DMA_Abort+0x62>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0208 	bic.w	r2, r2, #8
 8001476:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001488:	e013      	b.n	80014b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800148a:	f7ff fe7b 	bl	8001184 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b05      	cmp	r3, #5
 8001496:	d90c      	bls.n	80014b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2220      	movs	r2, #32
 800149c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2203      	movs	r2, #3
 80014a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e015      	b.n	80014de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e4      	bne.n	800148a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c4:	223f      	movs	r2, #63	@ 0x3f
 80014c6:	409a      	lsls	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d004      	beq.n	8001504 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2280      	movs	r2, #128	@ 0x80
 80014fe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e00c      	b.n	800151e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2205      	movs	r2, #5
 8001508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	@ 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	e159      	b.n	80017fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001548:	2201      	movs	r2, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	429a      	cmp	r2, r3
 8001562:	f040 8148 	bne.w	80017f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d005      	beq.n	800157e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157a:	2b02      	cmp	r3, #2
 800157c:	d130      	bne.n	80015e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b4:	2201      	movs	r2, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 0201 	and.w	r2, r3, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d017      	beq.n	800161c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d123      	bne.n	8001670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	08da      	lsrs	r2, r3, #3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3208      	adds	r2, #8
 8001630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	220f      	movs	r2, #15
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	691a      	ldr	r2, [r3, #16]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	69b9      	ldr	r1, [r7, #24]
 800166c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0203 	and.w	r2, r3, #3
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80a2 	beq.w	80017f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b57      	ldr	r3, [pc, #348]	@ (8001814 <HAL_GPIO_Init+0x2e8>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	4a56      	ldr	r2, [pc, #344]	@ (8001814 <HAL_GPIO_Init+0x2e8>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c2:	4b54      	ldr	r3, [pc, #336]	@ (8001814 <HAL_GPIO_Init+0x2e8>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ce:	4a52      	ldr	r2, [pc, #328]	@ (8001818 <HAL_GPIO_Init+0x2ec>)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	220f      	movs	r2, #15
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a49      	ldr	r2, [pc, #292]	@ (800181c <HAL_GPIO_Init+0x2f0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d019      	beq.n	800172e <HAL_GPIO_Init+0x202>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a48      	ldr	r2, [pc, #288]	@ (8001820 <HAL_GPIO_Init+0x2f4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_GPIO_Init+0x1fe>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a47      	ldr	r2, [pc, #284]	@ (8001824 <HAL_GPIO_Init+0x2f8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00d      	beq.n	8001726 <HAL_GPIO_Init+0x1fa>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a46      	ldr	r2, [pc, #280]	@ (8001828 <HAL_GPIO_Init+0x2fc>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d007      	beq.n	8001722 <HAL_GPIO_Init+0x1f6>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a45      	ldr	r2, [pc, #276]	@ (800182c <HAL_GPIO_Init+0x300>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_GPIO_Init+0x1f2>
 800171a:	2304      	movs	r3, #4
 800171c:	e008      	b.n	8001730 <HAL_GPIO_Init+0x204>
 800171e:	2307      	movs	r3, #7
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x204>
 8001722:	2303      	movs	r3, #3
 8001724:	e004      	b.n	8001730 <HAL_GPIO_Init+0x204>
 8001726:	2302      	movs	r3, #2
 8001728:	e002      	b.n	8001730 <HAL_GPIO_Init+0x204>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x204>
 800172e:	2300      	movs	r3, #0
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f002 0203 	and.w	r2, r2, #3
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	4093      	lsls	r3, r2
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001740:	4935      	ldr	r1, [pc, #212]	@ (8001818 <HAL_GPIO_Init+0x2ec>)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174e:	4b38      	ldr	r3, [pc, #224]	@ (8001830 <HAL_GPIO_Init+0x304>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001772:	4a2f      	ldr	r2, [pc, #188]	@ (8001830 <HAL_GPIO_Init+0x304>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001778:	4b2d      	ldr	r3, [pc, #180]	@ (8001830 <HAL_GPIO_Init+0x304>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800179c:	4a24      	ldr	r2, [pc, #144]	@ (8001830 <HAL_GPIO_Init+0x304>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017a2:	4b23      	ldr	r3, [pc, #140]	@ (8001830 <HAL_GPIO_Init+0x304>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001830 <HAL_GPIO_Init+0x304>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017cc:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <HAL_GPIO_Init+0x304>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001830 <HAL_GPIO_Init+0x304>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	f67f aea2 	bls.w	8001548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3724      	adds	r7, #36	@ 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40013800 	.word	0x40013800
 800181c:	40020000 	.word	0x40020000
 8001820:	40020400 	.word	0x40020400
 8001824:	40020800 	.word	0x40020800
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40021000 	.word	0x40021000
 8001830:	40013c00 	.word	0x40013c00

08001834 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af02      	add	r7, sp, #8
 800183a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e101      	b.n	8001a4a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d106      	bne.n	8001866 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f006 fc3b 	bl	80080dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2203      	movs	r2, #3
 800186a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001874:	d102      	bne.n	800187c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f003 f888 	bl	8004996 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7c1a      	ldrb	r2, [r3, #16]
 800188e:	f88d 2000 	strb.w	r2, [sp]
 8001892:	3304      	adds	r3, #4
 8001894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001896:	f002 ff67 	bl	8004768 <USB_CoreInit>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2202      	movs	r2, #2
 80018a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0ce      	b.n	8001a4a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 f880 	bl	80049b8 <USB_SetCurrentMode>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d005      	beq.n	80018ca <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2202      	movs	r2, #2
 80018c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0bf      	b.n	8001a4a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	73fb      	strb	r3, [r7, #15]
 80018ce:	e04a      	b.n	8001966 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	3315      	adds	r3, #21
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	3314      	adds	r3, #20
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	b298      	uxth	r0, r3
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	332e      	adds	r3, #46	@ 0x2e
 800190c:	4602      	mov	r2, r0
 800190e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4413      	add	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	3318      	adds	r3, #24
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	331c      	adds	r3, #28
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	3320      	adds	r3, #32
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	3324      	adds	r3, #36	@ 0x24
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	3301      	adds	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	791b      	ldrb	r3, [r3, #4]
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	429a      	cmp	r2, r3
 800196e:	d3af      	bcc.n	80018d0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e044      	b.n	8001a00 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	3301      	adds	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	791b      	ldrb	r3, [r3, #4]
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d3b5      	bcc.n	8001976 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7c1a      	ldrb	r2, [r3, #16]
 8001a12:	f88d 2000 	strb.w	r2, [sp]
 8001a16:	3304      	adds	r3, #4
 8001a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a1a:	f003 f819 	bl	8004a50 <USB_DevInit>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e00c      	b.n	8001a4a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 f863 	bl	8005b0e <USB_DevDisconnect>

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_PCD_Start+0x1c>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e022      	b.n	8001ab4 <HAL_PCD_Start+0x62>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d105      	bne.n	8001a96 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a8e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 ff6a 	bl	8004974 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f004 f811 	bl	8005acc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b08d      	sub	sp, #52	@ 0x34
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f004 f8cf 	bl	8005c76 <USB_GetMode>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 848c 	bne.w	80023f8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f004 f833 	bl	8005b50 <USB_ReadInterrupts>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 8482 	beq.w	80023f6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 f820 	bl	8005b50 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d107      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f002 0202 	and.w	r2, r2, #2
 8001b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f004 f80e 	bl	8005b50 <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b10      	cmp	r3, #16
 8001b3c:	d161      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699a      	ldr	r2, [r3, #24]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0210 	bic.w	r2, r2, #16
 8001b4c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	f003 020f 	and.w	r2, r3, #15
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	0c5b      	lsrs	r3, r3, #17
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d124      	bne.n	8001bc4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d035      	beq.n	8001bf2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	6a38      	ldr	r0, [r7, #32]
 8001b9a:	f003 fe45 	bl	8005828 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001baa:	441a      	add	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bbc:	441a      	add	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	615a      	str	r2, [r3, #20]
 8001bc2:	e016      	b.n	8001bf2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	0c5b      	lsrs	r3, r3, #17
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	2b06      	cmp	r3, #6
 8001bce:	d110      	bne.n	8001bf2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	4619      	mov	r1, r3
 8001bda:	6a38      	ldr	r0, [r7, #32]
 8001bdc:	f003 fe24 	bl	8005828 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bec:	441a      	add	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699a      	ldr	r2, [r3, #24]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0210 	orr.w	r2, r2, #16
 8001c00:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 ffa2 	bl	8005b50 <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c12:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001c16:	f040 80a7 	bne.w	8001d68 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 ffa7 	bl	8005b76 <USB_ReadDevAllOutEpInterrupt>
 8001c28:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001c2a:	e099      	b.n	8001d60 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 808e 	beq.w	8001d54 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 ffcb 	bl	8005bde <USB_ReadDevOutEPInterrupt>
 8001c48:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00c      	beq.n	8001c6e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	015a      	lsls	r2, r3, #5
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c60:	461a      	mov	r2, r3
 8001c62:	2301      	movs	r3, #1
 8001c64:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fea3 	bl	80029b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00c      	beq.n	8001c92 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	015a      	lsls	r2, r3, #5
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c84:	461a      	mov	r2, r3
 8001c86:	2308      	movs	r3, #8
 8001c88:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 ff79 	bl	8002b84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2310      	movs	r3, #16
 8001cac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d030      	beq.n	8001d1a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc0:	2b80      	cmp	r3, #128	@ 0x80
 8001cc2:	d109      	bne.n	8001cd8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cd6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	3304      	adds	r3, #4
 8001cec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	78db      	ldrb	r3, [r3, #3]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d108      	bne.n	8001d08 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f006 fae6 	bl	80082d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	015a      	lsls	r2, r3, #5
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d14:	461a      	mov	r2, r3
 8001d16:	2302      	movs	r3, #2
 8001d18:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	015a      	lsls	r2, r3, #5
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d30:	461a      	mov	r2, r3
 8001d32:	2320      	movs	r3, #32
 8001d34:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d52:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	3301      	adds	r3, #1
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f47f af62 	bne.w	8001c2c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 feef 	bl	8005b50 <USB_ReadInterrupts>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001d7c:	f040 80db 	bne.w	8001f36 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 ff10 	bl	8005baa <USB_ReadDevAllInEpInterrupt>
 8001d8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001d90:	e0cd      	b.n	8001f2e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80c2 	beq.w	8001f22 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 ff36 	bl	8005c1a <USB_ReadDevInEPInterrupt>
 8001dae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d057      	beq.n	8001e6a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69f9      	ldr	r1, [r7, #28]
 8001dd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001dda:	4013      	ands	r3, r2
 8001ddc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de0:	015a      	lsls	r2, r3, #5
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dea:	461a      	mov	r2, r3
 8001dec:	2301      	movs	r3, #1
 8001dee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	799b      	ldrb	r3, [r3, #6]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d132      	bne.n	8001e5e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	3320      	adds	r3, #32
 8001e08:	6819      	ldr	r1, [r3, #0]
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4403      	add	r3, r0
 8001e18:	331c      	adds	r3, #28
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4419      	add	r1, r3
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4403      	add	r3, r0
 8001e2c:	3320      	adds	r3, #32
 8001e2e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d113      	bne.n	8001e5e <HAL_PCD_IRQHandler+0x3a2>
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	3324      	adds	r3, #36	@ 0x24
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d108      	bne.n	8001e5e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e56:	461a      	mov	r2, r3
 8001e58:	2101      	movs	r1, #1
 8001e5a:	f003 ff3d 	bl	8005cd8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	4619      	mov	r1, r3
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f006 f9ba 	bl	80081de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e80:	461a      	mov	r2, r3
 8001e82:	2308      	movs	r3, #8
 8001e84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2340      	movs	r3, #64	@ 0x40
 8001ebc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d023      	beq.n	8001f10 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ec8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001eca:	6a38      	ldr	r0, [r7, #32]
 8001ecc:	f002 ff24 	bl	8004d18 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	3310      	adds	r3, #16
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	78db      	ldrb	r3, [r3, #3]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d108      	bne.n	8001efe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f006 f9fd 	bl	80082f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fcbd 	bl	800289c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	3301      	adds	r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f47f af2e 	bne.w	8001d92 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 fe08 	bl	8005b50 <USB_ReadInterrupts>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f4a:	d122      	bne.n	8001f92 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d108      	bne.n	8001f7c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f72:	2100      	movs	r1, #0
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fea3 	bl	8002cc0 <HAL_PCDEx_LPM_Callback>
 8001f7a:	e002      	b.n	8001f82 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f006 f99b 	bl	80082b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001f90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fdda 	bl	8005b50 <USB_ReadInterrupts>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fa6:	d112      	bne.n	8001fce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d102      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f006 f957 	bl	800826c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001fcc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fdbc 	bl	8005b50 <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fe2:	f040 80b7 	bne.w	8002154 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ff4:	f023 0301 	bic.w	r3, r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2110      	movs	r1, #16
 8002000:	4618      	mov	r0, r3
 8002002:	f002 fe89 	bl	8004d18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002006:	2300      	movs	r3, #0
 8002008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800200a:	e046      	b.n	800209a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800200c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	4413      	add	r3, r2
 8002014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002018:	461a      	mov	r2, r3
 800201a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800201e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	4413      	add	r3, r2
 8002028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002030:	0151      	lsls	r1, r2, #5
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	440a      	add	r2, r1
 8002036:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800203a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800203e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	4413      	add	r3, r2
 8002048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800204c:	461a      	mov	r2, r3
 800204e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002052:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	4413      	add	r3, r2
 800205c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002064:	0151      	lsls	r1, r2, #5
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	440a      	add	r2, r1
 800206a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800206e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002072:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	4413      	add	r3, r2
 800207c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002084:	0151      	lsls	r1, r2, #5
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	440a      	add	r2, r1
 800208a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800208e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002092:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002096:	3301      	adds	r3, #1
 8002098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	791b      	ldrb	r3, [r3, #4]
 800209e:	461a      	mov	r2, r3
 80020a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d3b2      	bcc.n	800200c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020b4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80020b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7bdb      	ldrb	r3, [r3, #15]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d016      	beq.n	80020f0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020d2:	f043 030b 	orr.w	r3, r3, #11
 80020d6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020e8:	f043 030b 	orr.w	r3, r3, #11
 80020ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ee:	e015      	b.n	800211c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002102:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002106:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002116:	f043 030b 	orr.w	r3, r3, #11
 800211a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800212a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800212e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800213e:	461a      	mov	r2, r3
 8002140:	f003 fdca 	bl	8005cd8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002152:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f003 fcf9 	bl	8005b50 <USB_ReadInterrupts>
 800215e:	4603      	mov	r3, r0
 8002160:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002168:	d123      	bne.n	80021b2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f003 fd8f 	bl	8005c92 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f002 fe46 	bl	8004e0a <USB_GetDevSpeed>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681c      	ldr	r4, [r3, #0]
 800218a:	f001 f9c9 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 800218e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002194:	461a      	mov	r2, r3
 8002196:	4620      	mov	r0, r4
 8002198:	f002 fb4a 	bl	8004830 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f006 f846 	bl	800822e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80021b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 fcca 	bl	8005b50 <USB_ReadInterrupts>
 80021bc:	4603      	mov	r3, r0
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d10a      	bne.n	80021dc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f006 f823 	bl	8008212 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f002 0208 	and.w	r2, r2, #8
 80021da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fcb5 	bl	8005b50 <USB_ReadInterrupts>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ec:	2b80      	cmp	r3, #128	@ 0x80
 80021ee:	d123      	bne.n	8002238 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021fc:	2301      	movs	r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002200:	e014      	b.n	800222c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002206:	4613      	mov	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d105      	bne.n	8002226 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221c:	b2db      	uxtb	r3, r3
 800221e:	4619      	mov	r1, r3
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fb0a 	bl	800283a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002228:	3301      	adds	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	791b      	ldrb	r3, [r3, #4]
 8002230:	461a      	mov	r2, r3
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	4293      	cmp	r3, r2
 8002236:	d3e4      	bcc.n	8002202 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f003 fc87 	bl	8005b50 <USB_ReadInterrupts>
 8002242:	4603      	mov	r3, r0
 8002244:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002248:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800224c:	d13c      	bne.n	80022c8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800224e:	2301      	movs	r3, #1
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
 8002252:	e02b      	b.n	80022ac <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	3318      	adds	r3, #24
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d115      	bne.n	80022a6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800227a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	da12      	bge.n	80022a6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	3317      	adds	r3, #23
 8002290:	2201      	movs	r2, #1
 8002292:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 faca 	bl	800283a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a8:	3301      	adds	r3, #1
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	791b      	ldrb	r3, [r3, #4]
 80022b0:	461a      	mov	r2, r3
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d3cd      	bcc.n	8002254 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80022c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 fc3f 	bl	8005b50 <USB_ReadInterrupts>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022dc:	d156      	bne.n	800238c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022de:	2301      	movs	r3, #1
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80022e2:	e045      	b.n	8002370 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d12e      	bne.n	800236a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800230c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800230e:	2b00      	cmp	r3, #0
 8002310:	da2b      	bge.n	800236a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800231e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002322:	429a      	cmp	r2, r3
 8002324:	d121      	bne.n	800236a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002338:	2201      	movs	r2, #1
 800233a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10a      	bne.n	800236a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002362:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002366:	6053      	str	r3, [r2, #4]
            break;
 8002368:	e008      	b.n	800237c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	3301      	adds	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	791b      	ldrb	r3, [r3, #4]
 8002374:	461a      	mov	r2, r3
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	4293      	cmp	r3, r2
 800237a:	d3b3      	bcc.n	80022e4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800238a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f003 fbdd 	bl	8005b50 <USB_ReadInterrupts>
 8002396:	4603      	mov	r3, r0
 8002398:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800239c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023a0:	d10a      	bne.n	80023b8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f005 ffba 	bl	800831c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80023b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f003 fbc7 	bl	8005b50 <USB_ReadInterrupts>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d115      	bne.n	80023f8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f005 ffaa 	bl	8008338 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6859      	ldr	r1, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	e000      	b.n	80023f8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80023f6:	bf00      	nop
    }
  }
}
 80023f8:	3734      	adds	r7, #52	@ 0x34
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd90      	pop	{r4, r7, pc}

080023fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_PCD_SetAddress+0x1a>
 8002414:	2302      	movs	r3, #2
 8002416:	e012      	b.n	800243e <HAL_PCD_SetAddress+0x40>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f003 fb26 	bl	8005a80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	4608      	mov	r0, r1
 8002450:	4611      	mov	r1, r2
 8002452:	461a      	mov	r2, r3
 8002454:	4603      	mov	r3, r0
 8002456:	70fb      	strb	r3, [r7, #3]
 8002458:	460b      	mov	r3, r1
 800245a:	803b      	strh	r3, [r7, #0]
 800245c:	4613      	mov	r3, r2
 800245e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002468:	2b00      	cmp	r3, #0
 800246a:	da0f      	bge.n	800248c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	f003 020f 	and.w	r2, r3, #15
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	3310      	adds	r3, #16
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	3304      	adds	r3, #4
 8002482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	705a      	strb	r2, [r3, #1]
 800248a:	e00f      	b.n	80024ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	f003 020f 	and.w	r2, r3, #15
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	3304      	adds	r3, #4
 80024a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80024b8:	883b      	ldrh	r3, [r7, #0]
 80024ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	78ba      	ldrb	r2, [r7, #2]
 80024c6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	785b      	ldrb	r3, [r3, #1]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024da:	78bb      	ldrb	r3, [r7, #2]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d102      	bne.n	80024e6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_PCD_EP_Open+0xae>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e00e      	b.n	8002512 <HAL_PCD_EP_Open+0xcc>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68f9      	ldr	r1, [r7, #12]
 8002502:	4618      	mov	r0, r3
 8002504:	f002 fca6 	bl	8004e54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002510:	7afb      	ldrb	r3, [r7, #11]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002526:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800252a:	2b00      	cmp	r3, #0
 800252c:	da0f      	bge.n	800254e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	f003 020f 	and.w	r2, r3, #15
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	3310      	adds	r3, #16
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	3304      	adds	r3, #4
 8002544:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	705a      	strb	r2, [r3, #1]
 800254c:	e00f      	b.n	800256e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	f003 020f 	and.w	r2, r3, #15
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	4413      	add	r3, r2
 8002564:	3304      	adds	r3, #4
 8002566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	b2da      	uxtb	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_PCD_EP_Close+0x6e>
 8002584:	2302      	movs	r3, #2
 8002586:	e00e      	b.n	80025a6 <HAL_PCD_EP_Close+0x8c>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68f9      	ldr	r1, [r7, #12]
 8002596:	4618      	mov	r0, r3
 8002598:	f002 fce4 	bl	8004f64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	460b      	mov	r3, r1
 80025bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025be:	7afb      	ldrb	r3, [r7, #11]
 80025c0:	f003 020f 	and.w	r2, r3, #15
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2200      	movs	r2, #0
 80025e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2200      	movs	r2, #0
 80025ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025f0:	7afb      	ldrb	r3, [r7, #11]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	799b      	ldrb	r3, [r3, #6]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d102      	bne.n	800260a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	799b      	ldrb	r3, [r3, #6]
 8002612:	461a      	mov	r2, r3
 8002614:	6979      	ldr	r1, [r7, #20]
 8002616:	f002 fd81 	bl	800511c <USB_EPStartXfer>

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	f003 020f 	and.w	r2, r3, #15
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	460b      	mov	r3, r1
 8002662:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002664:	7afb      	ldrb	r3, [r7, #11]
 8002666:	f003 020f 	and.w	r2, r3, #15
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	3310      	adds	r3, #16
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2200      	movs	r2, #0
 800268c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2201      	movs	r2, #1
 8002692:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002694:	7afb      	ldrb	r3, [r7, #11]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	b2da      	uxtb	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	799b      	ldrb	r3, [r3, #6]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d102      	bne.n	80026ae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	799b      	ldrb	r3, [r3, #6]
 80026b6:	461a      	mov	r2, r3
 80026b8:	6979      	ldr	r1, [r7, #20]
 80026ba:	f002 fd2f 	bl	800511c <USB_EPStartXfer>

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	7912      	ldrb	r2, [r2, #4]
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e04f      	b.n	8002786 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	da0f      	bge.n	800270e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	f003 020f 	and.w	r2, r3, #15
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	3310      	adds	r3, #16
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	3304      	adds	r3, #4
 8002704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	705a      	strb	r2, [r3, #1]
 800270c:	e00d      	b.n	800272a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	4413      	add	r3, r2
 8002720:	3304      	adds	r3, #4
 8002722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	b2da      	uxtb	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_PCD_EP_SetStall+0x82>
 8002746:	2302      	movs	r3, #2
 8002748:	e01d      	b.n	8002786 <HAL_PCD_EP_SetStall+0xbe>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68f9      	ldr	r1, [r7, #12]
 8002758:	4618      	mov	r0, r3
 800275a:	f003 f8bd 	bl	80058d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	2b00      	cmp	r3, #0
 8002766:	d109      	bne.n	800277c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	7999      	ldrb	r1, [r3, #6]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002776:	461a      	mov	r2, r3
 8002778:	f003 faae 	bl	8005cd8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	7912      	ldrb	r2, [r2, #4]
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d901      	bls.n	80027ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e042      	b.n	8002832 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	da0f      	bge.n	80027d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	f003 020f 	and.w	r2, r3, #15
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	3310      	adds	r3, #16
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	3304      	adds	r3, #4
 80027ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	705a      	strb	r2, [r3, #1]
 80027d2:	e00f      	b.n	80027f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	f003 020f 	and.w	r2, r3, #15
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	3304      	adds	r3, #4
 80027ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	b2da      	uxtb	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_PCD_EP_ClrStall+0x86>
 8002810:	2302      	movs	r3, #2
 8002812:	e00e      	b.n	8002832 <HAL_PCD_EP_ClrStall+0xa4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68f9      	ldr	r1, [r7, #12]
 8002822:	4618      	mov	r0, r3
 8002824:	f003 f8c6 	bl	80059b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	460b      	mov	r3, r1
 8002844:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800284a:	2b00      	cmp	r3, #0
 800284c:	da0c      	bge.n	8002868 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	f003 020f 	and.w	r2, r3, #15
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	3310      	adds	r3, #16
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	3304      	adds	r3, #4
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e00c      	b.n	8002882 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	f003 020f 	and.w	r2, r3, #15
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	3304      	adds	r3, #4
 8002880:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68f9      	ldr	r1, [r7, #12]
 8002888:	4618      	mov	r0, r3
 800288a:	f002 fee5 	bl	8005658 <USB_EPStopXfer>
 800288e:	4603      	mov	r3, r0
 8002890:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002892:	7afb      	ldrb	r3, [r7, #11]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	@ 0x28
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	3310      	adds	r3, #16
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	4413      	add	r3, r2
 80028c0:	3304      	adds	r3, #4
 80028c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d901      	bls.n	80028d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e06b      	b.n	80029ac <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d902      	bls.n	80028f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3303      	adds	r3, #3
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028f8:	e02a      	b.n	8002950 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	429a      	cmp	r2, r3
 800290e:	d902      	bls.n	8002916 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3303      	adds	r3, #3
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	68d9      	ldr	r1, [r3, #12]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	4603      	mov	r3, r0
 8002932:	6978      	ldr	r0, [r7, #20]
 8002934:	f002 ff3a 	bl	80057ac <USB_WritePacket>

    ep->xfer_buff  += len;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	441a      	add	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	441a      	add	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	429a      	cmp	r2, r3
 8002964:	d809      	bhi.n	800297a <PCD_WriteEmptyTxFifo+0xde>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800296e:	429a      	cmp	r2, r3
 8002970:	d203      	bcs.n	800297a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1bf      	bne.n	80028fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	429a      	cmp	r2, r3
 8002984:	d811      	bhi.n	80029aa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	2201      	movs	r2, #1
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800299a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	43db      	mvns	r3, r3
 80029a0:	6939      	ldr	r1, [r7, #16]
 80029a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80029a6:	4013      	ands	r3, r2
 80029a8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	333c      	adds	r3, #60	@ 0x3c
 80029cc:	3304      	adds	r3, #4
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	799b      	ldrb	r3, [r3, #6]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d17b      	bne.n	8002ae2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d015      	beq.n	8002a20 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	4a61      	ldr	r2, [pc, #388]	@ (8002b7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	f240 80b9 	bls.w	8002b70 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80b3 	beq.w	8002b70 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a16:	461a      	mov	r2, r3
 8002a18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a1c:	6093      	str	r3, [r2, #8]
 8002a1e:	e0a7      	b.n	8002b70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a36:	461a      	mov	r2, r3
 8002a38:	2320      	movs	r3, #32
 8002a3a:	6093      	str	r3, [r2, #8]
 8002a3c:	e098      	b.n	8002b70 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f040 8093 	bne.w	8002b70 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d90f      	bls.n	8002a72 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a6e:	6093      	str	r3, [r2, #8]
 8002a70:	e07e      	b.n	8002b70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	3304      	adds	r3, #4
 8002a86:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a1a      	ldr	r2, [r3, #32]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	0159      	lsls	r1, r3, #5
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	440b      	add	r3, r1
 8002a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	1ad2      	subs	r2, r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d114      	bne.n	8002ad4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002abc:	461a      	mov	r2, r3
 8002abe:	2101      	movs	r1, #1
 8002ac0:	f003 f90a 	bl	8005cd8 <USB_EP0_OutStart>
 8002ac4:	e006      	b.n	8002ad4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	441a      	add	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f005 fb64 	bl	80081a8 <HAL_PCD_DataOutStageCallback>
 8002ae0:	e046      	b.n	8002b70 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	4a26      	ldr	r2, [pc, #152]	@ (8002b80 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d124      	bne.n	8002b34 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b00:	461a      	mov	r2, r3
 8002b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b06:	6093      	str	r3, [r2, #8]
 8002b08:	e032      	b.n	8002b70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b20:	461a      	mov	r2, r3
 8002b22:	2320      	movs	r3, #32
 8002b24:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f005 fb3b 	bl	80081a8 <HAL_PCD_DataOutStageCallback>
 8002b32:	e01d      	b.n	8002b70 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d114      	bne.n	8002b64 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d108      	bne.n	8002b64 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2100      	movs	r1, #0
 8002b60:	f003 f8ba 	bl	8005cd8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f005 fb1c 	bl	80081a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3720      	adds	r7, #32
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	4f54300a 	.word	0x4f54300a
 8002b80:	4f54310a 	.word	0x4f54310a

08002b84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	333c      	adds	r3, #60	@ 0x3c
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4a15      	ldr	r2, [pc, #84]	@ (8002c0c <PCD_EP_OutSetupPacket_int+0x88>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d90e      	bls.n	8002bd8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d009      	beq.n	8002bd8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bd6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f005 fad3 	bl	8008184 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4a0a      	ldr	r2, [pc, #40]	@ (8002c0c <PCD_EP_OutSetupPacket_int+0x88>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d90c      	bls.n	8002c00 <PCD_EP_OutSetupPacket_int+0x7c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	799b      	ldrb	r3, [r3, #6]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d108      	bne.n	8002c00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	f003 f86c 	bl	8005cd8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	4f54300a 	.word	0x4f54300a

08002c10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d107      	bne.n	8002c3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c2e:	883b      	ldrh	r3, [r7, #0]
 8002c30:	0419      	lsls	r1, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c3c:	e028      	b.n	8002c90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	4413      	add	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	e00d      	b.n	8002c6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	3340      	adds	r3, #64	@ 0x40
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	0c1b      	lsrs	r3, r3, #16
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	4413      	add	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d3ec      	bcc.n	8002c52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c78:	883b      	ldrh	r3, [r7, #0]
 8002c7a:	0418      	lsls	r0, r3, #16
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6819      	ldr	r1, [r3, #0]
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	4302      	orrs	r2, r0
 8002c88:	3340      	adds	r3, #64	@ 0x40
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	887a      	ldrh	r2, [r7, #2]
 8002cb0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e267      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d075      	beq.n	8002de2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cf6:	4b88      	ldr	r3, [pc, #544]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d00c      	beq.n	8002d1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d02:	4b85      	ldr	r3, [pc, #532]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d112      	bne.n	8002d34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d0e:	4b82      	ldr	r3, [pc, #520]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d1a:	d10b      	bne.n	8002d34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d05b      	beq.n	8002de0 <HAL_RCC_OscConfig+0x108>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d157      	bne.n	8002de0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e242      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d3c:	d106      	bne.n	8002d4c <HAL_RCC_OscConfig+0x74>
 8002d3e:	4b76      	ldr	r3, [pc, #472]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a75      	ldr	r2, [pc, #468]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e01d      	b.n	8002d88 <HAL_RCC_OscConfig+0xb0>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x98>
 8002d56:	4b70      	ldr	r3, [pc, #448]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a6f      	ldr	r2, [pc, #444]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	4b6d      	ldr	r3, [pc, #436]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a6c      	ldr	r2, [pc, #432]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e00b      	b.n	8002d88 <HAL_RCC_OscConfig+0xb0>
 8002d70:	4b69      	ldr	r3, [pc, #420]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a68      	ldr	r2, [pc, #416]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b66      	ldr	r3, [pc, #408]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a65      	ldr	r2, [pc, #404]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002d82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d013      	beq.n	8002db8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fe f9f8 	bl	8001184 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d98:	f7fe f9f4 	bl	8001184 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	@ 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e207      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	4b5b      	ldr	r3, [pc, #364]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0xc0>
 8002db6:	e014      	b.n	8002de2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fe f9e4 	bl	8001184 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7fe f9e0 	bl	8001184 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	@ 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e1f3      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd2:	4b51      	ldr	r3, [pc, #324]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0xe8>
 8002dde:	e000      	b.n	8002de2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d063      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dee:	4b4a      	ldr	r3, [pc, #296]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfa:	4b47      	ldr	r3, [pc, #284]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d11c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e06:	4b44      	ldr	r3, [pc, #272]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d116      	bne.n	8002e40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e12:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <HAL_RCC_OscConfig+0x152>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d001      	beq.n	8002e2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e1c7      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4937      	ldr	r1, [pc, #220]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3e:	e03a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d020      	beq.n	8002e8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e48:	4b34      	ldr	r3, [pc, #208]	@ (8002f1c <HAL_RCC_OscConfig+0x244>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4e:	f7fe f999 	bl	8001184 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e56:	f7fe f995 	bl	8001184 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e1a8      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e68:	4b2b      	ldr	r3, [pc, #172]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e74:	4b28      	ldr	r3, [pc, #160]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4925      	ldr	r1, [pc, #148]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]
 8002e88:	e015      	b.n	8002eb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8a:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <HAL_RCC_OscConfig+0x244>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe f978 	bl	8001184 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e98:	f7fe f974 	bl	8001184 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e187      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d036      	beq.n	8002f30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d016      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eca:	4b15      	ldr	r3, [pc, #84]	@ (8002f20 <HAL_RCC_OscConfig+0x248>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7fe f958 	bl	8001184 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed8:	f7fe f954 	bl	8001184 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e167      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eea:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <HAL_RCC_OscConfig+0x240>)
 8002eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x200>
 8002ef6:	e01b      	b.n	8002f30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef8:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <HAL_RCC_OscConfig+0x248>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efe:	f7fe f941 	bl	8001184 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f04:	e00e      	b.n	8002f24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f06:	f7fe f93d 	bl	8001184 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d907      	bls.n	8002f24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e150      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	42470000 	.word	0x42470000
 8002f20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f24:	4b88      	ldr	r3, [pc, #544]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1ea      	bne.n	8002f06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8097 	beq.w	800306c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f42:	4b81      	ldr	r3, [pc, #516]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10f      	bne.n	8002f6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	4b7d      	ldr	r3, [pc, #500]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	4a7c      	ldr	r2, [pc, #496]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6e:	4b77      	ldr	r3, [pc, #476]	@ (800314c <HAL_RCC_OscConfig+0x474>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d118      	bne.n	8002fac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7a:	4b74      	ldr	r3, [pc, #464]	@ (800314c <HAL_RCC_OscConfig+0x474>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a73      	ldr	r2, [pc, #460]	@ (800314c <HAL_RCC_OscConfig+0x474>)
 8002f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f86:	f7fe f8fd 	bl	8001184 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8e:	f7fe f8f9 	bl	8001184 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e10c      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800314c <HAL_RCC_OscConfig+0x474>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x2ea>
 8002fb4:	4b64      	ldr	r3, [pc, #400]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb8:	4a63      	ldr	r2, [pc, #396]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc0:	e01c      	b.n	8002ffc <HAL_RCC_OscConfig+0x324>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b05      	cmp	r3, #5
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x30c>
 8002fca:	4b5f      	ldr	r3, [pc, #380]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fce:	4a5e      	ldr	r2, [pc, #376]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	f043 0304 	orr.w	r3, r3, #4
 8002fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd6:	4b5c      	ldr	r3, [pc, #368]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fda:	4a5b      	ldr	r2, [pc, #364]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe2:	e00b      	b.n	8002ffc <HAL_RCC_OscConfig+0x324>
 8002fe4:	4b58      	ldr	r3, [pc, #352]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe8:	4a57      	ldr	r2, [pc, #348]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002fea:	f023 0301 	bic.w	r3, r3, #1
 8002fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff0:	4b55      	ldr	r3, [pc, #340]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff4:	4a54      	ldr	r2, [pc, #336]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8002ff6:	f023 0304 	bic.w	r3, r3, #4
 8002ffa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d015      	beq.n	8003030 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe f8be 	bl	8001184 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	e00a      	b.n	8003022 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7fe f8ba 	bl	8001184 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0cb      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003022:	4b49      	ldr	r3, [pc, #292]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0ee      	beq.n	800300c <HAL_RCC_OscConfig+0x334>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003030:	f7fe f8a8 	bl	8001184 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003036:	e00a      	b.n	800304e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003038:	f7fe f8a4 	bl	8001184 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e0b5      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304e:	4b3e      	ldr	r3, [pc, #248]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1ee      	bne.n	8003038 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800305a:	7dfb      	ldrb	r3, [r7, #23]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d105      	bne.n	800306c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003060:	4b39      	ldr	r3, [pc, #228]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	4a38      	ldr	r2, [pc, #224]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8003066:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800306a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80a1 	beq.w	80031b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003076:	4b34      	ldr	r3, [pc, #208]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b08      	cmp	r3, #8
 8003080:	d05c      	beq.n	800313c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d141      	bne.n	800310e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308a:	4b31      	ldr	r3, [pc, #196]	@ (8003150 <HAL_RCC_OscConfig+0x478>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003090:	f7fe f878 	bl	8001184 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003098:	f7fe f874 	bl	8001184 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e087      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030aa:	4b27      	ldr	r3, [pc, #156]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	019b      	lsls	r3, r3, #6
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	3b01      	subs	r3, #1
 80030d0:	041b      	lsls	r3, r3, #16
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	061b      	lsls	r3, r3, #24
 80030da:	491b      	ldr	r1, [pc, #108]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003150 <HAL_RCC_OscConfig+0x478>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fe f84d 	bl	8001184 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fe f849 	bl	8001184 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e05c      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003100:	4b11      	ldr	r3, [pc, #68]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x416>
 800310c:	e054      	b.n	80031b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b10      	ldr	r3, [pc, #64]	@ (8003150 <HAL_RCC_OscConfig+0x478>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe f836 	bl	8001184 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311c:	f7fe f832 	bl	8001184 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e045      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <HAL_RCC_OscConfig+0x470>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x444>
 800313a:	e03d      	b.n	80031b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d107      	bne.n	8003154 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e038      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
 8003148:	40023800 	.word	0x40023800
 800314c:	40007000 	.word	0x40007000
 8003150:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003154:	4b1b      	ldr	r3, [pc, #108]	@ (80031c4 <HAL_RCC_OscConfig+0x4ec>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d028      	beq.n	80031b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d121      	bne.n	80031b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d11a      	bne.n	80031b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800318a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800318c:	4293      	cmp	r3, r2
 800318e:	d111      	bne.n	80031b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319a:	085b      	lsrs	r3, r3, #1
 800319c:	3b01      	subs	r3, #1
 800319e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800

080031c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0cc      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b68      	ldr	r3, [pc, #416]	@ (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d90c      	bls.n	8003204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b65      	ldr	r3, [pc, #404]	@ (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f2:	4b63      	ldr	r3, [pc, #396]	@ (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0b8      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d020      	beq.n	8003252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800321c:	4b59      	ldr	r3, [pc, #356]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a58      	ldr	r2, [pc, #352]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003226:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003234:	4b53      	ldr	r3, [pc, #332]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a52      	ldr	r2, [pc, #328]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800323e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003240:	4b50      	ldr	r3, [pc, #320]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	494d      	ldr	r1, [pc, #308]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d044      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	4b47      	ldr	r3, [pc, #284]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d119      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e07f      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d003      	beq.n	8003286 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003282:	2b03      	cmp	r3, #3
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003286:	4b3f      	ldr	r3, [pc, #252]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e06f      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	4b3b      	ldr	r3, [pc, #236]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e067      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a6:	4b37      	ldr	r3, [pc, #220]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f023 0203 	bic.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4934      	ldr	r1, [pc, #208]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b8:	f7fd ff64 	bl	8001184 <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c0:	f7fd ff60 	bl	8001184 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e04f      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 020c 	and.w	r2, r3, #12
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d1eb      	bne.n	80032c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e8:	4b25      	ldr	r3, [pc, #148]	@ (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d20c      	bcs.n	8003310 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b22      	ldr	r3, [pc, #136]	@ (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b20      	ldr	r3, [pc, #128]	@ (8003380 <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e032      	b.n	8003376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800331c:	4b19      	ldr	r3, [pc, #100]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4916      	ldr	r1, [pc, #88]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800333a:	4b12      	ldr	r3, [pc, #72]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	490e      	ldr	r1, [pc, #56]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800334e:	f000 f821 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 8003352:	4602      	mov	r2, r0
 8003354:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	490a      	ldr	r1, [pc, #40]	@ (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 8003360:	5ccb      	ldrb	r3, [r1, r3]
 8003362:	fa22 f303 	lsr.w	r3, r2, r3
 8003366:	4a09      	ldr	r2, [pc, #36]	@ (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800336a:	4b09      	ldr	r3, [pc, #36]	@ (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd fec4 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40023c00 	.word	0x40023c00
 8003384:	40023800 	.word	0x40023800
 8003388:	080087c4 	.word	0x080087c4
 800338c:	20000000 	.word	0x20000000
 8003390:	20000004 	.word	0x20000004

08003394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003398:	b090      	sub	sp, #64	@ 0x40
 800339a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ac:	4b59      	ldr	r3, [pc, #356]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d00d      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x40>
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	f200 80a1 	bhi.w	8003500 <HAL_RCC_GetSysClockFreq+0x16c>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x34>
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d003      	beq.n	80033ce <HAL_RCC_GetSysClockFreq+0x3a>
 80033c6:	e09b      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c8:	4b53      	ldr	r3, [pc, #332]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x184>)
 80033ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033cc:	e09b      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ce:	4b53      	ldr	r3, [pc, #332]	@ (800351c <HAL_RCC_GetSysClockFreq+0x188>)
 80033d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033d2:	e098      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x180>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033de:	4b4d      	ldr	r3, [pc, #308]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x180>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d028      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	099b      	lsrs	r3, r3, #6
 80033f0:	2200      	movs	r2, #0
 80033f2:	623b      	str	r3, [r7, #32]
 80033f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033fc:	2100      	movs	r1, #0
 80033fe:	4b47      	ldr	r3, [pc, #284]	@ (800351c <HAL_RCC_GetSysClockFreq+0x188>)
 8003400:	fb03 f201 	mul.w	r2, r3, r1
 8003404:	2300      	movs	r3, #0
 8003406:	fb00 f303 	mul.w	r3, r0, r3
 800340a:	4413      	add	r3, r2
 800340c:	4a43      	ldr	r2, [pc, #268]	@ (800351c <HAL_RCC_GetSysClockFreq+0x188>)
 800340e:	fba0 1202 	umull	r1, r2, r0, r2
 8003412:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003414:	460a      	mov	r2, r1
 8003416:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800341a:	4413      	add	r3, r2
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800341e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003420:	2200      	movs	r2, #0
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	61fa      	str	r2, [r7, #28]
 8003426:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800342a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800342e:	f7fc fed3 	bl	80001d8 <__aeabi_uldivmod>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4613      	mov	r3, r2
 8003438:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800343a:	e053      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343c:	4b35      	ldr	r3, [pc, #212]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x180>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	099b      	lsrs	r3, r3, #6
 8003442:	2200      	movs	r2, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	617a      	str	r2, [r7, #20]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800344e:	f04f 0b00 	mov.w	fp, #0
 8003452:	4652      	mov	r2, sl
 8003454:	465b      	mov	r3, fp
 8003456:	f04f 0000 	mov.w	r0, #0
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	0159      	lsls	r1, r3, #5
 8003460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003464:	0150      	lsls	r0, r2, #5
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	ebb2 080a 	subs.w	r8, r2, sl
 800346e:	eb63 090b 	sbc.w	r9, r3, fp
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800347e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003482:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003486:	ebb2 0408 	subs.w	r4, r2, r8
 800348a:	eb63 0509 	sbc.w	r5, r3, r9
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	00eb      	lsls	r3, r5, #3
 8003498:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800349c:	00e2      	lsls	r2, r4, #3
 800349e:	4614      	mov	r4, r2
 80034a0:	461d      	mov	r5, r3
 80034a2:	eb14 030a 	adds.w	r3, r4, sl
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	eb45 030b 	adc.w	r3, r5, fp
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ba:	4629      	mov	r1, r5
 80034bc:	028b      	lsls	r3, r1, #10
 80034be:	4621      	mov	r1, r4
 80034c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c4:	4621      	mov	r1, r4
 80034c6:	028a      	lsls	r2, r1, #10
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ce:	2200      	movs	r2, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	60fa      	str	r2, [r7, #12]
 80034d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034d8:	f7fc fe7e 	bl	80001d8 <__aeabi_uldivmod>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4613      	mov	r3, r2
 80034e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x180>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	3301      	adds	r3, #1
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80034f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034fe:	e002      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003500:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x184>)
 8003502:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003508:	4618      	mov	r0, r3
 800350a:	3740      	adds	r7, #64	@ 0x40
 800350c:	46bd      	mov	sp, r7
 800350e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	00f42400 	.word	0x00f42400
 800351c:	017d7840 	.word	0x017d7840

08003520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003524:	4b03      	ldr	r3, [pc, #12]	@ (8003534 <HAL_RCC_GetHCLKFreq+0x14>)
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000000 	.word	0x20000000

08003538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800353c:	f7ff fff0 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b05      	ldr	r3, [pc, #20]	@ (8003558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	0a9b      	lsrs	r3, r3, #10
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4903      	ldr	r1, [pc, #12]	@ (800355c <HAL_RCC_GetPCLK1Freq+0x24>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40023800 	.word	0x40023800
 800355c:	080087d4 	.word	0x080087d4

08003560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003564:	f7ff ffdc 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	0b5b      	lsrs	r3, r3, #13
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	@ (8003584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	080087d4 	.word	0x080087d4

08003588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e042      	b.n	8003620 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fd fc7e 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	@ 0x24
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fe57 	bl	8004280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e04a      	b.n	80036d0 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fc2e 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	@ 0x24
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800366a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fe07 	bl	8004280 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8003690:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0208 	orr.w	r2, r2, #8
 80036a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	@ 0x28
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d175      	bne.n	80037e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_UART_Transmit+0x2c>
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e06e      	b.n	80037e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2221      	movs	r2, #33	@ 0x21
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003716:	f7fd fd35 	bl	8001184 <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	88fa      	ldrh	r2, [r7, #6]
 8003720:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	88fa      	ldrh	r2, [r7, #6]
 8003726:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003730:	d108      	bne.n	8003744 <HAL_UART_Transmit+0x6c>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d104      	bne.n	8003744 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	e003      	b.n	800374c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003748:	2300      	movs	r3, #0
 800374a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800374c:	e02e      	b.n	80037ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2200      	movs	r2, #0
 8003756:	2180      	movs	r1, #128	@ 0x80
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fb9b 	bl	8003e94 <UART_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e03a      	b.n	80037e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10b      	bne.n	800378e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003784:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	3302      	adds	r3, #2
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	e007      	b.n	800379e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	781a      	ldrb	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	3301      	adds	r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1cb      	bne.n	800374e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2200      	movs	r2, #0
 80037be:	2140      	movs	r1, #64	@ 0x40
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fb67 	bl	8003e94 <UART_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e006      	b.n	80037e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	e000      	b.n	80037e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
  }
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b08a      	sub	sp, #40	@ 0x28
 80037f2:	af02      	add	r7, sp, #8
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4613      	mov	r3, r2
 80037fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b20      	cmp	r3, #32
 800380c:	f040 8081 	bne.w	8003912 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_UART_Receive+0x2e>
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e079      	b.n	8003914 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2222      	movs	r2, #34	@ 0x22
 800382a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003834:	f7fd fca6 	bl	8001184 <HAL_GetTick>
 8003838:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800384e:	d108      	bne.n	8003862 <HAL_UART_Receive+0x74>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003858:	2300      	movs	r3, #0
 800385a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	e003      	b.n	800386a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800386a:	e047      	b.n	80038fc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2200      	movs	r2, #0
 8003874:	2120      	movs	r1, #32
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fb0c 	bl	8003e94 <UART_WaitOnFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e042      	b.n	8003914 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10c      	bne.n	80038ae <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	b29b      	uxth	r3, r3
 800389c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	3302      	adds	r3, #2
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	e01f      	b.n	80038ee <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b6:	d007      	beq.n	80038c8 <HAL_UART_Receive+0xda>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <HAL_UART_Receive+0xe8>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	e008      	b.n	80038e8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	3301      	adds	r3, #1
 80038ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1b2      	bne.n	800386c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
  }
}
 8003914:	4618      	mov	r0, r3
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b0ba      	sub	sp, #232	@ 0xe8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003942:	2300      	movs	r3, #0
 8003944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800394e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800395a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10f      	bne.n	8003982 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_UART_IRQHandler+0x66>
 800396e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fbc2 	bl	8004104 <UART_Receive_IT>
      return;
 8003980:	e25b      	b.n	8003e3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80de 	beq.w	8003b48 <HAL_UART_IRQHandler+0x22c>
 800398c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d106      	bne.n	80039a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800399c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80d1 	beq.w	8003b48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_UART_IRQHandler+0xae>
 80039b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	f043 0201 	orr.w	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_UART_IRQHandler+0xd2>
 80039d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	f043 0202 	orr.w	r2, r3, #2
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_UART_IRQHandler+0xf6>
 80039fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	f043 0204 	orr.w	r2, r3, #4
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d011      	beq.n	8003a42 <HAL_UART_IRQHandler+0x126>
 8003a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d105      	bne.n	8003a36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	f043 0208 	orr.w	r2, r3, #8
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 81f2 	beq.w	8003e30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_UART_IRQHandler+0x14e>
 8003a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fb4d 	bl	8004104 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a74:	2b40      	cmp	r3, #64	@ 0x40
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d103      	bne.n	8003a96 <HAL_UART_IRQHandler+0x17a>
 8003a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d04f      	beq.n	8003b36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fa55 	bl	8003f46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa6:	2b40      	cmp	r3, #64	@ 0x40
 8003aa8:	d141      	bne.n	8003b2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3314      	adds	r3, #20
 8003ab0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ab8:	e853 3f00 	ldrex	r3, [r3]
 8003abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3314      	adds	r3, #20
 8003ad2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ad6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ada:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ae2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1d9      	bne.n	8003aaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d013      	beq.n	8003b26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b02:	4a7e      	ldr	r2, [pc, #504]	@ (8003cfc <HAL_UART_IRQHandler+0x3e0>)
 8003b04:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd fceb 	bl	80014e6 <HAL_DMA_Abort_IT>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d016      	beq.n	8003b44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b20:	4610      	mov	r0, r2
 8003b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	e00e      	b.n	8003b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f99e 	bl	8003e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2c:	e00a      	b.n	8003b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f99a 	bl	8003e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	e006      	b.n	8003b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f996 	bl	8003e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b42:	e175      	b.n	8003e30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b44:	bf00      	nop
    return;
 8003b46:	e173      	b.n	8003e30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	f040 814f 	bne.w	8003df0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 8148 	beq.w	8003df0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8141 	beq.w	8003df0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8e:	2b40      	cmp	r3, #64	@ 0x40
 8003b90:	f040 80b6 	bne.w	8003d00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ba0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8145 	beq.w	8003e34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	f080 813e 	bcs.w	8003e34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bbe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bca:	f000 8088 	beq.w	8003cde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	330c      	adds	r3, #12
 8003bf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003bfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1d9      	bne.n	8003bce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3314      	adds	r3, #20
 8003c20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3314      	adds	r3, #20
 8003c3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e1      	bne.n	8003c1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3314      	adds	r3, #20
 8003c5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3314      	adds	r3, #20
 8003c76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e3      	bne.n	8003c56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cae:	f023 0310 	bic.w	r3, r3, #16
 8003cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003cc0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cc2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e3      	bne.n	8003c9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fd fb94 	bl	8001406 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f8c1 	bl	8003e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cfa:	e09b      	b.n	8003e34 <HAL_UART_IRQHandler+0x518>
 8003cfc:	0800400d 	.word	0x0800400d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 808e 	beq.w	8003e38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8089 	beq.w	8003e38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	330c      	adds	r3, #12
 8003d46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e3      	bne.n	8003d26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3314      	adds	r3, #20
 8003d64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3314      	adds	r3, #20
 8003d7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d82:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e3      	bne.n	8003d5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	e853 3f00 	ldrex	r3, [r3]
 8003db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0310 	bic.w	r3, r3, #16
 8003dba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	330c      	adds	r3, #12
 8003dc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003dc8:	61fa      	str	r2, [r7, #28]
 8003dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	69b9      	ldr	r1, [r7, #24]
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e3      	bne.n	8003da4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003de2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f847 	bl	8003e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dee:	e023      	b.n	8003e38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d009      	beq.n	8003e10 <HAL_UART_IRQHandler+0x4f4>
 8003dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f913 	bl	8004034 <UART_Transmit_IT>
    return;
 8003e0e:	e014      	b.n	8003e3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00e      	beq.n	8003e3a <HAL_UART_IRQHandler+0x51e>
 8003e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f953 	bl	80040d4 <UART_EndTransmit_IT>
    return;
 8003e2e:	e004      	b.n	8003e3a <HAL_UART_IRQHandler+0x51e>
    return;
 8003e30:	bf00      	nop
 8003e32:	e002      	b.n	8003e3a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e34:	bf00      	nop
 8003e36:	e000      	b.n	8003e3a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e38:	bf00      	nop
  }
}
 8003e3a:	37e8      	adds	r7, #232	@ 0xe8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea4:	e03b      	b.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d037      	beq.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eae:	f7fd f969 	bl	8001184 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	6a3a      	ldr	r2, [r7, #32]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e03a      	b.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d023      	beq.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b80      	cmp	r3, #128	@ 0x80
 8003eda:	d020      	beq.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b40      	cmp	r3, #64	@ 0x40
 8003ee0:	d01d      	beq.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d116      	bne.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f81d 	bl	8003f46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2208      	movs	r2, #8
 8003f10:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e00f      	b.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4013      	ands	r3, r2
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	bf0c      	ite	eq
 8003f2e:	2301      	moveq	r3, #1
 8003f30:	2300      	movne	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d0b4      	beq.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b095      	sub	sp, #84	@ 0x54
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	330c      	adds	r3, #12
 8003f54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	330c      	adds	r3, #12
 8003f6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f6e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e5      	bne.n	8003f4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3314      	adds	r3, #20
 8003f88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3314      	adds	r3, #20
 8003fa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e5      	bne.n	8003f82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d119      	bne.n	8003ff2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f023 0310 	bic.w	r3, r3, #16
 8003fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	330c      	adds	r3, #12
 8003fdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fde:	61ba      	str	r2, [r7, #24]
 8003fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	6979      	ldr	r1, [r7, #20]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	613b      	str	r3, [r7, #16]
   return(result);
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e5      	bne.n	8003fbe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004000:	bf00      	nop
 8004002:	3754      	adds	r7, #84	@ 0x54
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f7ff ff1e 	bl	8003e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b21      	cmp	r3, #33	@ 0x21
 8004046:	d13e      	bne.n	80040c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004050:	d114      	bne.n	800407c <UART_Transmit_IT+0x48>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d110      	bne.n	800407c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800406e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	1c9a      	adds	r2, r3, #2
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	621a      	str	r2, [r3, #32]
 800407a:	e008      	b.n	800408e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	1c59      	adds	r1, r3, #1
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6211      	str	r1, [r2, #32]
 8004086:	781a      	ldrb	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29b      	uxth	r3, r3
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	4619      	mov	r1, r3
 800409c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10f      	bne.n	80040c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	e000      	b.n	80040c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040c6:	2302      	movs	r3, #2
  }
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fea3 	bl	8003e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08c      	sub	sp, #48	@ 0x30
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b22      	cmp	r3, #34	@ 0x22
 8004116:	f040 80ae 	bne.w	8004276 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004122:	d117      	bne.n	8004154 <UART_Receive_IT+0x50>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d113      	bne.n	8004154 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800412c:	2300      	movs	r3, #0
 800412e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004134:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	b29b      	uxth	r3, r3
 800413e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004142:	b29a      	uxth	r2, r3
 8004144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004146:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414c:	1c9a      	adds	r2, r3, #2
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	629a      	str	r2, [r3, #40]	@ 0x28
 8004152:	e026      	b.n	80041a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004166:	d007      	beq.n	8004178 <UART_Receive_IT+0x74>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <UART_Receive_IT+0x82>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d106      	bne.n	8004186 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	e008      	b.n	8004198 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004192:	b2da      	uxtb	r2, r3
 8004194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004196:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4619      	mov	r1, r3
 80041b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d15d      	bne.n	8004272 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0220 	bic.w	r2, r2, #32
 80041c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0201 	bic.w	r2, r2, #1
 80041e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d135      	bne.n	8004268 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	613b      	str	r3, [r7, #16]
   return(result);
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f023 0310 	bic.w	r3, r3, #16
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004222:	623a      	str	r2, [r7, #32]
 8004224:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	69f9      	ldr	r1, [r7, #28]
 8004228:	6a3a      	ldr	r2, [r7, #32]
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e5      	bne.n	8004202 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b10      	cmp	r3, #16
 8004242:	d10a      	bne.n	800425a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800425e:	4619      	mov	r1, r3
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff fe0b 	bl	8003e7c <HAL_UARTEx_RxEventCallback>
 8004266:	e002      	b.n	800426e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff fdf3 	bl	8003e54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	e002      	b.n	8004278 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e000      	b.n	8004278 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004276:	2302      	movs	r3, #2
  }
}
 8004278:	4618      	mov	r0, r3
 800427a:	3730      	adds	r7, #48	@ 0x30
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004284:	b0c0      	sub	sp, #256	@ 0x100
 8004286:	af00      	add	r7, sp, #0
 8004288:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	68d9      	ldr	r1, [r3, #12]
 800429e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	ea40 0301 	orr.w	r3, r0, r1
 80042a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	431a      	orrs	r2, r3
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042d8:	f021 010c 	bic.w	r1, r1, #12
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042e6:	430b      	orrs	r3, r1
 80042e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fa:	6999      	ldr	r1, [r3, #24]
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	ea40 0301 	orr.w	r3, r0, r1
 8004306:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b8f      	ldr	r3, [pc, #572]	@ (800454c <UART_SetConfig+0x2cc>)
 8004310:	429a      	cmp	r2, r3
 8004312:	d005      	beq.n	8004320 <UART_SetConfig+0xa0>
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b8d      	ldr	r3, [pc, #564]	@ (8004550 <UART_SetConfig+0x2d0>)
 800431c:	429a      	cmp	r2, r3
 800431e:	d104      	bne.n	800432a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004320:	f7ff f91e 	bl	8003560 <HAL_RCC_GetPCLK2Freq>
 8004324:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004328:	e003      	b.n	8004332 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800432a:	f7ff f905 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 800432e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800433c:	f040 810c 	bne.w	8004558 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004344:	2200      	movs	r2, #0
 8004346:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800434a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800434e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004352:	4622      	mov	r2, r4
 8004354:	462b      	mov	r3, r5
 8004356:	1891      	adds	r1, r2, r2
 8004358:	65b9      	str	r1, [r7, #88]	@ 0x58
 800435a:	415b      	adcs	r3, r3
 800435c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800435e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004362:	4621      	mov	r1, r4
 8004364:	eb12 0801 	adds.w	r8, r2, r1
 8004368:	4629      	mov	r1, r5
 800436a:	eb43 0901 	adc.w	r9, r3, r1
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800437a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800437e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004382:	4690      	mov	r8, r2
 8004384:	4699      	mov	r9, r3
 8004386:	4623      	mov	r3, r4
 8004388:	eb18 0303 	adds.w	r3, r8, r3
 800438c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004390:	462b      	mov	r3, r5
 8004392:	eb49 0303 	adc.w	r3, r9, r3
 8004396:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800439a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043ae:	460b      	mov	r3, r1
 80043b0:	18db      	adds	r3, r3, r3
 80043b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80043b4:	4613      	mov	r3, r2
 80043b6:	eb42 0303 	adc.w	r3, r2, r3
 80043ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80043bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043c4:	f7fb ff08 	bl	80001d8 <__aeabi_uldivmod>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4b61      	ldr	r3, [pc, #388]	@ (8004554 <UART_SetConfig+0x2d4>)
 80043ce:	fba3 2302 	umull	r2, r3, r3, r2
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	011c      	lsls	r4, r3, #4
 80043d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043e8:	4642      	mov	r2, r8
 80043ea:	464b      	mov	r3, r9
 80043ec:	1891      	adds	r1, r2, r2
 80043ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043f0:	415b      	adcs	r3, r3
 80043f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043f8:	4641      	mov	r1, r8
 80043fa:	eb12 0a01 	adds.w	sl, r2, r1
 80043fe:	4649      	mov	r1, r9
 8004400:	eb43 0b01 	adc.w	fp, r3, r1
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004410:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004414:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004418:	4692      	mov	sl, r2
 800441a:	469b      	mov	fp, r3
 800441c:	4643      	mov	r3, r8
 800441e:	eb1a 0303 	adds.w	r3, sl, r3
 8004422:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004426:	464b      	mov	r3, r9
 8004428:	eb4b 0303 	adc.w	r3, fp, r3
 800442c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800443c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004440:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004444:	460b      	mov	r3, r1
 8004446:	18db      	adds	r3, r3, r3
 8004448:	643b      	str	r3, [r7, #64]	@ 0x40
 800444a:	4613      	mov	r3, r2
 800444c:	eb42 0303 	adc.w	r3, r2, r3
 8004450:	647b      	str	r3, [r7, #68]	@ 0x44
 8004452:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004456:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800445a:	f7fb febd 	bl	80001d8 <__aeabi_uldivmod>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4611      	mov	r1, r2
 8004464:	4b3b      	ldr	r3, [pc, #236]	@ (8004554 <UART_SetConfig+0x2d4>)
 8004466:	fba3 2301 	umull	r2, r3, r3, r1
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	2264      	movs	r2, #100	@ 0x64
 800446e:	fb02 f303 	mul.w	r3, r2, r3
 8004472:	1acb      	subs	r3, r1, r3
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800447a:	4b36      	ldr	r3, [pc, #216]	@ (8004554 <UART_SetConfig+0x2d4>)
 800447c:	fba3 2302 	umull	r2, r3, r3, r2
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004488:	441c      	add	r4, r3
 800448a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800448e:	2200      	movs	r2, #0
 8004490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004494:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004498:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800449c:	4642      	mov	r2, r8
 800449e:	464b      	mov	r3, r9
 80044a0:	1891      	adds	r1, r2, r2
 80044a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044a4:	415b      	adcs	r3, r3
 80044a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044ac:	4641      	mov	r1, r8
 80044ae:	1851      	adds	r1, r2, r1
 80044b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80044b2:	4649      	mov	r1, r9
 80044b4:	414b      	adcs	r3, r1
 80044b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044c4:	4659      	mov	r1, fp
 80044c6:	00cb      	lsls	r3, r1, #3
 80044c8:	4651      	mov	r1, sl
 80044ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ce:	4651      	mov	r1, sl
 80044d0:	00ca      	lsls	r2, r1, #3
 80044d2:	4610      	mov	r0, r2
 80044d4:	4619      	mov	r1, r3
 80044d6:	4603      	mov	r3, r0
 80044d8:	4642      	mov	r2, r8
 80044da:	189b      	adds	r3, r3, r2
 80044dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044e0:	464b      	mov	r3, r9
 80044e2:	460a      	mov	r2, r1
 80044e4:	eb42 0303 	adc.w	r3, r2, r3
 80044e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004500:	460b      	mov	r3, r1
 8004502:	18db      	adds	r3, r3, r3
 8004504:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004506:	4613      	mov	r3, r2
 8004508:	eb42 0303 	adc.w	r3, r2, r3
 800450c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800450e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004512:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004516:	f7fb fe5f 	bl	80001d8 <__aeabi_uldivmod>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4b0d      	ldr	r3, [pc, #52]	@ (8004554 <UART_SetConfig+0x2d4>)
 8004520:	fba3 1302 	umull	r1, r3, r3, r2
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	2164      	movs	r1, #100	@ 0x64
 8004528:	fb01 f303 	mul.w	r3, r1, r3
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	3332      	adds	r3, #50	@ 0x32
 8004532:	4a08      	ldr	r2, [pc, #32]	@ (8004554 <UART_SetConfig+0x2d4>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	f003 0207 	and.w	r2, r3, #7
 800453e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4422      	add	r2, r4
 8004546:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004548:	e106      	b.n	8004758 <UART_SetConfig+0x4d8>
 800454a:	bf00      	nop
 800454c:	40011000 	.word	0x40011000
 8004550:	40011400 	.word	0x40011400
 8004554:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800455c:	2200      	movs	r2, #0
 800455e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004562:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004566:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800456a:	4642      	mov	r2, r8
 800456c:	464b      	mov	r3, r9
 800456e:	1891      	adds	r1, r2, r2
 8004570:	6239      	str	r1, [r7, #32]
 8004572:	415b      	adcs	r3, r3
 8004574:	627b      	str	r3, [r7, #36]	@ 0x24
 8004576:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800457a:	4641      	mov	r1, r8
 800457c:	1854      	adds	r4, r2, r1
 800457e:	4649      	mov	r1, r9
 8004580:	eb43 0501 	adc.w	r5, r3, r1
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	00eb      	lsls	r3, r5, #3
 800458e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004592:	00e2      	lsls	r2, r4, #3
 8004594:	4614      	mov	r4, r2
 8004596:	461d      	mov	r5, r3
 8004598:	4643      	mov	r3, r8
 800459a:	18e3      	adds	r3, r4, r3
 800459c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045a0:	464b      	mov	r3, r9
 80045a2:	eb45 0303 	adc.w	r3, r5, r3
 80045a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045c6:	4629      	mov	r1, r5
 80045c8:	008b      	lsls	r3, r1, #2
 80045ca:	4621      	mov	r1, r4
 80045cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045d0:	4621      	mov	r1, r4
 80045d2:	008a      	lsls	r2, r1, #2
 80045d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045d8:	f7fb fdfe 	bl	80001d8 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4b60      	ldr	r3, [pc, #384]	@ (8004764 <UART_SetConfig+0x4e4>)
 80045e2:	fba3 2302 	umull	r2, r3, r3, r2
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	011c      	lsls	r4, r3, #4
 80045ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045fc:	4642      	mov	r2, r8
 80045fe:	464b      	mov	r3, r9
 8004600:	1891      	adds	r1, r2, r2
 8004602:	61b9      	str	r1, [r7, #24]
 8004604:	415b      	adcs	r3, r3
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800460c:	4641      	mov	r1, r8
 800460e:	1851      	adds	r1, r2, r1
 8004610:	6139      	str	r1, [r7, #16]
 8004612:	4649      	mov	r1, r9
 8004614:	414b      	adcs	r3, r1
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004624:	4659      	mov	r1, fp
 8004626:	00cb      	lsls	r3, r1, #3
 8004628:	4651      	mov	r1, sl
 800462a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800462e:	4651      	mov	r1, sl
 8004630:	00ca      	lsls	r2, r1, #3
 8004632:	4610      	mov	r0, r2
 8004634:	4619      	mov	r1, r3
 8004636:	4603      	mov	r3, r0
 8004638:	4642      	mov	r2, r8
 800463a:	189b      	adds	r3, r3, r2
 800463c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004640:	464b      	mov	r3, r9
 8004642:	460a      	mov	r2, r1
 8004644:	eb42 0303 	adc.w	r3, r2, r3
 8004648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800464c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004656:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004664:	4649      	mov	r1, r9
 8004666:	008b      	lsls	r3, r1, #2
 8004668:	4641      	mov	r1, r8
 800466a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800466e:	4641      	mov	r1, r8
 8004670:	008a      	lsls	r2, r1, #2
 8004672:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004676:	f7fb fdaf 	bl	80001d8 <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4611      	mov	r1, r2
 8004680:	4b38      	ldr	r3, [pc, #224]	@ (8004764 <UART_SetConfig+0x4e4>)
 8004682:	fba3 2301 	umull	r2, r3, r3, r1
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2264      	movs	r2, #100	@ 0x64
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	1acb      	subs	r3, r1, r3
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	3332      	adds	r3, #50	@ 0x32
 8004694:	4a33      	ldr	r2, [pc, #204]	@ (8004764 <UART_SetConfig+0x4e4>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046a0:	441c      	add	r4, r3
 80046a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046a6:	2200      	movs	r2, #0
 80046a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80046aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80046ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046b0:	4642      	mov	r2, r8
 80046b2:	464b      	mov	r3, r9
 80046b4:	1891      	adds	r1, r2, r2
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	415b      	adcs	r3, r3
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046c0:	4641      	mov	r1, r8
 80046c2:	1851      	adds	r1, r2, r1
 80046c4:	6039      	str	r1, [r7, #0]
 80046c6:	4649      	mov	r1, r9
 80046c8:	414b      	adcs	r3, r1
 80046ca:	607b      	str	r3, [r7, #4]
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046d8:	4659      	mov	r1, fp
 80046da:	00cb      	lsls	r3, r1, #3
 80046dc:	4651      	mov	r1, sl
 80046de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e2:	4651      	mov	r1, sl
 80046e4:	00ca      	lsls	r2, r1, #3
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	4642      	mov	r2, r8
 80046ee:	189b      	adds	r3, r3, r2
 80046f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046f2:	464b      	mov	r3, r9
 80046f4:	460a      	mov	r2, r1
 80046f6:	eb42 0303 	adc.w	r3, r2, r3
 80046fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	663b      	str	r3, [r7, #96]	@ 0x60
 8004706:	667a      	str	r2, [r7, #100]	@ 0x64
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004714:	4649      	mov	r1, r9
 8004716:	008b      	lsls	r3, r1, #2
 8004718:	4641      	mov	r1, r8
 800471a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800471e:	4641      	mov	r1, r8
 8004720:	008a      	lsls	r2, r1, #2
 8004722:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004726:	f7fb fd57 	bl	80001d8 <__aeabi_uldivmod>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4b0d      	ldr	r3, [pc, #52]	@ (8004764 <UART_SetConfig+0x4e4>)
 8004730:	fba3 1302 	umull	r1, r3, r3, r2
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	2164      	movs	r1, #100	@ 0x64
 8004738:	fb01 f303 	mul.w	r3, r1, r3
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	3332      	adds	r3, #50	@ 0x32
 8004742:	4a08      	ldr	r2, [pc, #32]	@ (8004764 <UART_SetConfig+0x4e4>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	f003 020f 	and.w	r2, r3, #15
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4422      	add	r2, r4
 8004756:	609a      	str	r2, [r3, #8]
}
 8004758:	bf00      	nop
 800475a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800475e:	46bd      	mov	sp, r7
 8004760:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004764:	51eb851f 	.word	0x51eb851f

08004768 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004768:	b084      	sub	sp, #16
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	f107 001c 	add.w	r0, r7, #28
 8004776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800477a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800477e:	2b01      	cmp	r3, #1
 8004780:	d123      	bne.n	80047ca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004786:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004796:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d105      	bne.n	80047be <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f001 fae8 	bl	8005d94 <USB_CoreReset>
 80047c4:	4603      	mov	r3, r0
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	e01b      	b.n	8004802 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f001 fadc 	bl	8005d94 <USB_CoreReset>
 80047dc:	4603      	mov	r3, r0
 80047de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80047f4:	e005      	b.n	8004802 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004802:	7fbb      	ldrb	r3, [r7, #30]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d10b      	bne.n	8004820 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f043 0206 	orr.w	r2, r3, #6
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f043 0220 	orr.w	r2, r3, #32
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800482c:	b004      	add	sp, #16
 800482e:	4770      	bx	lr

08004830 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	4613      	mov	r3, r2
 800483c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d165      	bne.n	8004910 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4a41      	ldr	r2, [pc, #260]	@ (800494c <USB_SetTurnaroundTime+0x11c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d906      	bls.n	800485a <USB_SetTurnaroundTime+0x2a>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4a40      	ldr	r2, [pc, #256]	@ (8004950 <USB_SetTurnaroundTime+0x120>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d202      	bcs.n	800485a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004854:	230f      	movs	r3, #15
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	e062      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	4a3c      	ldr	r2, [pc, #240]	@ (8004950 <USB_SetTurnaroundTime+0x120>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d306      	bcc.n	8004870 <USB_SetTurnaroundTime+0x40>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4a3b      	ldr	r2, [pc, #236]	@ (8004954 <USB_SetTurnaroundTime+0x124>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d202      	bcs.n	8004870 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800486a:	230e      	movs	r3, #14
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	e057      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4a38      	ldr	r2, [pc, #224]	@ (8004954 <USB_SetTurnaroundTime+0x124>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d306      	bcc.n	8004886 <USB_SetTurnaroundTime+0x56>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4a37      	ldr	r2, [pc, #220]	@ (8004958 <USB_SetTurnaroundTime+0x128>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d202      	bcs.n	8004886 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004880:	230d      	movs	r3, #13
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e04c      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	4a33      	ldr	r2, [pc, #204]	@ (8004958 <USB_SetTurnaroundTime+0x128>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d306      	bcc.n	800489c <USB_SetTurnaroundTime+0x6c>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4a32      	ldr	r2, [pc, #200]	@ (800495c <USB_SetTurnaroundTime+0x12c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d802      	bhi.n	800489c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004896:	230c      	movs	r3, #12
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	e041      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4a2f      	ldr	r2, [pc, #188]	@ (800495c <USB_SetTurnaroundTime+0x12c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d906      	bls.n	80048b2 <USB_SetTurnaroundTime+0x82>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004960 <USB_SetTurnaroundTime+0x130>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d802      	bhi.n	80048b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048ac:	230b      	movs	r3, #11
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	e036      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004960 <USB_SetTurnaroundTime+0x130>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d906      	bls.n	80048c8 <USB_SetTurnaroundTime+0x98>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4a29      	ldr	r2, [pc, #164]	@ (8004964 <USB_SetTurnaroundTime+0x134>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d802      	bhi.n	80048c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80048c2:	230a      	movs	r3, #10
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	e02b      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4a26      	ldr	r2, [pc, #152]	@ (8004964 <USB_SetTurnaroundTime+0x134>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d906      	bls.n	80048de <USB_SetTurnaroundTime+0xae>
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4a25      	ldr	r2, [pc, #148]	@ (8004968 <USB_SetTurnaroundTime+0x138>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d202      	bcs.n	80048de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80048d8:	2309      	movs	r3, #9
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	e020      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4a21      	ldr	r2, [pc, #132]	@ (8004968 <USB_SetTurnaroundTime+0x138>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d306      	bcc.n	80048f4 <USB_SetTurnaroundTime+0xc4>
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4a20      	ldr	r2, [pc, #128]	@ (800496c <USB_SetTurnaroundTime+0x13c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d802      	bhi.n	80048f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80048ee:	2308      	movs	r3, #8
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	e015      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4a1d      	ldr	r2, [pc, #116]	@ (800496c <USB_SetTurnaroundTime+0x13c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d906      	bls.n	800490a <USB_SetTurnaroundTime+0xda>
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004970 <USB_SetTurnaroundTime+0x140>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d202      	bcs.n	800490a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004904:	2307      	movs	r3, #7
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	e00a      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800490a:	2306      	movs	r3, #6
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e007      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004916:	2309      	movs	r3, #9
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	e001      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800491c:	2309      	movs	r3, #9
 800491e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	029b      	lsls	r3, r3, #10
 8004934:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004938:	431a      	orrs	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	00d8acbf 	.word	0x00d8acbf
 8004950:	00e4e1c0 	.word	0x00e4e1c0
 8004954:	00f42400 	.word	0x00f42400
 8004958:	01067380 	.word	0x01067380
 800495c:	011a499f 	.word	0x011a499f
 8004960:	01312cff 	.word	0x01312cff
 8004964:	014ca43f 	.word	0x014ca43f
 8004968:	016e3600 	.word	0x016e3600
 800496c:	01a6ab1f 	.word	0x01a6ab1f
 8004970:	01e84800 	.word	0x01e84800

08004974 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f043 0201 	orr.w	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f023 0201 	bic.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d115      	bne.n	8004a06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049e6:	200a      	movs	r0, #10
 80049e8:	f7fc fbd8 	bl	800119c <HAL_Delay>
      ms += 10U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	330a      	adds	r3, #10
 80049f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f001 f93f 	bl	8005c76 <USB_GetMode>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d01e      	beq.n	8004a3c <USB_SetCurrentMode+0x84>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a02:	d9f0      	bls.n	80049e6 <USB_SetCurrentMode+0x2e>
 8004a04:	e01a      	b.n	8004a3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d115      	bne.n	8004a38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a18:	200a      	movs	r0, #10
 8004a1a:	f7fc fbbf 	bl	800119c <HAL_Delay>
      ms += 10U;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	330a      	adds	r3, #10
 8004a22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f001 f926 	bl	8005c76 <USB_GetMode>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <USB_SetCurrentMode+0x84>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a34:	d9f0      	bls.n	8004a18 <USB_SetCurrentMode+0x60>
 8004a36:	e001      	b.n	8004a3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e005      	b.n	8004a48 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004a40:	d101      	bne.n	8004a46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a50:	b084      	sub	sp, #16
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b086      	sub	sp, #24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	e009      	b.n	8004a84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	3340      	adds	r3, #64	@ 0x40
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	3301      	adds	r3, #1
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b0e      	cmp	r3, #14
 8004a88:	d9f2      	bls.n	8004a70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11c      	bne.n	8004acc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aa0:	f043 0302 	orr.w	r3, r3, #2
 8004aa4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aaa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	639a      	str	r2, [r3, #56]	@ 0x38
 8004aca:	e00b      	b.n	8004ae4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004aea:	461a      	mov	r2, r3
 8004aec:	2300      	movs	r3, #0
 8004aee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004af0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d10d      	bne.n	8004b14 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d104      	bne.n	8004b0a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b00:	2100      	movs	r1, #0
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f968 	bl	8004dd8 <USB_SetDevSpeed>
 8004b08:	e008      	b.n	8004b1c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f963 	bl	8004dd8 <USB_SetDevSpeed>
 8004b12:	e003      	b.n	8004b1c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b14:	2103      	movs	r1, #3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f95e 	bl	8004dd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b1c:	2110      	movs	r1, #16
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8fa 	bl	8004d18 <USB_FlushTxFifo>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f924 	bl	8004d7c <USB_FlushRxFifo>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b44:	461a      	mov	r2, r3
 8004b46:	2300      	movs	r3, #0
 8004b48:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	e043      	b.n	8004bf0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b7e:	d118      	bne.n	8004bb2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b92:	461a      	mov	r2, r3
 8004b94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e013      	b.n	8004bc4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	e008      	b.n	8004bc4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be2:	461a      	mov	r2, r3
 8004be4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004be8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3301      	adds	r3, #1
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d3b5      	bcc.n	8004b68 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	e043      	b.n	8004c8a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c18:	d118      	bne.n	8004c4c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	e013      	b.n	8004c5e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c42:	461a      	mov	r2, r3
 8004c44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	e008      	b.n	8004c5e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c58:	461a      	mov	r2, r3
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	3301      	adds	r3, #1
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c8e:	461a      	mov	r2, r3
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d3b5      	bcc.n	8004c02 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ca8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004cb6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f043 0210 	orr.w	r2, r3, #16
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699a      	ldr	r2, [r3, #24]
 8004cd0:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <USB_DevInit+0x2c4>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cd8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f043 0208 	orr.w	r2, r3, #8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d107      	bne.n	8004d04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cfc:	f043 0304 	orr.w	r3, r3, #4
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d10:	b004      	add	sp, #16
 8004d12:	4770      	bx	lr
 8004d14:	803c3800 	.word	0x803c3800

08004d18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d32:	d901      	bls.n	8004d38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e01b      	b.n	8004d70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	daf2      	bge.n	8004d26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	019b      	lsls	r3, r3, #6
 8004d48:	f043 0220 	orr.w	r2, r3, #32
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3301      	adds	r3, #1
 8004d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d5c:	d901      	bls.n	8004d62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e006      	b.n	8004d70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d0f0      	beq.n	8004d50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d94:	d901      	bls.n	8004d9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e018      	b.n	8004dcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	daf2      	bge.n	8004d88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2210      	movs	r2, #16
 8004daa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004db8:	d901      	bls.n	8004dbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e006      	b.n	8004dcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	2b10      	cmp	r3, #16
 8004dc8:	d0f0      	beq.n	8004dac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	68f9      	ldr	r1, [r7, #12]
 8004df4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b087      	sub	sp, #28
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 0306 	and.w	r3, r3, #6
 8004e22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d102      	bne.n	8004e30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]
 8004e2e:	e00a      	b.n	8004e46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d002      	beq.n	8004e3c <USB_GetDevSpeed+0x32>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b06      	cmp	r3, #6
 8004e3a:	d102      	bne.n	8004e42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	75fb      	strb	r3, [r7, #23]
 8004e40:	e001      	b.n	8004e46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e42:	230f      	movs	r3, #15
 8004e44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d13a      	bne.n	8004ee6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	2101      	movs	r1, #1
 8004e82:	fa01 f303 	lsl.w	r3, r1, r3
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	68f9      	ldr	r1, [r7, #12]
 8004e8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d155      	bne.n	8004f54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	791b      	ldrb	r3, [r3, #4]
 8004ec2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ec4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	059b      	lsls	r3, r3, #22
 8004eca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	e036      	b.n	8004f54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eec:	69da      	ldr	r2, [r3, #28]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	68f9      	ldr	r1, [r7, #12]
 8004f00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f04:	4313      	orrs	r3, r2
 8004f06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d11a      	bne.n	8004f54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	791b      	ldrb	r3, [r3, #4]
 8004f38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	785b      	ldrb	r3, [r3, #1]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d161      	bne.n	8005044 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f96:	d11f      	bne.n	8004fd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fb2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004fb6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	0151      	lsls	r1, r2, #5
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	440a      	add	r2, r1
 8004fce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	2101      	movs	r1, #1
 8004fea:	fa01 f303 	lsl.w	r3, r1, r3
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	68f9      	ldr	r1, [r7, #12]
 8004ff4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	2101      	movs	r1, #1
 800500e:	fa01 f303 	lsl.w	r3, r1, r3
 8005012:	b29b      	uxth	r3, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	68f9      	ldr	r1, [r7, #12]
 8005018:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800501c:	4013      	ands	r3, r2
 800501e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	0159      	lsls	r1, r3, #5
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	440b      	add	r3, r1
 8005036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800503a:	4619      	mov	r1, r3
 800503c:	4b35      	ldr	r3, [pc, #212]	@ (8005114 <USB_DeactivateEndpoint+0x1b0>)
 800503e:	4013      	ands	r3, r2
 8005040:	600b      	str	r3, [r1, #0]
 8005042:	e060      	b.n	8005106 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005056:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800505a:	d11f      	bne.n	800509c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	440a      	add	r2, r1
 8005072:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005076:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800507a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005096:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800509a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	2101      	movs	r1, #1
 80050ae:	fa01 f303 	lsl.w	r3, r1, r3
 80050b2:	041b      	lsls	r3, r3, #16
 80050b4:	43db      	mvns	r3, r3
 80050b6:	68f9      	ldr	r1, [r7, #12]
 80050b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050bc:	4013      	ands	r3, r2
 80050be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	2101      	movs	r1, #1
 80050d2:	fa01 f303 	lsl.w	r3, r1, r3
 80050d6:	041b      	lsls	r3, r3, #16
 80050d8:	43db      	mvns	r3, r3
 80050da:	68f9      	ldr	r1, [r7, #12]
 80050dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050e0:	4013      	ands	r3, r2
 80050e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	0159      	lsls	r1, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	440b      	add	r3, r1
 80050fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fe:	4619      	mov	r1, r3
 8005100:	4b05      	ldr	r3, [pc, #20]	@ (8005118 <USB_DeactivateEndpoint+0x1b4>)
 8005102:	4013      	ands	r3, r2
 8005104:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	ec337800 	.word	0xec337800
 8005118:	eff37800 	.word	0xeff37800

0800511c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	@ 0x28
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	4613      	mov	r3, r2
 8005128:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	2b01      	cmp	r3, #1
 800513a:	f040 817f 	bne.w	800543c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d132      	bne.n	80051ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	0151      	lsls	r1, r2, #5
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	440a      	add	r2, r1
 800515c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005160:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005164:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005168:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005184:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005188:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	0151      	lsls	r1, r2, #5
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	440a      	add	r2, r1
 80051a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051a4:	0cdb      	lsrs	r3, r3, #19
 80051a6:	04db      	lsls	r3, r3, #19
 80051a8:	6113      	str	r3, [r2, #16]
 80051aa:	e097      	b.n	80052dc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	0151      	lsls	r1, r2, #5
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	440a      	add	r2, r1
 80051c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051c6:	0cdb      	lsrs	r3, r3, #19
 80051c8:	04db      	lsls	r3, r3, #19
 80051ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	0151      	lsls	r1, r2, #5
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	440a      	add	r2, r1
 80051e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051e6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80051ea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80051ee:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d11a      	bne.n	800522c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d903      	bls.n	800520a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	440a      	add	r2, r1
 8005220:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005224:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005228:	6113      	str	r3, [r2, #16]
 800522a:	e044      	b.n	80052b6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	4413      	add	r3, r2
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005240:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	8afb      	ldrh	r3, [r7, #22]
 8005252:	04d9      	lsls	r1, r3, #19
 8005254:	4ba4      	ldr	r3, [pc, #656]	@ (80054e8 <USB_EPStartXfer+0x3cc>)
 8005256:	400b      	ands	r3, r1
 8005258:	69b9      	ldr	r1, [r7, #24]
 800525a:	0148      	lsls	r0, r1, #5
 800525c:	69f9      	ldr	r1, [r7, #28]
 800525e:	4401      	add	r1, r0
 8005260:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005264:	4313      	orrs	r3, r2
 8005266:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	791b      	ldrb	r3, [r3, #4]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d122      	bne.n	80052b6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	440a      	add	r2, r1
 8005286:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800528a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800528e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	8afb      	ldrh	r3, [r7, #22]
 80052a0:	075b      	lsls	r3, r3, #29
 80052a2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80052a6:	69b9      	ldr	r1, [r7, #24]
 80052a8:	0148      	lsls	r0, r1, #5
 80052aa:	69f9      	ldr	r1, [r7, #28]
 80052ac:	4401      	add	r1, r0
 80052ae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80052b2:	4313      	orrs	r3, r2
 80052b4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052cc:	69b9      	ldr	r1, [r7, #24]
 80052ce:	0148      	lsls	r0, r1, #5
 80052d0:	69f9      	ldr	r1, [r7, #28]
 80052d2:	4401      	add	r1, r0
 80052d4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80052d8:	4313      	orrs	r3, r2
 80052da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d14b      	bne.n	800537a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f6:	461a      	mov	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	791b      	ldrb	r3, [r3, #4]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d128      	bne.n	8005358 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d110      	bne.n	8005338 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	440a      	add	r2, r1
 800532c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005330:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	e00f      	b.n	8005358 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	440a      	add	r2, r1
 800534e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005356:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005372:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	e166      	b.n	8005648 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	0151      	lsls	r1, r2, #5
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	440a      	add	r2, r1
 8005390:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005394:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005398:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	791b      	ldrb	r3, [r3, #4]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d015      	beq.n	80053ce <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 814e 	beq.w	8005648 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	2101      	movs	r1, #1
 80053be:	fa01 f303 	lsl.w	r3, r1, r3
 80053c2:	69f9      	ldr	r1, [r7, #28]
 80053c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053c8:	4313      	orrs	r3, r2
 80053ca:	634b      	str	r3, [r1, #52]	@ 0x34
 80053cc:	e13c      	b.n	8005648 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d110      	bne.n	8005400 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e00f      	b.n	8005420 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	440a      	add	r2, r1
 8005416:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800541a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800541e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	68d9      	ldr	r1, [r3, #12]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	781a      	ldrb	r2, [r3, #0]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	b298      	uxth	r0, r3
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	4603      	mov	r3, r0
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f9b9 	bl	80057ac <USB_WritePacket>
 800543a:	e105      	b.n	8005648 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	440a      	add	r2, r1
 8005452:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005456:	0cdb      	lsrs	r3, r3, #19
 8005458:	04db      	lsls	r3, r3, #19
 800545a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	440a      	add	r2, r1
 8005472:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005476:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800547a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800547e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d132      	bne.n	80054ec <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b4:	69b9      	ldr	r1, [r7, #24]
 80054b6:	0148      	lsls	r0, r1, #5
 80054b8:	69f9      	ldr	r1, [r7, #28]
 80054ba:	4401      	add	r1, r0
 80054bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80054c0:	4313      	orrs	r3, r2
 80054c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	0151      	lsls	r1, r2, #5
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	440a      	add	r2, r1
 80054da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054e2:	6113      	str	r3, [r2, #16]
 80054e4:	e062      	b.n	80055ac <USB_EPStartXfer+0x490>
 80054e6:	bf00      	nop
 80054e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d123      	bne.n	800553c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800550a:	69b9      	ldr	r1, [r7, #24]
 800550c:	0148      	lsls	r0, r1, #5
 800550e:	69f9      	ldr	r1, [r7, #28]
 8005510:	4401      	add	r1, r0
 8005512:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005516:	4313      	orrs	r3, r2
 8005518:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	440a      	add	r2, r1
 8005530:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005534:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005538:	6113      	str	r3, [r2, #16]
 800553a:	e037      	b.n	80055ac <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4413      	add	r3, r2
 8005546:	1e5a      	subs	r2, r3, #1
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005550:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	8afa      	ldrh	r2, [r7, #22]
 8005558:	fb03 f202 	mul.w	r2, r3, r2
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800556c:	691a      	ldr	r2, [r3, #16]
 800556e:	8afb      	ldrh	r3, [r7, #22]
 8005570:	04d9      	lsls	r1, r3, #19
 8005572:	4b38      	ldr	r3, [pc, #224]	@ (8005654 <USB_EPStartXfer+0x538>)
 8005574:	400b      	ands	r3, r1
 8005576:	69b9      	ldr	r1, [r7, #24]
 8005578:	0148      	lsls	r0, r1, #5
 800557a:	69f9      	ldr	r1, [r7, #28]
 800557c:	4401      	add	r1, r0
 800557e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005582:	4313      	orrs	r3, r2
 8005584:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800559c:	69b9      	ldr	r1, [r7, #24]
 800559e:	0148      	lsls	r0, r1, #5
 80055a0:	69f9      	ldr	r1, [r7, #28]
 80055a2:	4401      	add	r1, r0
 80055a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055a8:	4313      	orrs	r3, r2
 80055aa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d10d      	bne.n	80055ce <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	68d9      	ldr	r1, [r3, #12]
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ca:	460a      	mov	r2, r1
 80055cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	791b      	ldrb	r3, [r3, #4]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d128      	bne.n	8005628 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d110      	bne.n	8005608 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	0151      	lsls	r1, r2, #5
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005600:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	e00f      	b.n	8005628 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	0151      	lsls	r1, r2, #5
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	440a      	add	r2, r1
 800561e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005626:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	440a      	add	r2, r1
 800563e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005642:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005646:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3720      	adds	r7, #32
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	1ff80000 	.word	0x1ff80000

08005658 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d14a      	bne.n	800570c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800568a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800568e:	f040 8086 	bne.w	800579e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	7812      	ldrb	r2, [r2, #0]
 80056a6:	0151      	lsls	r1, r2, #5
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	440a      	add	r2, r1
 80056ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	0151      	lsls	r1, r2, #5
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	440a      	add	r2, r1
 80056d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3301      	adds	r3, #1
 80056de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d902      	bls.n	80056f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	75fb      	strb	r3, [r7, #23]
          break;
 80056ee:	e056      	b.n	800579e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005704:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005708:	d0e7      	beq.n	80056da <USB_EPStopXfer+0x82>
 800570a:	e048      	b.n	800579e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005720:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005724:	d13b      	bne.n	800579e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	7812      	ldrb	r2, [r2, #0]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	440a      	add	r2, r1
 8005740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005744:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005748:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	7812      	ldrb	r2, [r2, #0]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005768:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800576c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3301      	adds	r3, #1
 8005772:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f242 7210 	movw	r2, #10000	@ 0x2710
 800577a:	4293      	cmp	r3, r2
 800577c:	d902      	bls.n	8005784 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	75fb      	strb	r3, [r7, #23]
          break;
 8005782:	e00c      	b.n	800579e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005798:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800579c:	d0e7      	beq.n	800576e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b089      	sub	sp, #36	@ 0x24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	4611      	mov	r1, r2
 80057b8:	461a      	mov	r2, r3
 80057ba:	460b      	mov	r3, r1
 80057bc:	71fb      	strb	r3, [r7, #7]
 80057be:	4613      	mov	r3, r2
 80057c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d123      	bne.n	800581a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057d2:	88bb      	ldrh	r3, [r7, #4]
 80057d4:	3303      	adds	r3, #3
 80057d6:	089b      	lsrs	r3, r3, #2
 80057d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057da:	2300      	movs	r3, #0
 80057dc:	61bb      	str	r3, [r7, #24]
 80057de:	e018      	b.n	8005812 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	031a      	lsls	r2, r3, #12
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057ec:	461a      	mov	r2, r3
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	3301      	adds	r3, #1
 80057f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	3301      	adds	r3, #1
 80057fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	3301      	adds	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	3301      	adds	r3, #1
 800580a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	3301      	adds	r3, #1
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	429a      	cmp	r2, r3
 8005818:	d3e2      	bcc.n	80057e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3724      	adds	r7, #36	@ 0x24
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005828:	b480      	push	{r7}
 800582a:	b08b      	sub	sp, #44	@ 0x2c
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	4613      	mov	r3, r2
 8005834:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	089b      	lsrs	r3, r3, #2
 8005842:	b29b      	uxth	r3, r3
 8005844:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	f003 0303 	and.w	r3, r3, #3
 800584c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800584e:	2300      	movs	r3, #0
 8005850:	623b      	str	r3, [r7, #32]
 8005852:	e014      	b.n	800587e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	3301      	adds	r3, #1
 8005864:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	3301      	adds	r3, #1
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800586c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586e:	3301      	adds	r3, #1
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	3301      	adds	r3, #1
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	3301      	adds	r3, #1
 800587c:	623b      	str	r3, [r7, #32]
 800587e:	6a3a      	ldr	r2, [r7, #32]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	429a      	cmp	r2, r3
 8005884:	d3e6      	bcc.n	8005854 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005886:	8bfb      	ldrh	r3, [r7, #30]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01e      	beq.n	80058ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005896:	461a      	mov	r2, r3
 8005898:	f107 0310 	add.w	r3, r7, #16
 800589c:	6812      	ldr	r2, [r2, #0]
 800589e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	701a      	strb	r2, [r3, #0]
      i++;
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	3301      	adds	r3, #1
 80058b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ba:	3301      	adds	r3, #1
 80058bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80058be:	8bfb      	ldrh	r3, [r7, #30]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058c4:	8bfb      	ldrh	r3, [r7, #30]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1ea      	bne.n	80058a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	372c      	adds	r7, #44	@ 0x2c
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	785b      	ldrb	r3, [r3, #1]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d12c      	bne.n	800594e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	db12      	blt.n	800592c <USB_EPSetStall+0x54>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00f      	beq.n	800592c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	440a      	add	r2, r1
 8005922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005926:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800592a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005946:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	e02b      	b.n	80059a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	db12      	blt.n	8005986 <USB_EPSetStall+0xae>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00f      	beq.n	8005986 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	440a      	add	r2, r1
 800597c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005980:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005984:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	0151      	lsls	r1, r2, #5
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	440a      	add	r2, r1
 800599c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d128      	bne.n	8005a22 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	0151      	lsls	r1, r2, #5
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	440a      	add	r2, r1
 80059e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	791b      	ldrb	r3, [r3, #4]
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d003      	beq.n	8005a00 <USB_EPClearStall+0x4c>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	791b      	ldrb	r3, [r3, #4]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d138      	bne.n	8005a72 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	e027      	b.n	8005a72 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	0151      	lsls	r1, r2, #5
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	440a      	add	r2, r1
 8005a38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a3c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	791b      	ldrb	r3, [r3, #4]
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d003      	beq.n	8005a52 <USB_EPClearStall+0x9e>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	791b      	ldrb	r3, [r3, #4]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d10f      	bne.n	8005a72 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a70:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a9e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005aa2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005ab4:	68f9      	ldr	r1, [r7, #12]
 8005ab6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005aba:	4313      	orrs	r3, r2
 8005abc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005ae6:	f023 0303 	bic.w	r3, r3, #3
 8005aea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005afa:	f023 0302 	bic.w	r3, r3, #2
 8005afe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b085      	sub	sp, #20
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b28:	f023 0303 	bic.w	r3, r3, #3
 8005b2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b3c:	f043 0302 	orr.w	r3, r3, #2
 8005b40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4013      	ands	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b68:	68fb      	ldr	r3, [r7, #12]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	4013      	ands	r3, r2
 8005b98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	0c1b      	lsrs	r3, r3, #16
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b085      	sub	sp, #20
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	b29b      	uxth	r3, r3
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b085      	sub	sp, #20
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	460b      	mov	r3, r1
 8005be8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b087      	sub	sp, #28
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	460b      	mov	r3, r1
 8005c24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c3e:	78fb      	ldrb	r3, [r7, #3]
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4a:	01db      	lsls	r3, r3, #7
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4013      	ands	r3, r2
 8005c66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c68:	68bb      	ldr	r3, [r7, #8]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f003 0301 	and.w	r3, r3, #1
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005cb0:	f023 0307 	bic.w	r3, r3, #7
 8005cb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	607a      	str	r2, [r7, #4]
 8005ce4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	333c      	adds	r3, #60	@ 0x3c
 8005cee:	3304      	adds	r3, #4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4a26      	ldr	r2, [pc, #152]	@ (8005d90 <USB_EP0_OutStart+0xb8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d90a      	bls.n	8005d12 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d0c:	d101      	bne.n	8005d12 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e037      	b.n	8005d82 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d18:	461a      	mov	r2, r3
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d40:	f043 0318 	orr.w	r3, r3, #24
 8005d44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d54:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005d58:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d5a:	7afb      	ldrb	r3, [r7, #11]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d10f      	bne.n	8005d80 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d66:	461a      	mov	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d7a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005d7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	4f54300a 	.word	0x4f54300a

08005d94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dac:	d901      	bls.n	8005db2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e01b      	b.n	8005dea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	daf2      	bge.n	8005da0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f043 0201 	orr.w	r2, r3, #1
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dd6:	d901      	bls.n	8005ddc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e006      	b.n	8005dea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d0f0      	beq.n	8005dca <USB_CoreReset+0x36>

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e04:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005e08:	f002 fc2e 	bl	8008668 <USBD_static_malloc>
 8005e0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d109      	bne.n	8005e28 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	32b0      	adds	r2, #176	@ 0xb0
 8005e1e:	2100      	movs	r1, #0
 8005e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e24:	2302      	movs	r3, #2
 8005e26:	e0d4      	b.n	8005fd2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005e28:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f002 fc5e 	bl	80086f0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	32b0      	adds	r2, #176	@ 0xb0
 8005e3e:	68f9      	ldr	r1, [r7, #12]
 8005e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	32b0      	adds	r2, #176	@ 0xb0
 8005e4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	7c1b      	ldrb	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d138      	bne.n	8005ed2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e60:	4b5e      	ldr	r3, [pc, #376]	@ (8005fdc <USBD_CDC_Init+0x1e4>)
 8005e62:	7819      	ldrb	r1, [r3, #0]
 8005e64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e68:	2202      	movs	r2, #2
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f002 fad9 	bl	8008422 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e70:	4b5a      	ldr	r3, [pc, #360]	@ (8005fdc <USBD_CDC_Init+0x1e4>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	f003 020f 	and.w	r2, r3, #15
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	3324      	adds	r3, #36	@ 0x24
 8005e86:	2201      	movs	r2, #1
 8005e88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e8a:	4b55      	ldr	r3, [pc, #340]	@ (8005fe0 <USBD_CDC_Init+0x1e8>)
 8005e8c:	7819      	ldrb	r1, [r3, #0]
 8005e8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e92:	2202      	movs	r2, #2
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f002 fac4 	bl	8008422 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e9a:	4b51      	ldr	r3, [pc, #324]	@ (8005fe0 <USBD_CDC_Init+0x1e8>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	f003 020f 	and.w	r2, r3, #15
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	440b      	add	r3, r1
 8005eae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8005fe4 <USBD_CDC_Init+0x1ec>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f003 020f 	and.w	r2, r3, #15
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	3326      	adds	r3, #38	@ 0x26
 8005ecc:	2210      	movs	r2, #16
 8005ece:	801a      	strh	r2, [r3, #0]
 8005ed0:	e035      	b.n	8005f3e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ed2:	4b42      	ldr	r3, [pc, #264]	@ (8005fdc <USBD_CDC_Init+0x1e4>)
 8005ed4:	7819      	ldrb	r1, [r3, #0]
 8005ed6:	2340      	movs	r3, #64	@ 0x40
 8005ed8:	2202      	movs	r2, #2
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f002 faa1 	bl	8008422 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8005fdc <USBD_CDC_Init+0x1e4>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	f003 020f 	and.w	r2, r3, #15
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	3324      	adds	r3, #36	@ 0x24
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005efa:	4b39      	ldr	r3, [pc, #228]	@ (8005fe0 <USBD_CDC_Init+0x1e8>)
 8005efc:	7819      	ldrb	r1, [r3, #0]
 8005efe:	2340      	movs	r3, #64	@ 0x40
 8005f00:	2202      	movs	r2, #2
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f002 fa8d 	bl	8008422 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f08:	4b35      	ldr	r3, [pc, #212]	@ (8005fe0 <USBD_CDC_Init+0x1e8>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	f003 020f 	and.w	r2, r3, #15
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f20:	2201      	movs	r2, #1
 8005f22:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f24:	4b2f      	ldr	r3, [pc, #188]	@ (8005fe4 <USBD_CDC_Init+0x1ec>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f003 020f 	and.w	r2, r3, #15
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	3326      	adds	r3, #38	@ 0x26
 8005f3a:	2210      	movs	r2, #16
 8005f3c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f3e:	4b29      	ldr	r3, [pc, #164]	@ (8005fe4 <USBD_CDC_Init+0x1ec>)
 8005f40:	7819      	ldrb	r1, [r3, #0]
 8005f42:	2308      	movs	r3, #8
 8005f44:	2203      	movs	r2, #3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f002 fa6b 	bl	8008422 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005f4c:	4b25      	ldr	r3, [pc, #148]	@ (8005fe4 <USBD_CDC_Init+0x1ec>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	f003 020f 	and.w	r2, r3, #15
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	3324      	adds	r3, #36	@ 0x24
 8005f62:	2201      	movs	r2, #1
 8005f64:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	33b0      	adds	r3, #176	@ 0xb0
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e018      	b.n	8005fd2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	7c1b      	ldrb	r3, [r3, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe0 <USBD_CDC_Init+0x1e8>)
 8005faa:	7819      	ldrb	r1, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005fb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f002 fb22 	bl	8008600 <USBD_LL_PrepareReceive>
 8005fbc:	e008      	b.n	8005fd0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fbe:	4b08      	ldr	r3, [pc, #32]	@ (8005fe0 <USBD_CDC_Init+0x1e8>)
 8005fc0:	7819      	ldrb	r1, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005fc8:	2340      	movs	r3, #64	@ 0x40
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f002 fb18 	bl	8008600 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000093 	.word	0x20000093
 8005fe0:	20000094 	.word	0x20000094
 8005fe4:	20000095 	.word	0x20000095

08005fe8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80060e0 <USBD_CDC_DeInit+0xf8>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f002 fa37 	bl	800846e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006000:	4b37      	ldr	r3, [pc, #220]	@ (80060e0 <USBD_CDC_DeInit+0xf8>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 020f 	and.w	r2, r3, #15
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	3324      	adds	r3, #36	@ 0x24
 8006016:	2200      	movs	r2, #0
 8006018:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800601a:	4b32      	ldr	r3, [pc, #200]	@ (80060e4 <USBD_CDC_DeInit+0xfc>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f002 fa24 	bl	800846e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006026:	4b2f      	ldr	r3, [pc, #188]	@ (80060e4 <USBD_CDC_DeInit+0xfc>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	f003 020f 	and.w	r2, r3, #15
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800603e:	2200      	movs	r2, #0
 8006040:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006042:	4b29      	ldr	r3, [pc, #164]	@ (80060e8 <USBD_CDC_DeInit+0x100>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f002 fa10 	bl	800846e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800604e:	4b26      	ldr	r3, [pc, #152]	@ (80060e8 <USBD_CDC_DeInit+0x100>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	f003 020f 	and.w	r2, r3, #15
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	3324      	adds	r3, #36	@ 0x24
 8006064:	2200      	movs	r2, #0
 8006066:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006068:	4b1f      	ldr	r3, [pc, #124]	@ (80060e8 <USBD_CDC_DeInit+0x100>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	f003 020f 	and.w	r2, r3, #15
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	4613      	mov	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	440b      	add	r3, r1
 800607c:	3326      	adds	r3, #38	@ 0x26
 800607e:	2200      	movs	r2, #0
 8006080:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	32b0      	adds	r2, #176	@ 0xb0
 800608c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01f      	beq.n	80060d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	33b0      	adds	r3, #176	@ 0xb0
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	32b0      	adds	r2, #176	@ 0xb0
 80060b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f002 fae4 	bl	8008684 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	32b0      	adds	r2, #176	@ 0xb0
 80060c6:	2100      	movs	r1, #0
 80060c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000093 	.word	0x20000093
 80060e4:	20000094 	.word	0x20000094
 80060e8:	20000095 	.word	0x20000095

080060ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	32b0      	adds	r2, #176	@ 0xb0
 8006100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006104:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006118:	2303      	movs	r3, #3
 800611a:	e0bf      	b.n	800629c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006124:	2b00      	cmp	r3, #0
 8006126:	d050      	beq.n	80061ca <USBD_CDC_Setup+0xde>
 8006128:	2b20      	cmp	r3, #32
 800612a:	f040 80af 	bne.w	800628c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	88db      	ldrh	r3, [r3, #6]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d03a      	beq.n	80061ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	b25b      	sxtb	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	da1b      	bge.n	8006178 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	33b0      	adds	r3, #176	@ 0xb0
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006156:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	88d2      	ldrh	r2, [r2, #6]
 800615c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	88db      	ldrh	r3, [r3, #6]
 8006162:	2b07      	cmp	r3, #7
 8006164:	bf28      	it	cs
 8006166:	2307      	movcs	r3, #7
 8006168:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	89fa      	ldrh	r2, [r7, #14]
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 fd53 	bl	8007c1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006176:	e090      	b.n	800629a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	785a      	ldrb	r2, [r3, #1]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	88db      	ldrh	r3, [r3, #6]
 8006186:	2b3f      	cmp	r3, #63	@ 0x3f
 8006188:	d803      	bhi.n	8006192 <USBD_CDC_Setup+0xa6>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	88db      	ldrh	r3, [r3, #6]
 800618e:	b2da      	uxtb	r2, r3
 8006190:	e000      	b.n	8006194 <USBD_CDC_Setup+0xa8>
 8006192:	2240      	movs	r2, #64	@ 0x40
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800619a:	6939      	ldr	r1, [r7, #16]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80061a2:	461a      	mov	r2, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 fd65 	bl	8007c74 <USBD_CtlPrepareRx>
      break;
 80061aa:	e076      	b.n	800629a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	33b0      	adds	r3, #176	@ 0xb0
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	7850      	ldrb	r0, [r2, #1]
 80061c2:	2200      	movs	r2, #0
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	4798      	blx	r3
      break;
 80061c8:	e067      	b.n	800629a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2b0b      	cmp	r3, #11
 80061d0:	d851      	bhi.n	8006276 <USBD_CDC_Setup+0x18a>
 80061d2:	a201      	add	r2, pc, #4	@ (adr r2, 80061d8 <USBD_CDC_Setup+0xec>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	08006209 	.word	0x08006209
 80061dc:	08006285 	.word	0x08006285
 80061e0:	08006277 	.word	0x08006277
 80061e4:	08006277 	.word	0x08006277
 80061e8:	08006277 	.word	0x08006277
 80061ec:	08006277 	.word	0x08006277
 80061f0:	08006277 	.word	0x08006277
 80061f4:	08006277 	.word	0x08006277
 80061f8:	08006277 	.word	0x08006277
 80061fc:	08006277 	.word	0x08006277
 8006200:	08006233 	.word	0x08006233
 8006204:	0800625d 	.word	0x0800625d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b03      	cmp	r3, #3
 8006212:	d107      	bne.n	8006224 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006214:	f107 030a 	add.w	r3, r7, #10
 8006218:	2202      	movs	r2, #2
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 fcfd 	bl	8007c1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006222:	e032      	b.n	800628a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f001 fc7b 	bl	8007b22 <USBD_CtlError>
            ret = USBD_FAIL;
 800622c:	2303      	movs	r3, #3
 800622e:	75fb      	strb	r3, [r7, #23]
          break;
 8006230:	e02b      	b.n	800628a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b03      	cmp	r3, #3
 800623c:	d107      	bne.n	800624e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800623e:	f107 030d 	add.w	r3, r7, #13
 8006242:	2201      	movs	r2, #1
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 fce8 	bl	8007c1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800624c:	e01d      	b.n	800628a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 fc66 	bl	8007b22 <USBD_CtlError>
            ret = USBD_FAIL;
 8006256:	2303      	movs	r3, #3
 8006258:	75fb      	strb	r3, [r7, #23]
          break;
 800625a:	e016      	b.n	800628a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b03      	cmp	r3, #3
 8006266:	d00f      	beq.n	8006288 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 fc59 	bl	8007b22 <USBD_CtlError>
            ret = USBD_FAIL;
 8006270:	2303      	movs	r3, #3
 8006272:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006274:	e008      	b.n	8006288 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 fc52 	bl	8007b22 <USBD_CtlError>
          ret = USBD_FAIL;
 800627e:	2303      	movs	r3, #3
 8006280:	75fb      	strb	r3, [r7, #23]
          break;
 8006282:	e002      	b.n	800628a <USBD_CDC_Setup+0x19e>
          break;
 8006284:	bf00      	nop
 8006286:	e008      	b.n	800629a <USBD_CDC_Setup+0x1ae>
          break;
 8006288:	bf00      	nop
      }
      break;
 800628a:	e006      	b.n	800629a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f001 fc47 	bl	8007b22 <USBD_CtlError>
      ret = USBD_FAIL;
 8006294:	2303      	movs	r3, #3
 8006296:	75fb      	strb	r3, [r7, #23]
      break;
 8006298:	bf00      	nop
  }

  return (uint8_t)ret;
 800629a:	7dfb      	ldrb	r3, [r7, #23]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80062b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	32b0      	adds	r2, #176	@ 0xb0
 80062c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e065      	b.n	800639a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	32b0      	adds	r2, #176	@ 0xb0
 80062d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	f003 020f 	and.w	r2, r3, #15
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	440b      	add	r3, r1
 80062f0:	3318      	adds	r3, #24
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d02f      	beq.n	8006358 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80062f8:	78fb      	ldrb	r3, [r7, #3]
 80062fa:	f003 020f 	and.w	r2, r3, #15
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	3318      	adds	r3, #24
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	f003 010f 	and.w	r1, r3, #15
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	460b      	mov	r3, r1
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	440b      	add	r3, r1
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4403      	add	r3, r0
 8006320:	331c      	adds	r3, #28
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	fbb2 f1f3 	udiv	r1, r2, r3
 8006328:	fb01 f303 	mul.w	r3, r1, r3
 800632c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800632e:	2b00      	cmp	r3, #0
 8006330:	d112      	bne.n	8006358 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	f003 020f 	and.w	r2, r3, #15
 8006338:	6879      	ldr	r1, [r7, #4]
 800633a:	4613      	mov	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	440b      	add	r3, r1
 8006344:	3318      	adds	r3, #24
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800634a:	78f9      	ldrb	r1, [r7, #3]
 800634c:	2300      	movs	r3, #0
 800634e:	2200      	movs	r2, #0
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f002 f934 	bl	80085be <USBD_LL_Transmit>
 8006356:	e01f      	b.n	8006398 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	33b0      	adds	r3, #176	@ 0xb0
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d010      	beq.n	8006398 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	33b0      	adds	r3, #176	@ 0xb0
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006394:	78fa      	ldrb	r2, [r7, #3]
 8006396:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	32b0      	adds	r2, #176	@ 0xb0
 80063b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	32b0      	adds	r2, #176	@ 0xb0
 80063c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e01a      	b.n	800640a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f002 f932 	bl	8008642 <USBD_LL_GetRxDataSize>
 80063de:	4602      	mov	r2, r0
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	33b0      	adds	r3, #176	@ 0xb0
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006404:	4611      	mov	r1, r2
 8006406:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	32b0      	adds	r2, #176	@ 0xb0
 8006424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006428:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006430:	2303      	movs	r3, #3
 8006432:	e024      	b.n	800647e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	33b0      	adds	r3, #176	@ 0xb0
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d019      	beq.n	800647c <USBD_CDC_EP0_RxReady+0x6a>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800644e:	2bff      	cmp	r3, #255	@ 0xff
 8006450:	d014      	beq.n	800647c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	33b0      	adds	r3, #176	@ 0xb0
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800646a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006472:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	22ff      	movs	r2, #255	@ 0xff
 8006478:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006490:	2182      	movs	r1, #130	@ 0x82
 8006492:	4818      	ldr	r0, [pc, #96]	@ (80064f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006494:	f000 fd0f 	bl	8006eb6 <USBD_GetEpDesc>
 8006498:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800649a:	2101      	movs	r1, #1
 800649c:	4815      	ldr	r0, [pc, #84]	@ (80064f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800649e:	f000 fd0a 	bl	8006eb6 <USBD_GetEpDesc>
 80064a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064a4:	2181      	movs	r1, #129	@ 0x81
 80064a6:	4813      	ldr	r0, [pc, #76]	@ (80064f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064a8:	f000 fd05 	bl	8006eb6 <USBD_GetEpDesc>
 80064ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2210      	movs	r2, #16
 80064b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d006      	beq.n	80064ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064c8:	711a      	strb	r2, [r3, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d006      	beq.n	80064e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064dc:	711a      	strb	r2, [r3, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2243      	movs	r2, #67	@ 0x43
 80064e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064e8:	4b02      	ldr	r3, [pc, #8]	@ (80064f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20000050 	.word	0x20000050

080064f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006500:	2182      	movs	r1, #130	@ 0x82
 8006502:	4818      	ldr	r0, [pc, #96]	@ (8006564 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006504:	f000 fcd7 	bl	8006eb6 <USBD_GetEpDesc>
 8006508:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800650a:	2101      	movs	r1, #1
 800650c:	4815      	ldr	r0, [pc, #84]	@ (8006564 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800650e:	f000 fcd2 	bl	8006eb6 <USBD_GetEpDesc>
 8006512:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006514:	2181      	movs	r1, #129	@ 0x81
 8006516:	4813      	ldr	r0, [pc, #76]	@ (8006564 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006518:	f000 fccd 	bl	8006eb6 <USBD_GetEpDesc>
 800651c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2210      	movs	r2, #16
 8006528:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d006      	beq.n	800653e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2200      	movs	r2, #0
 8006534:	711a      	strb	r2, [r3, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f042 0202 	orr.w	r2, r2, #2
 800653c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d006      	beq.n	8006552 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	711a      	strb	r2, [r3, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f042 0202 	orr.w	r2, r2, #2
 8006550:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2243      	movs	r2, #67	@ 0x43
 8006556:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006558:	4b02      	ldr	r3, [pc, #8]	@ (8006564 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000050 	.word	0x20000050

08006568 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006570:	2182      	movs	r1, #130	@ 0x82
 8006572:	4818      	ldr	r0, [pc, #96]	@ (80065d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006574:	f000 fc9f 	bl	8006eb6 <USBD_GetEpDesc>
 8006578:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800657a:	2101      	movs	r1, #1
 800657c:	4815      	ldr	r0, [pc, #84]	@ (80065d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800657e:	f000 fc9a 	bl	8006eb6 <USBD_GetEpDesc>
 8006582:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006584:	2181      	movs	r1, #129	@ 0x81
 8006586:	4813      	ldr	r0, [pc, #76]	@ (80065d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006588:	f000 fc95 	bl	8006eb6 <USBD_GetEpDesc>
 800658c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2210      	movs	r2, #16
 8006598:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d006      	beq.n	80065ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065a8:	711a      	strb	r2, [r3, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d006      	beq.n	80065c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065bc:	711a      	strb	r2, [r3, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2243      	movs	r2, #67	@ 0x43
 80065c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065c8:	4b02      	ldr	r3, [pc, #8]	@ (80065d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20000050 	.word	0x20000050

080065d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	220a      	movs	r2, #10
 80065e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80065e6:	4b03      	ldr	r3, [pc, #12]	@ (80065f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	2000000c 	.word	0x2000000c

080065f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006608:	2303      	movs	r3, #3
 800660a:	e009      	b.n	8006620 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	33b0      	adds	r3, #176	@ 0xb0
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	32b0      	adds	r2, #176	@ 0xb0
 8006642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006646:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800664e:	2303      	movs	r3, #3
 8006650:	e008      	b.n	8006664 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	32b0      	adds	r2, #176	@ 0xb0
 8006684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006688:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006690:	2303      	movs	r3, #3
 8006692:	e004      	b.n	800669e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
	...

080066ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	32b0      	adds	r2, #176	@ 0xb0
 80066be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	32b0      	adds	r2, #176	@ 0xb0
 80066ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e018      	b.n	800670c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	7c1b      	ldrb	r3, [r3, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10a      	bne.n	80066f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006714 <USBD_CDC_ReceivePacket+0x68>)
 80066e4:	7819      	ldrb	r1, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80066ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 ff85 	bl	8008600 <USBD_LL_PrepareReceive>
 80066f6:	e008      	b.n	800670a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066f8:	4b06      	ldr	r3, [pc, #24]	@ (8006714 <USBD_CDC_ReceivePacket+0x68>)
 80066fa:	7819      	ldrb	r1, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006702:	2340      	movs	r3, #64	@ 0x40
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 ff7b 	bl	8008600 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20000094 	.word	0x20000094

08006718 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	4613      	mov	r3, r2
 8006724:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800672c:	2303      	movs	r3, #3
 800672e:	e01f      	b.n	8006770 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	79fa      	ldrb	r2, [r7, #7]
 8006762:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f001 fdf5 	bl	8008354 <USBD_LL_Init>
 800676a:	4603      	mov	r3, r0
 800676c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800676e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800678c:	2303      	movs	r3, #3
 800678e:	e025      	b.n	80067dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	32ae      	adds	r2, #174	@ 0xae
 80067a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00f      	beq.n	80067cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	32ae      	adds	r2, #174	@ 0xae
 80067b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067bc:	f107 020e 	add.w	r2, r7, #14
 80067c0:	4610      	mov	r0, r2
 80067c2:	4798      	blx	r3
 80067c4:	4602      	mov	r2, r0
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 fdfd 	bl	80083ec <USBD_LL_Start>
 80067f2:	4603      	mov	r3, r0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006804:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006806:	4618      	mov	r0, r3
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	78fa      	ldrb	r2, [r7, #3]
 8006836:	4611      	mov	r1, r2
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	4798      	blx	r3
 800683c:	4603      	mov	r3, r0
 800683e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	460b      	mov	r3, r1
 8006854:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	78fa      	ldrb	r2, [r7, #3]
 8006864:	4611      	mov	r1, r2
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006870:	2303      	movs	r3, #3
 8006872:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	4618      	mov	r0, r3
 8006892:	f001 f90c 	bl	8007aae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80068a4:	461a      	mov	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80068b2:	f003 031f 	and.w	r3, r3, #31
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d01a      	beq.n	80068f0 <USBD_LL_SetupStage+0x72>
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d822      	bhi.n	8006904 <USBD_LL_SetupStage+0x86>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <USBD_LL_SetupStage+0x4a>
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d00a      	beq.n	80068dc <USBD_LL_SetupStage+0x5e>
 80068c6:	e01d      	b.n	8006904 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fb63 	bl	8006f9c <USBD_StdDevReq>
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]
      break;
 80068da:	e020      	b.n	800691e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fbcb 	bl	8007080 <USBD_StdItfReq>
 80068ea:	4603      	mov	r3, r0
 80068ec:	73fb      	strb	r3, [r7, #15]
      break;
 80068ee:	e016      	b.n	800691e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fc2d 	bl	8007158 <USBD_StdEPReq>
 80068fe:	4603      	mov	r3, r0
 8006900:	73fb      	strb	r3, [r7, #15]
      break;
 8006902:	e00c      	b.n	800691e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800690a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800690e:	b2db      	uxtb	r3, r3
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 fdca 	bl	80084ac <USBD_LL_StallEP>
 8006918:	4603      	mov	r3, r0
 800691a:	73fb      	strb	r3, [r7, #15]
      break;
 800691c:	bf00      	nop
  }

  return ret;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	460b      	mov	r3, r1
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800693a:	7afb      	ldrb	r3, [r7, #11]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d16e      	bne.n	8006a1e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006946:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800694e:	2b03      	cmp	r3, #3
 8006950:	f040 8098 	bne.w	8006a84 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	429a      	cmp	r2, r3
 800695e:	d913      	bls.n	8006988 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	1ad2      	subs	r2, r2, r3
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	4293      	cmp	r3, r2
 8006978:	bf28      	it	cs
 800697a:	4613      	movcs	r3, r2
 800697c:	461a      	mov	r2, r3
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f001 f994 	bl	8007cae <USBD_CtlContinueRx>
 8006986:	e07d      	b.n	8006a84 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	2b02      	cmp	r3, #2
 8006994:	d014      	beq.n	80069c0 <USBD_LL_DataOutStage+0x98>
 8006996:	2b02      	cmp	r3, #2
 8006998:	d81d      	bhi.n	80069d6 <USBD_LL_DataOutStage+0xae>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <USBD_LL_DataOutStage+0x7c>
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d003      	beq.n	80069aa <USBD_LL_DataOutStage+0x82>
 80069a2:	e018      	b.n	80069d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	75bb      	strb	r3, [r7, #22]
            break;
 80069a8:	e018      	b.n	80069dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	4619      	mov	r1, r3
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 fa64 	bl	8006e82 <USBD_CoreFindIF>
 80069ba:	4603      	mov	r3, r0
 80069bc:	75bb      	strb	r3, [r7, #22]
            break;
 80069be:	e00d      	b.n	80069dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	4619      	mov	r1, r3
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 fa66 	bl	8006e9c <USBD_CoreFindEP>
 80069d0:	4603      	mov	r3, r0
 80069d2:	75bb      	strb	r3, [r7, #22]
            break;
 80069d4:	e002      	b.n	80069dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	75bb      	strb	r3, [r7, #22]
            break;
 80069da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80069dc:	7dbb      	ldrb	r3, [r7, #22]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d119      	bne.n	8006a16 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d113      	bne.n	8006a16 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80069ee:	7dba      	ldrb	r2, [r7, #22]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	32ae      	adds	r2, #174	@ 0xae
 80069f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00b      	beq.n	8006a16 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80069fe:	7dba      	ldrb	r2, [r7, #22]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a06:	7dba      	ldrb	r2, [r7, #22]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	32ae      	adds	r2, #174	@ 0xae
 8006a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f001 f95a 	bl	8007cd0 <USBD_CtlSendStatus>
 8006a1c:	e032      	b.n	8006a84 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a1e:	7afb      	ldrb	r3, [r7, #11]
 8006a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	4619      	mov	r1, r3
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 fa37 	bl	8006e9c <USBD_CoreFindEP>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a32:	7dbb      	ldrb	r3, [r7, #22]
 8006a34:	2bff      	cmp	r3, #255	@ 0xff
 8006a36:	d025      	beq.n	8006a84 <USBD_LL_DataOutStage+0x15c>
 8006a38:	7dbb      	ldrb	r3, [r7, #22]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d122      	bne.n	8006a84 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d117      	bne.n	8006a7a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a4a:	7dba      	ldrb	r2, [r7, #22]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	32ae      	adds	r2, #174	@ 0xae
 8006a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00f      	beq.n	8006a7a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a5a:	7dba      	ldrb	r2, [r7, #22]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a62:	7dba      	ldrb	r2, [r7, #22]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	32ae      	adds	r2, #174	@ 0xae
 8006a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	7afa      	ldrb	r2, [r7, #11]
 8006a70:	4611      	mov	r1, r2
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	4798      	blx	r3
 8006a76:	4603      	mov	r3, r0
 8006a78:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	e000      	b.n	8006a86 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b086      	sub	sp, #24
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	460b      	mov	r3, r1
 8006a98:	607a      	str	r2, [r7, #4]
 8006a9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006a9c:	7afb      	ldrb	r3, [r7, #11]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d16f      	bne.n	8006b82 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3314      	adds	r3, #20
 8006aa6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d15a      	bne.n	8006b68 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d914      	bls.n	8006ae8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	1ad2      	subs	r2, r2, r3
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f001 f8bc 	bl	8007c52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ada:	2300      	movs	r3, #0
 8006adc:	2200      	movs	r2, #0
 8006ade:	2100      	movs	r1, #0
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f001 fd8d 	bl	8008600 <USBD_LL_PrepareReceive>
 8006ae6:	e03f      	b.n	8006b68 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d11c      	bne.n	8006b2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d316      	bcc.n	8006b2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d20f      	bcs.n	8006b2e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2100      	movs	r1, #0
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f001 f89d 	bl	8007c52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b20:	2300      	movs	r3, #0
 8006b22:	2200      	movs	r2, #0
 8006b24:	2100      	movs	r1, #0
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f001 fd6a 	bl	8008600 <USBD_LL_PrepareReceive>
 8006b2c:	e01c      	b.n	8006b68 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d10f      	bne.n	8006b5a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d009      	beq.n	8006b5a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b5a:	2180      	movs	r1, #128	@ 0x80
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f001 fca5 	bl	80084ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f001 f8c7 	bl	8007cf6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d03a      	beq.n	8006be8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f7ff fe42 	bl	80067fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006b80:	e032      	b.n	8006be8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b82:	7afb      	ldrb	r3, [r7, #11]
 8006b84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 f985 	bl	8006e9c <USBD_CoreFindEP>
 8006b92:	4603      	mov	r3, r0
 8006b94:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
 8006b98:	2bff      	cmp	r3, #255	@ 0xff
 8006b9a:	d025      	beq.n	8006be8 <USBD_LL_DataInStage+0x15a>
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d122      	bne.n	8006be8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d11c      	bne.n	8006be8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006bae:	7dfa      	ldrb	r2, [r7, #23]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	32ae      	adds	r2, #174	@ 0xae
 8006bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d014      	beq.n	8006be8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006bbe:	7dfa      	ldrb	r2, [r7, #23]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006bc6:	7dfa      	ldrb	r2, [r7, #23]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	32ae      	adds	r2, #174	@ 0xae
 8006bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	7afa      	ldrb	r2, [r7, #11]
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	4798      	blx	r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006bde:	7dbb      	ldrb	r3, [r7, #22]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006be4:	7dbb      	ldrb	r3, [r7, #22]
 8006be6:	e000      	b.n	8006bea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d014      	beq.n	8006c58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00e      	beq.n	8006c58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	6852      	ldr	r2, [r2, #4]
 8006c46:	b2d2      	uxtb	r2, r2
 8006c48:	4611      	mov	r1, r2
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	4798      	blx	r3
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c54:	2303      	movs	r3, #3
 8006c56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c58:	2340      	movs	r3, #64	@ 0x40
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 fbdf 	bl	8008422 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2240      	movs	r2, #64	@ 0x40
 8006c70:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c74:	2340      	movs	r3, #64	@ 0x40
 8006c76:	2200      	movs	r2, #0
 8006c78:	2180      	movs	r1, #128	@ 0x80
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 fbd1 	bl	8008422 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2240      	movs	r2, #64	@ 0x40
 8006c8a:	621a      	str	r2, [r3, #32]

  return ret;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	78fa      	ldrb	r2, [r7, #3]
 8006ca6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d006      	beq.n	8006cd8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2204      	movs	r2, #4
 8006cdc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d106      	bne.n	8006d10 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d110      	bne.n	8006d54 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	460b      	mov	r3, r1
 8006d68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	32ae      	adds	r2, #174	@ 0xae
 8006d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e01c      	b.n	8006dba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d115      	bne.n	8006db8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	32ae      	adds	r2, #174	@ 0xae
 8006d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	32ae      	adds	r2, #174	@ 0xae
 8006daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	78fa      	ldrb	r2, [r7, #3]
 8006db2:	4611      	mov	r1, r2
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	32ae      	adds	r2, #174	@ 0xae
 8006dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e01c      	b.n	8006e1e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d115      	bne.n	8006e1c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	32ae      	adds	r2, #174	@ 0xae
 8006dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	32ae      	adds	r2, #174	@ 0xae
 8006e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e14:	78fa      	ldrb	r2, [r7, #3]
 8006e16:	4611      	mov	r1, r2
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00e      	beq.n	8006e78 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6852      	ldr	r2, [r2, #4]
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	4611      	mov	r1, r2
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	4798      	blx	r3
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e74:	2303      	movs	r3, #3
 8006e76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e8e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ea8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b086      	sub	sp, #24
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	885b      	ldrh	r3, [r3, #2]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	7812      	ldrb	r2, [r2, #0]
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d91f      	bls.n	8006f1c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006ee2:	e013      	b.n	8006f0c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006ee4:	f107 030a 	add.w	r3, r7, #10
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6978      	ldr	r0, [r7, #20]
 8006eec:	f000 f81b 	bl	8006f26 <USBD_GetNextDesc>
 8006ef0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	2b05      	cmp	r3, #5
 8006ef8:	d108      	bne.n	8006f0c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	789b      	ldrb	r3, [r3, #2]
 8006f02:	78fa      	ldrb	r2, [r7, #3]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d008      	beq.n	8006f1a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	885b      	ldrh	r3, [r3, #2]
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	897b      	ldrh	r3, [r7, #10]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d8e5      	bhi.n	8006ee4 <USBD_GetEpDesc+0x2e>
 8006f18:	e000      	b.n	8006f1c <USBD_GetEpDesc+0x66>
          break;
 8006f1a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f1c:	693b      	ldr	r3, [r7, #16]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	7812      	ldrb	r2, [r2, #0]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f50:	68fb      	ldr	r3, [r7, #12]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b087      	sub	sp, #28
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	3301      	adds	r3, #1
 8006f74:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f7c:	8a3b      	ldrh	r3, [r7, #16]
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	b21a      	sxth	r2, r3
 8006f82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	b21b      	sxth	r3, r3
 8006f8a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f8c:	89fb      	ldrh	r3, [r7, #14]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fb2:	2b40      	cmp	r3, #64	@ 0x40
 8006fb4:	d005      	beq.n	8006fc2 <USBD_StdDevReq+0x26>
 8006fb6:	2b40      	cmp	r3, #64	@ 0x40
 8006fb8:	d857      	bhi.n	800706a <USBD_StdDevReq+0xce>
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00f      	beq.n	8006fde <USBD_StdDevReq+0x42>
 8006fbe:	2b20      	cmp	r3, #32
 8006fc0:	d153      	bne.n	800706a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	32ae      	adds	r2, #174	@ 0xae
 8006fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]
      break;
 8006fdc:	e04a      	b.n	8007074 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	2b09      	cmp	r3, #9
 8006fe4:	d83b      	bhi.n	800705e <USBD_StdDevReq+0xc2>
 8006fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fec <USBD_StdDevReq+0x50>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08007041 	.word	0x08007041
 8006ff0:	08007055 	.word	0x08007055
 8006ff4:	0800705f 	.word	0x0800705f
 8006ff8:	0800704b 	.word	0x0800704b
 8006ffc:	0800705f 	.word	0x0800705f
 8007000:	0800701f 	.word	0x0800701f
 8007004:	08007015 	.word	0x08007015
 8007008:	0800705f 	.word	0x0800705f
 800700c:	08007037 	.word	0x08007037
 8007010:	08007029 	.word	0x08007029
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fa3c 	bl	8007494 <USBD_GetDescriptor>
          break;
 800701c:	e024      	b.n	8007068 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fba1 	bl	8007768 <USBD_SetAddress>
          break;
 8007026:	e01f      	b.n	8007068 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fbe0 	bl	80077f0 <USBD_SetConfig>
 8007030:	4603      	mov	r3, r0
 8007032:	73fb      	strb	r3, [r7, #15]
          break;
 8007034:	e018      	b.n	8007068 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fc83 	bl	8007944 <USBD_GetConfig>
          break;
 800703e:	e013      	b.n	8007068 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fcb4 	bl	80079b0 <USBD_GetStatus>
          break;
 8007048:	e00e      	b.n	8007068 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fce3 	bl	8007a18 <USBD_SetFeature>
          break;
 8007052:	e009      	b.n	8007068 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fd07 	bl	8007a6a <USBD_ClrFeature>
          break;
 800705c:	e004      	b.n	8007068 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fd5e 	bl	8007b22 <USBD_CtlError>
          break;
 8007066:	bf00      	nop
      }
      break;
 8007068:	e004      	b.n	8007074 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fd58 	bl	8007b22 <USBD_CtlError>
      break;
 8007072:	bf00      	nop
  }

  return ret;
 8007074:	7bfb      	ldrb	r3, [r7, #15]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop

08007080 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007096:	2b40      	cmp	r3, #64	@ 0x40
 8007098:	d005      	beq.n	80070a6 <USBD_StdItfReq+0x26>
 800709a:	2b40      	cmp	r3, #64	@ 0x40
 800709c:	d852      	bhi.n	8007144 <USBD_StdItfReq+0xc4>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <USBD_StdItfReq+0x26>
 80070a2:	2b20      	cmp	r3, #32
 80070a4:	d14e      	bne.n	8007144 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d840      	bhi.n	8007136 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	889b      	ldrh	r3, [r3, #4]
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d836      	bhi.n	800712c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	889b      	ldrh	r3, [r3, #4]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff fedb 	bl	8006e82 <USBD_CoreFindIF>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	2bff      	cmp	r3, #255	@ 0xff
 80070d4:	d01d      	beq.n	8007112 <USBD_StdItfReq+0x92>
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d11a      	bne.n	8007112 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80070dc:	7bba      	ldrb	r2, [r7, #14]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	32ae      	adds	r2, #174	@ 0xae
 80070e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00f      	beq.n	800710c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80070ec:	7bba      	ldrb	r2, [r7, #14]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80070f4:	7bba      	ldrb	r2, [r7, #14]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	32ae      	adds	r2, #174	@ 0xae
 80070fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	4798      	blx	r3
 8007106:	4603      	mov	r3, r0
 8007108:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800710a:	e004      	b.n	8007116 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800710c:	2303      	movs	r3, #3
 800710e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007110:	e001      	b.n	8007116 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007112:	2303      	movs	r3, #3
 8007114:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	88db      	ldrh	r3, [r3, #6]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d110      	bne.n	8007140 <USBD_StdItfReq+0xc0>
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10d      	bne.n	8007140 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fdd3 	bl	8007cd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800712a:	e009      	b.n	8007140 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fcf7 	bl	8007b22 <USBD_CtlError>
          break;
 8007134:	e004      	b.n	8007140 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fcf2 	bl	8007b22 <USBD_CtlError>
          break;
 800713e:	e000      	b.n	8007142 <USBD_StdItfReq+0xc2>
          break;
 8007140:	bf00      	nop
      }
      break;
 8007142:	e004      	b.n	800714e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fceb 	bl	8007b22 <USBD_CtlError>
      break;
 800714c:	bf00      	nop
  }

  return ret;
 800714e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	889b      	ldrh	r3, [r3, #4]
 800716a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007174:	2b40      	cmp	r3, #64	@ 0x40
 8007176:	d007      	beq.n	8007188 <USBD_StdEPReq+0x30>
 8007178:	2b40      	cmp	r3, #64	@ 0x40
 800717a:	f200 817f 	bhi.w	800747c <USBD_StdEPReq+0x324>
 800717e:	2b00      	cmp	r3, #0
 8007180:	d02a      	beq.n	80071d8 <USBD_StdEPReq+0x80>
 8007182:	2b20      	cmp	r3, #32
 8007184:	f040 817a 	bne.w	800747c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff fe85 	bl	8006e9c <USBD_CoreFindEP>
 8007192:	4603      	mov	r3, r0
 8007194:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007196:	7b7b      	ldrb	r3, [r7, #13]
 8007198:	2bff      	cmp	r3, #255	@ 0xff
 800719a:	f000 8174 	beq.w	8007486 <USBD_StdEPReq+0x32e>
 800719e:	7b7b      	ldrb	r3, [r7, #13]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f040 8170 	bne.w	8007486 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071a6:	7b7a      	ldrb	r2, [r7, #13]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071ae:	7b7a      	ldrb	r2, [r7, #13]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	32ae      	adds	r2, #174	@ 0xae
 80071b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 8163 	beq.w	8007486 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071c0:	7b7a      	ldrb	r2, [r7, #13]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	32ae      	adds	r2, #174	@ 0xae
 80071c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	4798      	blx	r3
 80071d2:	4603      	mov	r3, r0
 80071d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071d6:	e156      	b.n	8007486 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	785b      	ldrb	r3, [r3, #1]
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d008      	beq.n	80071f2 <USBD_StdEPReq+0x9a>
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	f300 8145 	bgt.w	8007470 <USBD_StdEPReq+0x318>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 809b 	beq.w	8007322 <USBD_StdEPReq+0x1ca>
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d03c      	beq.n	800726a <USBD_StdEPReq+0x112>
 80071f0:	e13e      	b.n	8007470 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d002      	beq.n	8007204 <USBD_StdEPReq+0xac>
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d016      	beq.n	8007230 <USBD_StdEPReq+0xd8>
 8007202:	e02c      	b.n	800725e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00d      	beq.n	8007226 <USBD_StdEPReq+0xce>
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	2b80      	cmp	r3, #128	@ 0x80
 800720e:	d00a      	beq.n	8007226 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 f949 	bl	80084ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800721a:	2180      	movs	r1, #128	@ 0x80
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 f945 	bl	80084ac <USBD_LL_StallEP>
 8007222:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007224:	e020      	b.n	8007268 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fc7a 	bl	8007b22 <USBD_CtlError>
              break;
 800722e:	e01b      	b.n	8007268 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	885b      	ldrh	r3, [r3, #2]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10e      	bne.n	8007256 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00b      	beq.n	8007256 <USBD_StdEPReq+0xfe>
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	2b80      	cmp	r3, #128	@ 0x80
 8007242:	d008      	beq.n	8007256 <USBD_StdEPReq+0xfe>
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	88db      	ldrh	r3, [r3, #6]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d104      	bne.n	8007256 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 f92b 	bl	80084ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fd3a 	bl	8007cd0 <USBD_CtlSendStatus>

              break;
 800725c:	e004      	b.n	8007268 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fc5e 	bl	8007b22 <USBD_CtlError>
              break;
 8007266:	bf00      	nop
          }
          break;
 8007268:	e107      	b.n	800747a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d002      	beq.n	800727c <USBD_StdEPReq+0x124>
 8007276:	2b03      	cmp	r3, #3
 8007278:	d016      	beq.n	80072a8 <USBD_StdEPReq+0x150>
 800727a:	e04b      	b.n	8007314 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00d      	beq.n	800729e <USBD_StdEPReq+0x146>
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	2b80      	cmp	r3, #128	@ 0x80
 8007286:	d00a      	beq.n	800729e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 f90d 	bl	80084ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007292:	2180      	movs	r1, #128	@ 0x80
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 f909 	bl	80084ac <USBD_LL_StallEP>
 800729a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800729c:	e040      	b.n	8007320 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fc3e 	bl	8007b22 <USBD_CtlError>
              break;
 80072a6:	e03b      	b.n	8007320 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	885b      	ldrh	r3, [r3, #2]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d136      	bne.n	800731e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d004      	beq.n	80072c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 f913 	bl	80084ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fd03 	bl	8007cd0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff fde4 	bl	8006e9c <USBD_CoreFindEP>
 80072d4:	4603      	mov	r3, r0
 80072d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072d8:	7b7b      	ldrb	r3, [r7, #13]
 80072da:	2bff      	cmp	r3, #255	@ 0xff
 80072dc:	d01f      	beq.n	800731e <USBD_StdEPReq+0x1c6>
 80072de:	7b7b      	ldrb	r3, [r7, #13]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d11c      	bne.n	800731e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80072e4:	7b7a      	ldrb	r2, [r7, #13]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80072ec:	7b7a      	ldrb	r2, [r7, #13]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	32ae      	adds	r2, #174	@ 0xae
 80072f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d010      	beq.n	800731e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072fc:	7b7a      	ldrb	r2, [r7, #13]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	32ae      	adds	r2, #174	@ 0xae
 8007302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4798      	blx	r3
 800730e:	4603      	mov	r3, r0
 8007310:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007312:	e004      	b.n	800731e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fc03 	bl	8007b22 <USBD_CtlError>
              break;
 800731c:	e000      	b.n	8007320 <USBD_StdEPReq+0x1c8>
              break;
 800731e:	bf00      	nop
          }
          break;
 8007320:	e0ab      	b.n	800747a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d002      	beq.n	8007334 <USBD_StdEPReq+0x1dc>
 800732e:	2b03      	cmp	r3, #3
 8007330:	d032      	beq.n	8007398 <USBD_StdEPReq+0x240>
 8007332:	e097      	b.n	8007464 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d007      	beq.n	800734a <USBD_StdEPReq+0x1f2>
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	2b80      	cmp	r3, #128	@ 0x80
 800733e:	d004      	beq.n	800734a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fbed 	bl	8007b22 <USBD_CtlError>
                break;
 8007348:	e091      	b.n	800746e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800734a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800734e:	2b00      	cmp	r3, #0
 8007350:	da0b      	bge.n	800736a <USBD_StdEPReq+0x212>
 8007352:	7bbb      	ldrb	r3, [r7, #14]
 8007354:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007358:	4613      	mov	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	3310      	adds	r3, #16
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	4413      	add	r3, r2
 8007366:	3304      	adds	r3, #4
 8007368:	e00b      	b.n	8007382 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	4413      	add	r3, r2
 8007380:	3304      	adds	r3, #4
 8007382:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2202      	movs	r2, #2
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fc43 	bl	8007c1c <USBD_CtlSendData>
              break;
 8007396:	e06a      	b.n	800746e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800739c:	2b00      	cmp	r3, #0
 800739e:	da11      	bge.n	80073c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	f003 020f 	and.w	r2, r3, #15
 80073a6:	6879      	ldr	r1, [r7, #4]
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	440b      	add	r3, r1
 80073b2:	3324      	adds	r3, #36	@ 0x24
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d117      	bne.n	80073ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fbb0 	bl	8007b22 <USBD_CtlError>
                  break;
 80073c2:	e054      	b.n	800746e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	f003 020f 	and.w	r2, r3, #15
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	4613      	mov	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	440b      	add	r3, r1
 80073d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d104      	bne.n	80073ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fb9d 	bl	8007b22 <USBD_CtlError>
                  break;
 80073e8:	e041      	b.n	800746e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	da0b      	bge.n	800740a <USBD_StdEPReq+0x2b2>
 80073f2:	7bbb      	ldrb	r3, [r7, #14]
 80073f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	3310      	adds	r3, #16
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	4413      	add	r3, r2
 8007406:	3304      	adds	r3, #4
 8007408:	e00b      	b.n	8007422 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007410:	4613      	mov	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	4413      	add	r3, r2
 8007420:	3304      	adds	r3, #4
 8007422:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <USBD_StdEPReq+0x2d8>
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	2b80      	cmp	r3, #128	@ 0x80
 800742e:	d103      	bne.n	8007438 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2200      	movs	r2, #0
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	e00e      	b.n	8007456 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 f873 	bl	8008528 <USBD_LL_IsStallEP>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2201      	movs	r2, #1
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	e002      	b.n	8007456 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2202      	movs	r2, #2
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fbdd 	bl	8007c1c <USBD_CtlSendData>
              break;
 8007462:	e004      	b.n	800746e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fb5b 	bl	8007b22 <USBD_CtlError>
              break;
 800746c:	bf00      	nop
          }
          break;
 800746e:	e004      	b.n	800747a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fb55 	bl	8007b22 <USBD_CtlError>
          break;
 8007478:	bf00      	nop
      }
      break;
 800747a:	e005      	b.n	8007488 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fb4f 	bl	8007b22 <USBD_CtlError>
      break;
 8007484:	e000      	b.n	8007488 <USBD_StdEPReq+0x330>
      break;
 8007486:	bf00      	nop
  }

  return ret;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
	...

08007494 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	885b      	ldrh	r3, [r3, #2]
 80074ae:	0a1b      	lsrs	r3, r3, #8
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	3b01      	subs	r3, #1
 80074b4:	2b06      	cmp	r3, #6
 80074b6:	f200 8128 	bhi.w	800770a <USBD_GetDescriptor+0x276>
 80074ba:	a201      	add	r2, pc, #4	@ (adr r2, 80074c0 <USBD_GetDescriptor+0x2c>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	080074dd 	.word	0x080074dd
 80074c4:	080074f5 	.word	0x080074f5
 80074c8:	08007535 	.word	0x08007535
 80074cc:	0800770b 	.word	0x0800770b
 80074d0:	0800770b 	.word	0x0800770b
 80074d4:	080076ab 	.word	0x080076ab
 80074d8:	080076d7 	.word	0x080076d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	7c12      	ldrb	r2, [r2, #16]
 80074e8:	f107 0108 	add.w	r1, r7, #8
 80074ec:	4610      	mov	r0, r2
 80074ee:	4798      	blx	r3
 80074f0:	60f8      	str	r0, [r7, #12]
      break;
 80074f2:	e112      	b.n	800771a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	7c1b      	ldrb	r3, [r3, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10d      	bne.n	8007518 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007504:	f107 0208 	add.w	r2, r7, #8
 8007508:	4610      	mov	r0, r2
 800750a:	4798      	blx	r3
 800750c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3301      	adds	r3, #1
 8007512:	2202      	movs	r2, #2
 8007514:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007516:	e100      	b.n	800771a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	f107 0208 	add.w	r2, r7, #8
 8007524:	4610      	mov	r0, r2
 8007526:	4798      	blx	r3
 8007528:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3301      	adds	r3, #1
 800752e:	2202      	movs	r2, #2
 8007530:	701a      	strb	r2, [r3, #0]
      break;
 8007532:	e0f2      	b.n	800771a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	885b      	ldrh	r3, [r3, #2]
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b05      	cmp	r3, #5
 800753c:	f200 80ac 	bhi.w	8007698 <USBD_GetDescriptor+0x204>
 8007540:	a201      	add	r2, pc, #4	@ (adr r2, 8007548 <USBD_GetDescriptor+0xb4>)
 8007542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007546:	bf00      	nop
 8007548:	08007561 	.word	0x08007561
 800754c:	08007595 	.word	0x08007595
 8007550:	080075c9 	.word	0x080075c9
 8007554:	080075fd 	.word	0x080075fd
 8007558:	08007631 	.word	0x08007631
 800755c:	08007665 	.word	0x08007665
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00b      	beq.n	8007584 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	7c12      	ldrb	r2, [r2, #16]
 8007578:	f107 0108 	add.w	r1, r7, #8
 800757c:	4610      	mov	r0, r2
 800757e:	4798      	blx	r3
 8007580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007582:	e091      	b.n	80076a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 facb 	bl	8007b22 <USBD_CtlError>
            err++;
 800758c:	7afb      	ldrb	r3, [r7, #11]
 800758e:	3301      	adds	r3, #1
 8007590:	72fb      	strb	r3, [r7, #11]
          break;
 8007592:	e089      	b.n	80076a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00b      	beq.n	80075b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	7c12      	ldrb	r2, [r2, #16]
 80075ac:	f107 0108 	add.w	r1, r7, #8
 80075b0:	4610      	mov	r0, r2
 80075b2:	4798      	blx	r3
 80075b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075b6:	e077      	b.n	80076a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fab1 	bl	8007b22 <USBD_CtlError>
            err++;
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	3301      	adds	r3, #1
 80075c4:	72fb      	strb	r3, [r7, #11]
          break;
 80075c6:	e06f      	b.n	80076a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00b      	beq.n	80075ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	7c12      	ldrb	r2, [r2, #16]
 80075e0:	f107 0108 	add.w	r1, r7, #8
 80075e4:	4610      	mov	r0, r2
 80075e6:	4798      	blx	r3
 80075e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ea:	e05d      	b.n	80076a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fa97 	bl	8007b22 <USBD_CtlError>
            err++;
 80075f4:	7afb      	ldrb	r3, [r7, #11]
 80075f6:	3301      	adds	r3, #1
 80075f8:	72fb      	strb	r3, [r7, #11]
          break;
 80075fa:	e055      	b.n	80076a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00b      	beq.n	8007620 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	7c12      	ldrb	r2, [r2, #16]
 8007614:	f107 0108 	add.w	r1, r7, #8
 8007618:	4610      	mov	r0, r2
 800761a:	4798      	blx	r3
 800761c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800761e:	e043      	b.n	80076a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fa7d 	bl	8007b22 <USBD_CtlError>
            err++;
 8007628:	7afb      	ldrb	r3, [r7, #11]
 800762a:	3301      	adds	r3, #1
 800762c:	72fb      	strb	r3, [r7, #11]
          break;
 800762e:	e03b      	b.n	80076a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00b      	beq.n	8007654 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	7c12      	ldrb	r2, [r2, #16]
 8007648:	f107 0108 	add.w	r1, r7, #8
 800764c:	4610      	mov	r0, r2
 800764e:	4798      	blx	r3
 8007650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007652:	e029      	b.n	80076a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fa63 	bl	8007b22 <USBD_CtlError>
            err++;
 800765c:	7afb      	ldrb	r3, [r7, #11]
 800765e:	3301      	adds	r3, #1
 8007660:	72fb      	strb	r3, [r7, #11]
          break;
 8007662:	e021      	b.n	80076a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00b      	beq.n	8007688 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	7c12      	ldrb	r2, [r2, #16]
 800767c:	f107 0108 	add.w	r1, r7, #8
 8007680:	4610      	mov	r0, r2
 8007682:	4798      	blx	r3
 8007684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007686:	e00f      	b.n	80076a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fa49 	bl	8007b22 <USBD_CtlError>
            err++;
 8007690:	7afb      	ldrb	r3, [r7, #11]
 8007692:	3301      	adds	r3, #1
 8007694:	72fb      	strb	r3, [r7, #11]
          break;
 8007696:	e007      	b.n	80076a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa41 	bl	8007b22 <USBD_CtlError>
          err++;
 80076a0:	7afb      	ldrb	r3, [r7, #11]
 80076a2:	3301      	adds	r3, #1
 80076a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80076a6:	bf00      	nop
      }
      break;
 80076a8:	e037      	b.n	800771a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	7c1b      	ldrb	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d109      	bne.n	80076c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ba:	f107 0208 	add.w	r2, r7, #8
 80076be:	4610      	mov	r0, r2
 80076c0:	4798      	blx	r3
 80076c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076c4:	e029      	b.n	800771a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fa2a 	bl	8007b22 <USBD_CtlError>
        err++;
 80076ce:	7afb      	ldrb	r3, [r7, #11]
 80076d0:	3301      	adds	r3, #1
 80076d2:	72fb      	strb	r3, [r7, #11]
      break;
 80076d4:	e021      	b.n	800771a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	7c1b      	ldrb	r3, [r3, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10d      	bne.n	80076fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e6:	f107 0208 	add.w	r2, r7, #8
 80076ea:	4610      	mov	r0, r2
 80076ec:	4798      	blx	r3
 80076ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3301      	adds	r3, #1
 80076f4:	2207      	movs	r2, #7
 80076f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076f8:	e00f      	b.n	800771a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fa10 	bl	8007b22 <USBD_CtlError>
        err++;
 8007702:	7afb      	ldrb	r3, [r7, #11]
 8007704:	3301      	adds	r3, #1
 8007706:	72fb      	strb	r3, [r7, #11]
      break;
 8007708:	e007      	b.n	800771a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fa08 	bl	8007b22 <USBD_CtlError>
      err++;
 8007712:	7afb      	ldrb	r3, [r7, #11]
 8007714:	3301      	adds	r3, #1
 8007716:	72fb      	strb	r3, [r7, #11]
      break;
 8007718:	bf00      	nop
  }

  if (err != 0U)
 800771a:	7afb      	ldrb	r3, [r7, #11]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d11e      	bne.n	800775e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	88db      	ldrh	r3, [r3, #6]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d016      	beq.n	8007756 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007728:	893b      	ldrh	r3, [r7, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00e      	beq.n	800774c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	88da      	ldrh	r2, [r3, #6]
 8007732:	893b      	ldrh	r3, [r7, #8]
 8007734:	4293      	cmp	r3, r2
 8007736:	bf28      	it	cs
 8007738:	4613      	movcs	r3, r2
 800773a:	b29b      	uxth	r3, r3
 800773c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800773e:	893b      	ldrh	r3, [r7, #8]
 8007740:	461a      	mov	r2, r3
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fa69 	bl	8007c1c <USBD_CtlSendData>
 800774a:	e009      	b.n	8007760 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f9e7 	bl	8007b22 <USBD_CtlError>
 8007754:	e004      	b.n	8007760 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 faba 	bl	8007cd0 <USBD_CtlSendStatus>
 800775c:	e000      	b.n	8007760 <USBD_GetDescriptor+0x2cc>
    return;
 800775e:	bf00      	nop
  }
}
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop

08007768 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	889b      	ldrh	r3, [r3, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d131      	bne.n	80077de <USBD_SetAddress+0x76>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	88db      	ldrh	r3, [r3, #6]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d12d      	bne.n	80077de <USBD_SetAddress+0x76>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	885b      	ldrh	r3, [r3, #2]
 8007786:	2b7f      	cmp	r3, #127	@ 0x7f
 8007788:	d829      	bhi.n	80077de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	885b      	ldrh	r3, [r3, #2]
 800778e:	b2db      	uxtb	r3, r3
 8007790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007794:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d104      	bne.n	80077ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f9bc 	bl	8007b22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077aa:	e01d      	b.n	80077e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	7bfa      	ldrb	r2, [r7, #15]
 80077b0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fee1 	bl	8008580 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa86 	bl	8007cd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d004      	beq.n	80077d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d2:	e009      	b.n	80077e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077dc:	e004      	b.n	80077e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f99e 	bl	8007b22 <USBD_CtlError>
  }
}
 80077e6:	bf00      	nop
 80077e8:	bf00      	nop
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	885b      	ldrh	r3, [r3, #2]
 8007802:	b2da      	uxtb	r2, r3
 8007804:	4b4e      	ldr	r3, [pc, #312]	@ (8007940 <USBD_SetConfig+0x150>)
 8007806:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007808:	4b4d      	ldr	r3, [pc, #308]	@ (8007940 <USBD_SetConfig+0x150>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d905      	bls.n	800781c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f985 	bl	8007b22 <USBD_CtlError>
    return USBD_FAIL;
 8007818:	2303      	movs	r3, #3
 800781a:	e08c      	b.n	8007936 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b02      	cmp	r3, #2
 8007826:	d002      	beq.n	800782e <USBD_SetConfig+0x3e>
 8007828:	2b03      	cmp	r3, #3
 800782a:	d029      	beq.n	8007880 <USBD_SetConfig+0x90>
 800782c:	e075      	b.n	800791a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800782e:	4b44      	ldr	r3, [pc, #272]	@ (8007940 <USBD_SetConfig+0x150>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d020      	beq.n	8007878 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007836:	4b42      	ldr	r3, [pc, #264]	@ (8007940 <USBD_SetConfig+0x150>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007840:	4b3f      	ldr	r3, [pc, #252]	@ (8007940 <USBD_SetConfig+0x150>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7fe ffe3 	bl	8006812 <USBD_SetClassConfig>
 800784c:	4603      	mov	r3, r0
 800784e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d008      	beq.n	8007868 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f962 	bl	8007b22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2202      	movs	r2, #2
 8007862:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007866:	e065      	b.n	8007934 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fa31 	bl	8007cd0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2203      	movs	r2, #3
 8007872:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007876:	e05d      	b.n	8007934 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fa29 	bl	8007cd0 <USBD_CtlSendStatus>
      break;
 800787e:	e059      	b.n	8007934 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007880:	4b2f      	ldr	r3, [pc, #188]	@ (8007940 <USBD_SetConfig+0x150>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d112      	bne.n	80078ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007890:	4b2b      	ldr	r3, [pc, #172]	@ (8007940 <USBD_SetConfig+0x150>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	461a      	mov	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800789a:	4b29      	ldr	r3, [pc, #164]	@ (8007940 <USBD_SetConfig+0x150>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7fe ffd2 	bl	800684a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fa12 	bl	8007cd0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078ac:	e042      	b.n	8007934 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80078ae:	4b24      	ldr	r3, [pc, #144]	@ (8007940 <USBD_SetConfig+0x150>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d02a      	beq.n	8007912 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7fe ffc0 	bl	800684a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80078ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007940 <USBD_SetConfig+0x150>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007940 <USBD_SetConfig+0x150>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7fe ff99 	bl	8006812 <USBD_SetClassConfig>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00f      	beq.n	800790a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f918 	bl	8007b22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7fe ffa5 	bl	800684a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007908:	e014      	b.n	8007934 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f9e0 	bl	8007cd0 <USBD_CtlSendStatus>
      break;
 8007910:	e010      	b.n	8007934 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f9dc 	bl	8007cd0 <USBD_CtlSendStatus>
      break;
 8007918:	e00c      	b.n	8007934 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f900 	bl	8007b22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007922:	4b07      	ldr	r3, [pc, #28]	@ (8007940 <USBD_SetConfig+0x150>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7fe ff8e 	bl	800684a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800792e:	2303      	movs	r3, #3
 8007930:	73fb      	strb	r3, [r7, #15]
      break;
 8007932:	bf00      	nop
  }

  return ret;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000218 	.word	0x20000218

08007944 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	88db      	ldrh	r3, [r3, #6]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d004      	beq.n	8007960 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f8e2 	bl	8007b22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800795e:	e023      	b.n	80079a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b02      	cmp	r3, #2
 800796a:	dc02      	bgt.n	8007972 <USBD_GetConfig+0x2e>
 800796c:	2b00      	cmp	r3, #0
 800796e:	dc03      	bgt.n	8007978 <USBD_GetConfig+0x34>
 8007970:	e015      	b.n	800799e <USBD_GetConfig+0x5a>
 8007972:	2b03      	cmp	r3, #3
 8007974:	d00b      	beq.n	800798e <USBD_GetConfig+0x4a>
 8007976:	e012      	b.n	800799e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3308      	adds	r3, #8
 8007982:	2201      	movs	r2, #1
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f948 	bl	8007c1c <USBD_CtlSendData>
        break;
 800798c:	e00c      	b.n	80079a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3304      	adds	r3, #4
 8007992:	2201      	movs	r2, #1
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f940 	bl	8007c1c <USBD_CtlSendData>
        break;
 800799c:	e004      	b.n	80079a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f8be 	bl	8007b22 <USBD_CtlError>
        break;
 80079a6:	bf00      	nop
}
 80079a8:	bf00      	nop
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	3b01      	subs	r3, #1
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d81e      	bhi.n	8007a06 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	88db      	ldrh	r3, [r3, #6]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d004      	beq.n	80079da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f8a5 	bl	8007b22 <USBD_CtlError>
        break;
 80079d8:	e01a      	b.n	8007a10 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d005      	beq.n	80079f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f043 0202 	orr.w	r2, r3, #2
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	330c      	adds	r3, #12
 80079fa:	2202      	movs	r2, #2
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f90c 	bl	8007c1c <USBD_CtlSendData>
      break;
 8007a04:	e004      	b.n	8007a10 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f88a 	bl	8007b22 <USBD_CtlError>
      break;
 8007a0e:	bf00      	nop
  }
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	885b      	ldrh	r3, [r3, #2]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d107      	bne.n	8007a3a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f94c 	bl	8007cd0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a38:	e013      	b.n	8007a62 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	885b      	ldrh	r3, [r3, #2]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d10b      	bne.n	8007a5a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	889b      	ldrh	r3, [r3, #4]
 8007a46:	0a1b      	lsrs	r3, r3, #8
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f93c 	bl	8007cd0 <USBD_CtlSendStatus>
}
 8007a58:	e003      	b.n	8007a62 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f860 	bl	8007b22 <USBD_CtlError>
}
 8007a62:	bf00      	nop
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d80b      	bhi.n	8007a9a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	885b      	ldrh	r3, [r3, #2]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d10c      	bne.n	8007aa4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f91c 	bl	8007cd0 <USBD_CtlSendStatus>
      }
      break;
 8007a98:	e004      	b.n	8007aa4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f840 	bl	8007b22 <USBD_CtlError>
      break;
 8007aa2:	e000      	b.n	8007aa6 <USBD_ClrFeature+0x3c>
      break;
 8007aa4:	bf00      	nop
  }
}
 8007aa6:	bf00      	nop
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	781a      	ldrb	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	781a      	ldrb	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f7ff fa40 	bl	8006f5e <SWAPBYTE>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3301      	adds	r3, #1
 8007af0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f7ff fa33 	bl	8006f5e <SWAPBYTE>
 8007af8:	4603      	mov	r3, r0
 8007afa:	461a      	mov	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f7ff fa26 	bl	8006f5e <SWAPBYTE>
 8007b12:	4603      	mov	r3, r0
 8007b14:	461a      	mov	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	80da      	strh	r2, [r3, #6]
}
 8007b1a:	bf00      	nop
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b082      	sub	sp, #8
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b2c:	2180      	movs	r1, #128	@ 0x80
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fcbc 	bl	80084ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b34:	2100      	movs	r1, #0
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fcb8 	bl	80084ac <USBD_LL_StallEP>
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d042      	beq.n	8007be0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007b5e:	6938      	ldr	r0, [r7, #16]
 8007b60:	f000 f842 	bl	8007be8 <USBD_GetLen>
 8007b64:	4603      	mov	r3, r0
 8007b66:	3301      	adds	r3, #1
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b6e:	d808      	bhi.n	8007b82 <USBD_GetString+0x3e>
 8007b70:	6938      	ldr	r0, [r7, #16]
 8007b72:	f000 f839 	bl	8007be8 <USBD_GetLen>
 8007b76:	4603      	mov	r3, r0
 8007b78:	3301      	adds	r3, #1
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	005b      	lsls	r3, r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	e001      	b.n	8007b86 <USBD_GetString+0x42>
 8007b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	4413      	add	r3, r2
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	7812      	ldrb	r2, [r2, #0]
 8007b94:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	2203      	movs	r2, #3
 8007ba4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007bac:	e013      	b.n	8007bd6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	7812      	ldrb	r2, [r2, #0]
 8007bb8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	613b      	str	r3, [r7, #16]
    idx++;
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	4413      	add	r3, r2
 8007bcc:	2200      	movs	r2, #0
 8007bce:	701a      	strb	r2, [r3, #0]
    idx++;
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1e7      	bne.n	8007bae <USBD_GetString+0x6a>
 8007bde:	e000      	b.n	8007be2 <USBD_GetString+0x9e>
    return;
 8007be0:	bf00      	nop
  }
}
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007bf8:	e005      	b.n	8007c06 <USBD_GetLen+0x1e>
  {
    len++;
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	3301      	adds	r3, #1
 8007c04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1f5      	bne.n	8007bfa <USBD_GetLen+0x12>
  }

  return len;
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	2100      	movs	r1, #0
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 fcbb 	bl	80085be <USBD_LL_Transmit>

  return USBD_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	2100      	movs	r1, #0
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 fcaa 	bl	80085be <USBD_LL_Transmit>

  return USBD_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2203      	movs	r2, #3
 8007c84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fcae 	bl	8008600 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 fc9d 	bl	8008600 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2204      	movs	r2, #4
 8007cdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fc69 	bl	80085be <USBD_LL_Transmit>

  return USBD_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b082      	sub	sp, #8
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2205      	movs	r2, #5
 8007d02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d06:	2300      	movs	r3, #0
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fc77 	bl	8008600 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d20:	2200      	movs	r2, #0
 8007d22:	4912      	ldr	r1, [pc, #72]	@ (8007d6c <MX_USB_DEVICE_Init+0x50>)
 8007d24:	4812      	ldr	r0, [pc, #72]	@ (8007d70 <MX_USB_DEVICE_Init+0x54>)
 8007d26:	f7fe fcf7 	bl	8006718 <USBD_Init>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d30:	f7f9 f890 	bl	8000e54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d34:	490f      	ldr	r1, [pc, #60]	@ (8007d74 <MX_USB_DEVICE_Init+0x58>)
 8007d36:	480e      	ldr	r0, [pc, #56]	@ (8007d70 <MX_USB_DEVICE_Init+0x54>)
 8007d38:	f7fe fd1e 	bl	8006778 <USBD_RegisterClass>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d42:	f7f9 f887 	bl	8000e54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d46:	490c      	ldr	r1, [pc, #48]	@ (8007d78 <MX_USB_DEVICE_Init+0x5c>)
 8007d48:	4809      	ldr	r0, [pc, #36]	@ (8007d70 <MX_USB_DEVICE_Init+0x54>)
 8007d4a:	f7fe fc55 	bl	80065f8 <USBD_CDC_RegisterInterface>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d54:	f7f9 f87e 	bl	8000e54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d58:	4805      	ldr	r0, [pc, #20]	@ (8007d70 <MX_USB_DEVICE_Init+0x54>)
 8007d5a:	f7fe fd43 	bl	80067e4 <USBD_Start>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d64:	f7f9 f876 	bl	8000e54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d68:	bf00      	nop
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	200000ac 	.word	0x200000ac
 8007d70:	2000021c 	.word	0x2000021c
 8007d74:	20000018 	.word	0x20000018
 8007d78:	20000098 	.word	0x20000098

08007d7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d80:	2200      	movs	r2, #0
 8007d82:	4905      	ldr	r1, [pc, #20]	@ (8007d98 <CDC_Init_FS+0x1c>)
 8007d84:	4805      	ldr	r0, [pc, #20]	@ (8007d9c <CDC_Init_FS+0x20>)
 8007d86:	f7fe fc51 	bl	800662c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d8a:	4905      	ldr	r1, [pc, #20]	@ (8007da0 <CDC_Init_FS+0x24>)
 8007d8c:	4803      	ldr	r0, [pc, #12]	@ (8007d9c <CDC_Init_FS+0x20>)
 8007d8e:	f7fe fc6f 	bl	8006670 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	20000cf8 	.word	0x20000cf8
 8007d9c:	2000021c 	.word	0x2000021c
 8007da0:	200004f8 	.word	0x200004f8

08007da4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007da4:	b480      	push	{r7}
 8007da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007da8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	6039      	str	r1, [r7, #0]
 8007dbe:	71fb      	strb	r3, [r7, #7]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007dc4:	79fb      	ldrb	r3, [r7, #7]
 8007dc6:	2b23      	cmp	r3, #35	@ 0x23
 8007dc8:	d84a      	bhi.n	8007e60 <CDC_Control_FS+0xac>
 8007dca:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd0 <CDC_Control_FS+0x1c>)
 8007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd0:	08007e61 	.word	0x08007e61
 8007dd4:	08007e61 	.word	0x08007e61
 8007dd8:	08007e61 	.word	0x08007e61
 8007ddc:	08007e61 	.word	0x08007e61
 8007de0:	08007e61 	.word	0x08007e61
 8007de4:	08007e61 	.word	0x08007e61
 8007de8:	08007e61 	.word	0x08007e61
 8007dec:	08007e61 	.word	0x08007e61
 8007df0:	08007e61 	.word	0x08007e61
 8007df4:	08007e61 	.word	0x08007e61
 8007df8:	08007e61 	.word	0x08007e61
 8007dfc:	08007e61 	.word	0x08007e61
 8007e00:	08007e61 	.word	0x08007e61
 8007e04:	08007e61 	.word	0x08007e61
 8007e08:	08007e61 	.word	0x08007e61
 8007e0c:	08007e61 	.word	0x08007e61
 8007e10:	08007e61 	.word	0x08007e61
 8007e14:	08007e61 	.word	0x08007e61
 8007e18:	08007e61 	.word	0x08007e61
 8007e1c:	08007e61 	.word	0x08007e61
 8007e20:	08007e61 	.word	0x08007e61
 8007e24:	08007e61 	.word	0x08007e61
 8007e28:	08007e61 	.word	0x08007e61
 8007e2c:	08007e61 	.word	0x08007e61
 8007e30:	08007e61 	.word	0x08007e61
 8007e34:	08007e61 	.word	0x08007e61
 8007e38:	08007e61 	.word	0x08007e61
 8007e3c:	08007e61 	.word	0x08007e61
 8007e40:	08007e61 	.word	0x08007e61
 8007e44:	08007e61 	.word	0x08007e61
 8007e48:	08007e61 	.word	0x08007e61
 8007e4c:	08007e61 	.word	0x08007e61
 8007e50:	08007e61 	.word	0x08007e61
 8007e54:	08007e61 	.word	0x08007e61
 8007e58:	08007e61 	.word	0x08007e61
 8007e5c:	08007e61 	.word	0x08007e61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e60:	bf00      	nop
  }

  return (USBD_OK);
 8007e62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	4805      	ldr	r0, [pc, #20]	@ (8007e94 <CDC_Receive_FS+0x24>)
 8007e7e:	f7fe fbf7 	bl	8006670 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e82:	4804      	ldr	r0, [pc, #16]	@ (8007e94 <CDC_Receive_FS+0x24>)
 8007e84:	f7fe fc12 	bl	80066ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	2000021c 	.word	0x2000021c

08007e98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	371c      	adds	r7, #28
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
	...

08007ebc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	6039      	str	r1, [r7, #0]
 8007ec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2212      	movs	r2, #18
 8007ecc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ece:	4b03      	ldr	r3, [pc, #12]	@ (8007edc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	200000c8 	.word	0x200000c8

08007ee0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	6039      	str	r1, [r7, #0]
 8007eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2204      	movs	r2, #4
 8007ef0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ef2:	4b03      	ldr	r3, [pc, #12]	@ (8007f00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	200000dc 	.word	0x200000dc

08007f04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	6039      	str	r1, [r7, #0]
 8007f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d105      	bne.n	8007f22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	4907      	ldr	r1, [pc, #28]	@ (8007f38 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f1a:	4808      	ldr	r0, [pc, #32]	@ (8007f3c <USBD_FS_ProductStrDescriptor+0x38>)
 8007f1c:	f7ff fe12 	bl	8007b44 <USBD_GetString>
 8007f20:	e004      	b.n	8007f2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	4904      	ldr	r1, [pc, #16]	@ (8007f38 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f26:	4805      	ldr	r0, [pc, #20]	@ (8007f3c <USBD_FS_ProductStrDescriptor+0x38>)
 8007f28:	f7ff fe0c 	bl	8007b44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f2c:	4b02      	ldr	r3, [pc, #8]	@ (8007f38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	200014f8 	.word	0x200014f8
 8007f3c:	0800877c 	.word	0x0800877c

08007f40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	4904      	ldr	r1, [pc, #16]	@ (8007f60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f50:	4804      	ldr	r0, [pc, #16]	@ (8007f64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f52:	f7ff fdf7 	bl	8007b44 <USBD_GetString>
  return USBD_StrDesc;
 8007f56:	4b02      	ldr	r3, [pc, #8]	@ (8007f60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	200014f8 	.word	0x200014f8
 8007f64:	08008794 	.word	0x08008794

08007f68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	6039      	str	r1, [r7, #0]
 8007f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	221a      	movs	r2, #26
 8007f78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f7a:	f000 f843 	bl	8008004 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f7e:	4b02      	ldr	r3, [pc, #8]	@ (8007f88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	200000e0 	.word	0x200000e0

08007f8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	4603      	mov	r3, r0
 8007f94:	6039      	str	r1, [r7, #0]
 8007f96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d105      	bne.n	8007faa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	4907      	ldr	r1, [pc, #28]	@ (8007fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fa2:	4808      	ldr	r0, [pc, #32]	@ (8007fc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fa4:	f7ff fdce 	bl	8007b44 <USBD_GetString>
 8007fa8:	e004      	b.n	8007fb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	4904      	ldr	r1, [pc, #16]	@ (8007fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fae:	4805      	ldr	r0, [pc, #20]	@ (8007fc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fb0:	f7ff fdc8 	bl	8007b44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fb4:	4b02      	ldr	r3, [pc, #8]	@ (8007fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	200014f8 	.word	0x200014f8
 8007fc4:	080087a8 	.word	0x080087a8

08007fc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	6039      	str	r1, [r7, #0]
 8007fd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d105      	bne.n	8007fe6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	4907      	ldr	r1, [pc, #28]	@ (8007ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fde:	4808      	ldr	r0, [pc, #32]	@ (8008000 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fe0:	f7ff fdb0 	bl	8007b44 <USBD_GetString>
 8007fe4:	e004      	b.n	8007ff0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	4904      	ldr	r1, [pc, #16]	@ (8007ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fea:	4805      	ldr	r0, [pc, #20]	@ (8008000 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fec:	f7ff fdaa 	bl	8007b44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ff0:	4b02      	ldr	r3, [pc, #8]	@ (8007ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	200014f8 	.word	0x200014f8
 8008000:	080087b4 	.word	0x080087b4

08008004 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800800a:	4b0f      	ldr	r3, [pc, #60]	@ (8008048 <Get_SerialNum+0x44>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008010:	4b0e      	ldr	r3, [pc, #56]	@ (800804c <Get_SerialNum+0x48>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008016:	4b0e      	ldr	r3, [pc, #56]	@ (8008050 <Get_SerialNum+0x4c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4413      	add	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d009      	beq.n	800803e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800802a:	2208      	movs	r2, #8
 800802c:	4909      	ldr	r1, [pc, #36]	@ (8008054 <Get_SerialNum+0x50>)
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f000 f814 	bl	800805c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008034:	2204      	movs	r2, #4
 8008036:	4908      	ldr	r1, [pc, #32]	@ (8008058 <Get_SerialNum+0x54>)
 8008038:	68b8      	ldr	r0, [r7, #8]
 800803a:	f000 f80f 	bl	800805c <IntToUnicode>
  }
}
 800803e:	bf00      	nop
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	1fff7a10 	.word	0x1fff7a10
 800804c:	1fff7a14 	.word	0x1fff7a14
 8008050:	1fff7a18 	.word	0x1fff7a18
 8008054:	200000e2 	.word	0x200000e2
 8008058:	200000f2 	.word	0x200000f2

0800805c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	4613      	mov	r3, r2
 8008068:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800806e:	2300      	movs	r3, #0
 8008070:	75fb      	strb	r3, [r7, #23]
 8008072:	e027      	b.n	80080c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	0f1b      	lsrs	r3, r3, #28
 8008078:	2b09      	cmp	r3, #9
 800807a:	d80b      	bhi.n	8008094 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	0f1b      	lsrs	r3, r3, #28
 8008080:	b2da      	uxtb	r2, r3
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	4619      	mov	r1, r3
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	440b      	add	r3, r1
 800808c:	3230      	adds	r2, #48	@ 0x30
 800808e:	b2d2      	uxtb	r2, r2
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	e00a      	b.n	80080aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	0f1b      	lsrs	r3, r3, #28
 8008098:	b2da      	uxtb	r2, r3
 800809a:	7dfb      	ldrb	r3, [r7, #23]
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	4619      	mov	r1, r3
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	440b      	add	r3, r1
 80080a4:	3237      	adds	r2, #55	@ 0x37
 80080a6:	b2d2      	uxtb	r2, r2
 80080a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	011b      	lsls	r3, r3, #4
 80080ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	3301      	adds	r3, #1
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	4413      	add	r3, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	3301      	adds	r3, #1
 80080c2:	75fb      	strb	r3, [r7, #23]
 80080c4:	7dfa      	ldrb	r2, [r7, #23]
 80080c6:	79fb      	ldrb	r3, [r7, #7]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d3d3      	bcc.n	8008074 <IntToUnicode+0x18>
  }
}
 80080cc:	bf00      	nop
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
	...

080080dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b08a      	sub	sp, #40	@ 0x28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080e4:	f107 0314 	add.w	r3, r7, #20
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	605a      	str	r2, [r3, #4]
 80080ee:	609a      	str	r2, [r3, #8]
 80080f0:	60da      	str	r2, [r3, #12]
 80080f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080fc:	d13a      	bne.n	8008174 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080fe:	2300      	movs	r3, #0
 8008100:	613b      	str	r3, [r7, #16]
 8008102:	4b1e      	ldr	r3, [pc, #120]	@ (800817c <HAL_PCD_MspInit+0xa0>)
 8008104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008106:	4a1d      	ldr	r2, [pc, #116]	@ (800817c <HAL_PCD_MspInit+0xa0>)
 8008108:	f043 0301 	orr.w	r3, r3, #1
 800810c:	6313      	str	r3, [r2, #48]	@ 0x30
 800810e:	4b1b      	ldr	r3, [pc, #108]	@ (800817c <HAL_PCD_MspInit+0xa0>)
 8008110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800811a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800811e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008120:	2302      	movs	r3, #2
 8008122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008124:	2300      	movs	r3, #0
 8008126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008128:	2303      	movs	r3, #3
 800812a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800812c:	230a      	movs	r3, #10
 800812e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008130:	f107 0314 	add.w	r3, r7, #20
 8008134:	4619      	mov	r1, r3
 8008136:	4812      	ldr	r0, [pc, #72]	@ (8008180 <HAL_PCD_MspInit+0xa4>)
 8008138:	f7f9 f9f8 	bl	800152c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800813c:	4b0f      	ldr	r3, [pc, #60]	@ (800817c <HAL_PCD_MspInit+0xa0>)
 800813e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008140:	4a0e      	ldr	r2, [pc, #56]	@ (800817c <HAL_PCD_MspInit+0xa0>)
 8008142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008146:	6353      	str	r3, [r2, #52]	@ 0x34
 8008148:	2300      	movs	r3, #0
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	4b0b      	ldr	r3, [pc, #44]	@ (800817c <HAL_PCD_MspInit+0xa0>)
 800814e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008150:	4a0a      	ldr	r2, [pc, #40]	@ (800817c <HAL_PCD_MspInit+0xa0>)
 8008152:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008156:	6453      	str	r3, [r2, #68]	@ 0x44
 8008158:	4b08      	ldr	r3, [pc, #32]	@ (800817c <HAL_PCD_MspInit+0xa0>)
 800815a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800815c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008164:	2200      	movs	r2, #0
 8008166:	2100      	movs	r1, #0
 8008168:	2043      	movs	r0, #67	@ 0x43
 800816a:	f7f9 f916 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800816e:	2043      	movs	r0, #67	@ 0x43
 8008170:	f7f9 f92f 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008174:	bf00      	nop
 8008176:	3728      	adds	r7, #40	@ 0x28
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	40023800 	.word	0x40023800
 8008180:	40020000 	.word	0x40020000

08008184 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008198:	4619      	mov	r1, r3
 800819a:	4610      	mov	r0, r2
 800819c:	f7fe fb6f 	bl	800687e <USBD_LL_SetupStage>
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80081ba:	78fa      	ldrb	r2, [r7, #3]
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	4613      	mov	r3, r2
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	4413      	add	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	4619      	mov	r1, r3
 80081d2:	f7fe fba9 	bl	8006928 <USBD_LL_DataOutStage>
}
 80081d6:	bf00      	nop
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	460b      	mov	r3, r1
 80081e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80081f0:	78fa      	ldrb	r2, [r7, #3]
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	4613      	mov	r3, r2
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	440b      	add	r3, r1
 80081fe:	3320      	adds	r3, #32
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	78fb      	ldrb	r3, [r7, #3]
 8008204:	4619      	mov	r1, r3
 8008206:	f7fe fc42 	bl	8006a8e <USBD_LL_DataInStage>
}
 800820a:	bf00      	nop
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008220:	4618      	mov	r0, r3
 8008222:	f7fe fd7c 	bl	8006d1e <USBD_LL_SOF>
}
 8008226:	bf00      	nop
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008236:	2301      	movs	r3, #1
 8008238:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	79db      	ldrb	r3, [r3, #7]
 800823e:	2b02      	cmp	r3, #2
 8008240:	d001      	beq.n	8008246 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008242:	f7f8 fe07 	bl	8000e54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800824c:	7bfa      	ldrb	r2, [r7, #15]
 800824e:	4611      	mov	r1, r2
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe fd20 	bl	8006c96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800825c:	4618      	mov	r0, r3
 800825e:	f7fe fcc8 	bl	8006bf2 <USBD_LL_Reset>
}
 8008262:	bf00      	nop
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800827a:	4618      	mov	r0, r3
 800827c:	f7fe fd1b 	bl	8006cb6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	6812      	ldr	r2, [r2, #0]
 800828e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008292:	f043 0301 	orr.w	r3, r3, #1
 8008296:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	7adb      	ldrb	r3, [r3, #11]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d005      	beq.n	80082ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082a0:	4b04      	ldr	r3, [pc, #16]	@ (80082b4 <HAL_PCD_SuspendCallback+0x48>)
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	4a03      	ldr	r2, [pc, #12]	@ (80082b4 <HAL_PCD_SuspendCallback+0x48>)
 80082a6:	f043 0306 	orr.w	r3, r3, #6
 80082aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082ac:	bf00      	nop
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	e000ed00 	.word	0xe000ed00

080082b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe fd11 	bl	8006cee <USBD_LL_Resume>
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082e6:	78fa      	ldrb	r2, [r7, #3]
 80082e8:	4611      	mov	r1, r2
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe fd69 	bl	8006dc2 <USBD_LL_IsoOUTIncomplete>
}
 80082f0:	bf00      	nop
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800830a:	78fa      	ldrb	r2, [r7, #3]
 800830c:	4611      	mov	r1, r2
 800830e:	4618      	mov	r0, r3
 8008310:	f7fe fd25 	bl	8006d5e <USBD_LL_IsoINIncomplete>
}
 8008314:	bf00      	nop
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe fd7b 	bl	8006e26 <USBD_LL_DevConnected>
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe fd78 	bl	8006e3c <USBD_LL_DevDisconnected>
}
 800834c:	bf00      	nop
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d13c      	bne.n	80083de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008364:	4a20      	ldr	r2, [pc, #128]	@ (80083e8 <USBD_LL_Init+0x94>)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a1e      	ldr	r2, [pc, #120]	@ (80083e8 <USBD_LL_Init+0x94>)
 8008370:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008374:	4b1c      	ldr	r3, [pc, #112]	@ (80083e8 <USBD_LL_Init+0x94>)
 8008376:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800837a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800837c:	4b1a      	ldr	r3, [pc, #104]	@ (80083e8 <USBD_LL_Init+0x94>)
 800837e:	2204      	movs	r2, #4
 8008380:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008382:	4b19      	ldr	r3, [pc, #100]	@ (80083e8 <USBD_LL_Init+0x94>)
 8008384:	2202      	movs	r2, #2
 8008386:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008388:	4b17      	ldr	r3, [pc, #92]	@ (80083e8 <USBD_LL_Init+0x94>)
 800838a:	2200      	movs	r2, #0
 800838c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800838e:	4b16      	ldr	r3, [pc, #88]	@ (80083e8 <USBD_LL_Init+0x94>)
 8008390:	2202      	movs	r2, #2
 8008392:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008394:	4b14      	ldr	r3, [pc, #80]	@ (80083e8 <USBD_LL_Init+0x94>)
 8008396:	2200      	movs	r2, #0
 8008398:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800839a:	4b13      	ldr	r3, [pc, #76]	@ (80083e8 <USBD_LL_Init+0x94>)
 800839c:	2200      	movs	r2, #0
 800839e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80083a0:	4b11      	ldr	r3, [pc, #68]	@ (80083e8 <USBD_LL_Init+0x94>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80083a6:	4b10      	ldr	r3, [pc, #64]	@ (80083e8 <USBD_LL_Init+0x94>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083ac:	4b0e      	ldr	r3, [pc, #56]	@ (80083e8 <USBD_LL_Init+0x94>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083b2:	480d      	ldr	r0, [pc, #52]	@ (80083e8 <USBD_LL_Init+0x94>)
 80083b4:	f7f9 fa3e 	bl	8001834 <HAL_PCD_Init>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80083be:	f7f8 fd49 	bl	8000e54 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80083c2:	2180      	movs	r1, #128	@ 0x80
 80083c4:	4808      	ldr	r0, [pc, #32]	@ (80083e8 <USBD_LL_Init+0x94>)
 80083c6:	f7fa fc6a 	bl	8002c9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80083ca:	2240      	movs	r2, #64	@ 0x40
 80083cc:	2100      	movs	r1, #0
 80083ce:	4806      	ldr	r0, [pc, #24]	@ (80083e8 <USBD_LL_Init+0x94>)
 80083d0:	f7fa fc1e 	bl	8002c10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083d4:	2280      	movs	r2, #128	@ 0x80
 80083d6:	2101      	movs	r1, #1
 80083d8:	4803      	ldr	r0, [pc, #12]	@ (80083e8 <USBD_LL_Init+0x94>)
 80083da:	f7fa fc19 	bl	8002c10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	200016f8 	.word	0x200016f8

080083ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008402:	4618      	mov	r0, r3
 8008404:	f7f9 fb25 	bl	8001a52 <HAL_PCD_Start>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	4618      	mov	r0, r3
 8008410:	f000 f942 	bl	8008698 <USBD_Get_USB_Status>
 8008414:	4603      	mov	r3, r0
 8008416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008418:	7bbb      	ldrb	r3, [r7, #14]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	4608      	mov	r0, r1
 800842c:	4611      	mov	r1, r2
 800842e:	461a      	mov	r2, r3
 8008430:	4603      	mov	r3, r0
 8008432:	70fb      	strb	r3, [r7, #3]
 8008434:	460b      	mov	r3, r1
 8008436:	70bb      	strb	r3, [r7, #2]
 8008438:	4613      	mov	r3, r2
 800843a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800844a:	78bb      	ldrb	r3, [r7, #2]
 800844c:	883a      	ldrh	r2, [r7, #0]
 800844e:	78f9      	ldrb	r1, [r7, #3]
 8008450:	f7f9 fff9 	bl	8002446 <HAL_PCD_EP_Open>
 8008454:	4603      	mov	r3, r0
 8008456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f91c 	bl	8008698 <USBD_Get_USB_Status>
 8008460:	4603      	mov	r3, r0
 8008462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008464:	7bbb      	ldrb	r3, [r7, #14]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	460b      	mov	r3, r1
 8008478:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008488:	78fa      	ldrb	r2, [r7, #3]
 800848a:	4611      	mov	r1, r2
 800848c:	4618      	mov	r0, r3
 800848e:	f7fa f844 	bl	800251a <HAL_PCD_EP_Close>
 8008492:	4603      	mov	r3, r0
 8008494:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008496:	7bfb      	ldrb	r3, [r7, #15]
 8008498:	4618      	mov	r0, r3
 800849a:	f000 f8fd 	bl	8008698 <USBD_Get_USB_Status>
 800849e:	4603      	mov	r3, r0
 80084a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084c6:	78fa      	ldrb	r2, [r7, #3]
 80084c8:	4611      	mov	r1, r2
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fa f8fc 	bl	80026c8 <HAL_PCD_EP_SetStall>
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 f8de 	bl	8008698 <USBD_Get_USB_Status>
 80084dc:	4603      	mov	r3, r0
 80084de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b084      	sub	sp, #16
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	460b      	mov	r3, r1
 80084f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008504:	78fa      	ldrb	r2, [r7, #3]
 8008506:	4611      	mov	r1, r2
 8008508:	4618      	mov	r0, r3
 800850a:	f7fa f940 	bl	800278e <HAL_PCD_EP_ClrStall>
 800850e:	4603      	mov	r3, r0
 8008510:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	4618      	mov	r0, r3
 8008516:	f000 f8bf 	bl	8008698 <USBD_Get_USB_Status>
 800851a:	4603      	mov	r3, r0
 800851c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800851e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800853a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800853c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008540:	2b00      	cmp	r3, #0
 8008542:	da0b      	bge.n	800855c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008544:	78fb      	ldrb	r3, [r7, #3]
 8008546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800854a:	68f9      	ldr	r1, [r7, #12]
 800854c:	4613      	mov	r3, r2
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	440b      	add	r3, r1
 8008556:	3316      	adds	r3, #22
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	e00b      	b.n	8008574 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800855c:	78fb      	ldrb	r3, [r7, #3]
 800855e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008562:	68f9      	ldr	r1, [r7, #12]
 8008564:	4613      	mov	r3, r2
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	440b      	add	r3, r1
 800856e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008572:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800859a:	78fa      	ldrb	r2, [r7, #3]
 800859c:	4611      	mov	r1, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f7f9 ff2d 	bl	80023fe <HAL_PCD_SetAddress>
 80085a4:	4603      	mov	r3, r0
 80085a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f874 	bl	8008698 <USBD_Get_USB_Status>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b086      	sub	sp, #24
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	60f8      	str	r0, [r7, #12]
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	603b      	str	r3, [r7, #0]
 80085ca:	460b      	mov	r3, r1
 80085cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085dc:	7af9      	ldrb	r1, [r7, #11]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	f7fa f837 	bl	8002654 <HAL_PCD_EP_Transmit>
 80085e6:	4603      	mov	r3, r0
 80085e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 f853 	bl	8008698 <USBD_Get_USB_Status>
 80085f2:	4603      	mov	r3, r0
 80085f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3718      	adds	r7, #24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	607a      	str	r2, [r7, #4]
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	460b      	mov	r3, r1
 800860e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800861e:	7af9      	ldrb	r1, [r7, #11]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	f7f9 ffc3 	bl	80025ae <HAL_PCD_EP_Receive>
 8008628:	4603      	mov	r3, r0
 800862a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	4618      	mov	r0, r3
 8008630:	f000 f832 	bl	8008698 <USBD_Get_USB_Status>
 8008634:	4603      	mov	r3, r0
 8008636:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008638:	7dbb      	ldrb	r3, [r7, #22]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b082      	sub	sp, #8
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	460b      	mov	r3, r1
 800864c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008654:	78fa      	ldrb	r2, [r7, #3]
 8008656:	4611      	mov	r1, r2
 8008658:	4618      	mov	r0, r3
 800865a:	f7f9 ffe3 	bl	8002624 <HAL_PCD_EP_GetRxCount>
 800865e:	4603      	mov	r3, r0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008670:	4b03      	ldr	r3, [pc, #12]	@ (8008680 <USBD_static_malloc+0x18>)
}
 8008672:	4618      	mov	r0, r3
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	20001bdc 	.word	0x20001bdc

08008684 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]

}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d817      	bhi.n	80086dc <USBD_Get_USB_Status+0x44>
 80086ac:	a201      	add	r2, pc, #4	@ (adr r2, 80086b4 <USBD_Get_USB_Status+0x1c>)
 80086ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b2:	bf00      	nop
 80086b4:	080086c5 	.word	0x080086c5
 80086b8:	080086cb 	.word	0x080086cb
 80086bc:	080086d1 	.word	0x080086d1
 80086c0:	080086d7 	.word	0x080086d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	73fb      	strb	r3, [r7, #15]
    break;
 80086c8:	e00b      	b.n	80086e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086ca:	2303      	movs	r3, #3
 80086cc:	73fb      	strb	r3, [r7, #15]
    break;
 80086ce:	e008      	b.n	80086e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086d0:	2301      	movs	r3, #1
 80086d2:	73fb      	strb	r3, [r7, #15]
    break;
 80086d4:	e005      	b.n	80086e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086d6:	2303      	movs	r3, #3
 80086d8:	73fb      	strb	r3, [r7, #15]
    break;
 80086da:	e002      	b.n	80086e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80086dc:	2303      	movs	r3, #3
 80086de:	73fb      	strb	r3, [r7, #15]
    break;
 80086e0:	bf00      	nop
  }
  return usb_status;
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <memset>:
 80086f0:	4402      	add	r2, r0
 80086f2:	4603      	mov	r3, r0
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d100      	bne.n	80086fa <memset+0xa>
 80086f8:	4770      	bx	lr
 80086fa:	f803 1b01 	strb.w	r1, [r3], #1
 80086fe:	e7f9      	b.n	80086f4 <memset+0x4>

08008700 <__libc_init_array>:
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	4d0d      	ldr	r5, [pc, #52]	@ (8008738 <__libc_init_array+0x38>)
 8008704:	4c0d      	ldr	r4, [pc, #52]	@ (800873c <__libc_init_array+0x3c>)
 8008706:	1b64      	subs	r4, r4, r5
 8008708:	10a4      	asrs	r4, r4, #2
 800870a:	2600      	movs	r6, #0
 800870c:	42a6      	cmp	r6, r4
 800870e:	d109      	bne.n	8008724 <__libc_init_array+0x24>
 8008710:	4d0b      	ldr	r5, [pc, #44]	@ (8008740 <__libc_init_array+0x40>)
 8008712:	4c0c      	ldr	r4, [pc, #48]	@ (8008744 <__libc_init_array+0x44>)
 8008714:	f000 f826 	bl	8008764 <_init>
 8008718:	1b64      	subs	r4, r4, r5
 800871a:	10a4      	asrs	r4, r4, #2
 800871c:	2600      	movs	r6, #0
 800871e:	42a6      	cmp	r6, r4
 8008720:	d105      	bne.n	800872e <__libc_init_array+0x2e>
 8008722:	bd70      	pop	{r4, r5, r6, pc}
 8008724:	f855 3b04 	ldr.w	r3, [r5], #4
 8008728:	4798      	blx	r3
 800872a:	3601      	adds	r6, #1
 800872c:	e7ee      	b.n	800870c <__libc_init_array+0xc>
 800872e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008732:	4798      	blx	r3
 8008734:	3601      	adds	r6, #1
 8008736:	e7f2      	b.n	800871e <__libc_init_array+0x1e>
 8008738:	080087e4 	.word	0x080087e4
 800873c:	080087e4 	.word	0x080087e4
 8008740:	080087e4 	.word	0x080087e4
 8008744:	080087e8 	.word	0x080087e8

08008748 <memcpy>:
 8008748:	440a      	add	r2, r1
 800874a:	4291      	cmp	r1, r2
 800874c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008750:	d100      	bne.n	8008754 <memcpy+0xc>
 8008752:	4770      	bx	lr
 8008754:	b510      	push	{r4, lr}
 8008756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800875a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800875e:	4291      	cmp	r1, r2
 8008760:	d1f9      	bne.n	8008756 <memcpy+0xe>
 8008762:	bd10      	pop	{r4, pc}

08008764 <_init>:
 8008764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008766:	bf00      	nop
 8008768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876a:	bc08      	pop	{r3}
 800876c:	469e      	mov	lr, r3
 800876e:	4770      	bx	lr

08008770 <_fini>:
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008772:	bf00      	nop
 8008774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008776:	bc08      	pop	{r3}
 8008778:	469e      	mov	lr, r3
 800877a:	4770      	bx	lr
