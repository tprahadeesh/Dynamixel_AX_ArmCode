
Rcup_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800d7a0  0800d7a0  0000e7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcd8  0800dcd8  0000f2d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dcd8  0800dcd8  0000ecd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dce0  0800dce0  0000f2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dce0  0800dce0  0000ece0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dce4  0800dce4  0000ece4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  0800dce8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000267c  200002d0  0800dfb8  0000f2d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000294c  0800dfb8  0000f94c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fcb  00000000  00000000  0000f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e93  00000000  00000000  000272cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  0002b160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001044  00000000  00000000  0002c660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a80e  00000000  00000000  0002d6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ab1  00000000  00000000  00047eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f932  00000000  00000000  00061963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f34  00000000  00000000  000f12d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f820c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d0 	.word	0x200002d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d784 	.word	0x0800d784

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	0800d784 	.word	0x0800d784

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b9a0 	b.w	8000f44 <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f83c 	bl	8000c88 <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2lz>:
 8000c1c:	b538      	push	{r3, r4, r5, lr}
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2300      	movs	r3, #0
 8000c22:	4604      	mov	r4, r0
 8000c24:	460d      	mov	r5, r1
 8000c26:	f7ff ff71 	bl	8000b0c <__aeabi_dcmplt>
 8000c2a:	b928      	cbnz	r0, 8000c38 <__aeabi_d2lz+0x1c>
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c34:	f000 b80a 	b.w	8000c4c <__aeabi_d2ulz>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c3e:	f000 f805 	bl	8000c4c <__aeabi_d2ulz>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	bd38      	pop	{r3, r4, r5, pc}
 8000c4a:	bf00      	nop

08000c4c <__aeabi_d2ulz>:
 8000c4c:	b5d0      	push	{r4, r6, r7, lr}
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <__aeabi_d2ulz+0x34>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	4606      	mov	r6, r0
 8000c54:	460f      	mov	r7, r1
 8000c56:	f7ff fce7 	bl	8000628 <__aeabi_dmul>
 8000c5a:	f7ff ffa7 	bl	8000bac <__aeabi_d2uiz>
 8000c5e:	4604      	mov	r4, r0
 8000c60:	f7ff fc68 	bl	8000534 <__aeabi_ui2d>
 8000c64:	4b07      	ldr	r3, [pc, #28]	@ (8000c84 <__aeabi_d2ulz+0x38>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f7ff fcde 	bl	8000628 <__aeabi_dmul>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	4630      	mov	r0, r6
 8000c72:	4639      	mov	r1, r7
 8000c74:	f7ff fb20 	bl	80002b8 <__aeabi_dsub>
 8000c78:	f7ff ff98 	bl	8000bac <__aeabi_d2uiz>
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c80:	3df00000 	.word	0x3df00000
 8000c84:	41f00000 	.word	0x41f00000

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <AxelFlow_servo_init>:

Instruction_Packet packet;

Servo AxelFlow_servo_init(uint8_t id, UART_HandleTypeDef *huartx,
		bool jointMode)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b098      	sub	sp, #96	@ 0x60
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	461a      	mov	r2, r3
 8000f54:	460b      	mov	r3, r1
 8000f56:	72fb      	strb	r3, [r7, #11]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	72bb      	strb	r3, [r7, #10]
	Servo servo;
	servo.id = id;
 8000f5c:	7afb      	ldrb	r3, [r7, #11]
 8000f5e:	743b      	strb	r3, [r7, #16]
	servo.huartx = *huartx;
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4611      	mov	r1, r2
 8000f68:	2248      	movs	r2, #72	@ 0x48
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00a fd01 	bl	800b972 <memcpy>
	servo.jointMode = jointMode;
 8000f70:	7abb      	ldrb	r3, [r7, #10]
 8000f72:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	return servo;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	2250      	movs	r2, #80	@ 0x50
 8000f80:	4619      	mov	r1, r3
 8000f82:	f00a fcf6 	bl	800b972 <memcpy>
}
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	3760      	adds	r7, #96	@ 0x60
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <degreesToData>:
	else
		return 0;
}

uint8_t* degreesToData(float degrees)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint8_t data[2];
	uint16_t degrees_Hex = (uint16_t) (degrees * 3.41f); // 1023/300
 8000f9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000fec <degreesToData+0x5c>
 8000fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000faa:	ee17 3a90 	vmov	r3, s15
 8000fae:	81fb      	strh	r3, [r7, #14]
	data[0] = degrees_Hex;
 8000fb0:	89fb      	ldrh	r3, [r7, #14]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <degreesToData+0x60>)
 8000fb6:	701a      	strb	r2, [r3, #0]
	data[1] = degrees_Hex >> 8;
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <degreesToData+0x60>)
 8000fc2:	705a      	strb	r2, [r3, #1]
	if (degrees == 0.0)
 8000fc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd0:	d105      	bne.n	8000fde <degreesToData+0x4e>
	{
		data[0] = 0;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <degreesToData+0x60>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
		data[1] = 0;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <degreesToData+0x60>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	705a      	strb	r2, [r3, #1]
	}

	return data;
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <degreesToData+0x60>)
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	405a3d71 	.word	0x405a3d71
 8000ff0:	200002fc 	.word	0x200002fc

08000ff4 <setPosition>:
	return AxelFlow_fire(&servo.huartx, packet);
}


Status_Packet setPosition(float angle, Servo servo)
{
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff8:	b087      	sub	sp, #28
 8000ffa:	af02      	add	r7, sp, #8
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	ed87 0a00 	vstr	s0, [r7]
 8001002:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t *data = degreesToData(angle);
 800100a:	ed97 0a00 	vldr	s0, [r7]
 800100e:	f7ff ffbf 	bl	8000f90 <degreesToData>
 8001012:	60f8      	str	r0, [r7, #12]
	uint8_t param_array[3] = { RAM_GOAL_POSITION_L, data[0], data[1] };
 8001014:	231e      	movs	r3, #30
 8001016:	723b      	strb	r3, [r7, #8]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	727b      	strb	r3, [r7, #9]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	72bb      	strb	r3, [r7, #10]
	packet.Packet_ID = servo.id;
 8001024:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <setPosition+0x7c>)
 800102a:	709a      	strb	r2, [r3, #2]
	packet.Length = sizeof(param_array) + 2;
 800102c:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <setPosition+0x7c>)
 800102e:	2205      	movs	r2, #5
 8001030:	70da      	strb	r2, [r3, #3]
	packet.Instruction = COMMAND_WRITE_DATA;
 8001032:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <setPosition+0x7c>)
 8001034:	2203      	movs	r2, #3
 8001036:	711a      	strb	r2, [r3, #4]
	packet.Param = param_array;
 8001038:	4a0d      	ldr	r2, [pc, #52]	@ (8001070 <setPosition+0x7c>)
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	6093      	str	r3, [r2, #8]
	return AxelFlow_fire(&servo.huartx, packet);
 8001040:	687c      	ldr	r4, [r7, #4]
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <setPosition+0x7c>)
 8001044:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001048:	1d15      	adds	r5, r2, #4
 800104a:	466e      	mov	r6, sp
 800104c:	f103 0208 	add.w	r2, r3, #8
 8001050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001054:	e886 0003 	stmia.w	r6, {r0, r1}
 8001058:	cb0c      	ldmia	r3, {r2, r3}
 800105a:	4629      	mov	r1, r5
 800105c:	4620      	mov	r0, r4
 800105e:	f000 f9bb 	bl	80013d8 <AxelFlow_fire>
}
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800106c:	b004      	add	sp, #16
 800106e:	4770      	bx	lr
 8001070:	200002ec 	.word	0x200002ec

08001074 <setSpeed>:
}



Status_Packet setSpeed(float speed, Servo servo)
{
 8001074:	b084      	sub	sp, #16
 8001076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001078:	b087      	sub	sp, #28
 800107a:	af02      	add	r7, sp, #8
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	ed87 0a00 	vstr	s0, [r7]
 8001082:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t *data;
	if (servo.jointMode)
 800108a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800108e:	2b00      	cmp	r3, #0
 8001090:	d017      	beq.n	80010c2 <setSpeed+0x4e>
	{
		data = (speed < 99) ? degreesToData(speed * 3) : 0; // 1023 / (100*3.41)
 8001092:	edd7 7a00 	vldr	s15, [r7]
 8001096:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800119c <setSpeed+0x128>
 800109a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a2:	d50b      	bpl.n	80010bc <setSpeed+0x48>
 80010a4:	edd7 7a00 	vldr	s15, [r7]
 80010a8:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80010ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	f7ff ff6c 	bl	8000f90 <degreesToData>
 80010b8:	4603      	mov	r3, r0
 80010ba:	e000      	b.n	80010be <setSpeed+0x4a>
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e03d      	b.n	800113e <setSpeed+0xca>
	}
	else // TODO; Add switch
	{
		speed *= CLOCKWISE_SWITCH;
		data = (speed >= 0 && speed <= 100) ?
				degreesToData(speed * 3.0) :
 80010c2:	edd7 7a00 	vldr	s15, [r7]
 80010c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	db14      	blt.n	80010fa <setSpeed+0x86>
		data = (speed >= 0 && speed <= 100) ?
 80010d0:	edd7 7a00 	vldr	s15, [r7]
 80010d4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80011a0 <setSpeed+0x12c>
 80010d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e0:	d80b      	bhi.n	80010fa <setSpeed+0x86>
				degreesToData(speed * 3.0) :
 80010e2:	edd7 7a00 	vldr	s15, [r7]
 80010e6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80010ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ee:	eeb0 0a67 	vmov.f32	s0, s15
 80010f2:	f7ff ff4d 	bl	8000f90 <degreesToData>
 80010f6:	4603      	mov	r3, r0
 80010f8:	e020      	b.n	800113c <setSpeed+0xc8>
				((speed < 0 && speed >= -100) ?
						degreesToData((-speed + 100) * 3) : 0);
 80010fa:	edd7 7a00 	vldr	s15, [r7]
 80010fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	d518      	bpl.n	800113a <setSpeed+0xc6>
				((speed < 0 && speed >= -100) ?
 8001108:	edd7 7a00 	vldr	s15, [r7]
 800110c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80011a4 <setSpeed+0x130>
 8001110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001118:	db0f      	blt.n	800113a <setSpeed+0xc6>
						degreesToData((-speed + 100) * 3) : 0);
 800111a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80011a0 <setSpeed+0x12c>
 800111e:	edd7 7a00 	vldr	s15, [r7]
 8001122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001126:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800112a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112e:	eeb0 0a67 	vmov.f32	s0, s15
 8001132:	f7ff ff2d 	bl	8000f90 <degreesToData>
 8001136:	4603      	mov	r3, r0
 8001138:	e000      	b.n	800113c <setSpeed+0xc8>
 800113a:	2300      	movs	r3, #0
		data = (speed >= 0 && speed <= 100) ?
 800113c:	60fb      	str	r3, [r7, #12]
	}
	uint8_t param_array[3] = { RAM_GOAL_SPEED_L, data[0], data[1] };
 800113e:	2320      	movs	r3, #32
 8001140:	723b      	strb	r3, [r7, #8]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	727b      	strb	r3, [r7, #9]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	785b      	ldrb	r3, [r3, #1]
 800114c:	72bb      	strb	r3, [r7, #10]
	packet.Packet_ID = servo.id;
 800114e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <setSpeed+0x134>)
 8001154:	709a      	strb	r2, [r3, #2]
	packet.Length = sizeof(param_array) + 2;
 8001156:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <setSpeed+0x134>)
 8001158:	2205      	movs	r2, #5
 800115a:	70da      	strb	r2, [r3, #3]
	packet.Instruction = COMMAND_WRITE_DATA;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <setSpeed+0x134>)
 800115e:	2203      	movs	r2, #3
 8001160:	711a      	strb	r2, [r3, #4]
	packet.Param = param_array;
 8001162:	4a11      	ldr	r2, [pc, #68]	@ (80011a8 <setSpeed+0x134>)
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	6093      	str	r3, [r2, #8]
	return AxelFlow_fire(&servo.huartx, packet);
 800116a:	687c      	ldr	r4, [r7, #4]
 800116c:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <setSpeed+0x134>)
 800116e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001172:	1d15      	adds	r5, r2, #4
 8001174:	466e      	mov	r6, sp
 8001176:	f103 0208 	add.w	r2, r3, #8
 800117a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800117e:	e886 0003 	stmia.w	r6, {r0, r1}
 8001182:	cb0c      	ldmia	r3, {r2, r3}
 8001184:	4629      	mov	r1, r5
 8001186:	4620      	mov	r0, r4
 8001188:	f000 f926 	bl	80013d8 <AxelFlow_fire>
}
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001196:	b004      	add	sp, #16
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	42c60000 	.word	0x42c60000
 80011a0:	42c80000 	.word	0x42c80000
 80011a4:	c2c80000 	.word	0xc2c80000
 80011a8:	200002ec 	.word	0x200002ec

080011ac <AxelFlow_debug_init>:
#include "AxelFlow_Debug.h"

UART_HandleTypeDef huartx;

void AxelFlow_debug_init(UART_HandleTypeDef *huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	huartx = *huart;
 80011b4:	4a05      	ldr	r2, [pc, #20]	@ (80011cc <AxelFlow_debug_init+0x20>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	2348      	movs	r3, #72	@ 0x48
 80011be:	461a      	mov	r2, r3
 80011c0:	f00a fbd7 	bl	800b972 <memcpy>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000300 	.word	0x20000300

080011d0 <AxelFlow_UART_Init>:
//#define DEBUG_PRINT_COMMUNICATION
uint8_t info_array[INSTRUCTION_FRAME_BUFFER];

UART_HandleTypeDef AxelFlow_UART_Init(USART_TypeDef *UART_ID,
		uint32_t baud_rate)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b096      	sub	sp, #88	@ 0x58
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
	UART_HandleTypeDef huartx;
	huartx.Instance = UART_ID;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	613b      	str	r3, [r7, #16]
	huartx.Init.BaudRate = baud_rate;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	617b      	str	r3, [r7, #20]
	huartx.Init.WordLength = UART_WORDLENGTH_8B;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
	huartx.Init.StopBits = UART_STOPBITS_1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
	huartx.Init.Parity = UART_PARITY_NONE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
	huartx.Init.Mode = UART_MODE_TX_RX;
 80011f0:	230c      	movs	r3, #12
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
	huartx.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	huartx.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
//	huartx.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	HAL_HalfDuplex_Init(&huartx);
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4618      	mov	r0, r3
 8001202:	f004 f9eb 	bl	80055dc <HAL_HalfDuplex_Init>
	return huartx;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4618      	mov	r0, r3
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	2248      	movs	r2, #72	@ 0x48
 8001210:	4619      	mov	r1, r3
 8001212:	f00a fbae 	bl	800b972 <memcpy>
}
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	3758      	adds	r7, #88	@ 0x58
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <getChecksum>:

uint8_t getChecksum(Instruction_Packet packet)
{
 800121e:	b490      	push	{r4, r7}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	463c      	mov	r4, r7
 8001226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t sum = packet.Packet_ID + packet.Length + packet.Instruction;
 800122a:	78ba      	ldrb	r2, [r7, #2]
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	4413      	add	r3, r2
 8001230:	b2da      	uxtb	r2, r3
 8001232:	793b      	ldrb	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	75fb      	strb	r3, [r7, #23]

	for (uint8_t i = 0; i < packet.Length - 2; i++)
 8001238:	2300      	movs	r3, #0
 800123a:	75bb      	strb	r3, [r7, #22]
 800123c:	e009      	b.n	8001252 <getChecksum+0x34>
	{
		sum += packet.Param[i];
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	7dbb      	ldrb	r3, [r7, #22]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	4413      	add	r3, r2
 800124a:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < packet.Length - 2; i++)
 800124c:	7dbb      	ldrb	r3, [r7, #22]
 800124e:	3301      	adds	r3, #1
 8001250:	75bb      	strb	r3, [r7, #22]
 8001252:	7dba      	ldrb	r2, [r7, #22]
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	3b02      	subs	r3, #2
 8001258:	429a      	cmp	r2, r3
 800125a:	dbf0      	blt.n	800123e <getChecksum+0x20>
	}
	return ~sum;
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	43db      	mvns	r3, r3
 8001260:	b2db      	uxtb	r3, r3
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bc90      	pop	{r4, r7}
 800126a:	4770      	bx	lr

0800126c <struct_to_arr>:

void struct_to_arr(Instruction_Packet packet)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	463c      	mov	r4, r7
 8001274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	info_array[0] = HEADER;
 8001278:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <struct_to_arr+0x8c>)
 800127a:	22ff      	movs	r2, #255	@ 0xff
 800127c:	701a      	strb	r2, [r3, #0]
	info_array[1] = HEADER;
 800127e:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <struct_to_arr+0x8c>)
 8001280:	22ff      	movs	r2, #255	@ 0xff
 8001282:	705a      	strb	r2, [r3, #1]
	info_array[2] = packet.Packet_ID;
 8001284:	78ba      	ldrb	r2, [r7, #2]
 8001286:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <struct_to_arr+0x8c>)
 8001288:	709a      	strb	r2, [r3, #2]
	info_array[3] = packet.Length;
 800128a:	78fa      	ldrb	r2, [r7, #3]
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <struct_to_arr+0x8c>)
 800128e:	70da      	strb	r2, [r3, #3]
	info_array[4] = packet.Instruction;
 8001290:	793a      	ldrb	r2, [r7, #4]
 8001292:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <struct_to_arr+0x8c>)
 8001294:	711a      	strb	r2, [r3, #4]

	for (uint8_t i = 5; i < packet.Length + 3; i++)
 8001296:	2305      	movs	r3, #5
 8001298:	75fb      	strb	r3, [r7, #23]
 800129a:	e00a      	b.n	80012b2 <struct_to_arr+0x46>
		info_array[i] = packet.Param[i - 5];
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	7dfb      	ldrb	r3, [r7, #23]
 80012a0:	3b05      	subs	r3, #5
 80012a2:	441a      	add	r2, r3
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	7811      	ldrb	r1, [r2, #0]
 80012a8:	4a13      	ldr	r2, [pc, #76]	@ (80012f8 <struct_to_arr+0x8c>)
 80012aa:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 5; i < packet.Length + 3; i++)
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	3301      	adds	r3, #1
 80012b0:	75fb      	strb	r3, [r7, #23]
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	1c9a      	adds	r2, r3, #2
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	daef      	bge.n	800129c <struct_to_arr+0x30>

	info_array[packet.Length + 3] = getChecksum(packet);
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	1cdc      	adds	r4, r3, #3
 80012c0:	463b      	mov	r3, r7
 80012c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c4:	f7ff ffab 	bl	800121e <getChecksum>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <struct_to_arr+0x8c>)
 80012ce:	551a      	strb	r2, [r3, r4]

	for (uint8_t i = packet.Length + 4; i <= INSTRUCTION_FRAME_BUFFER; i++)
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	3304      	adds	r3, #4
 80012d4:	75bb      	strb	r3, [r7, #22]
 80012d6:	e006      	b.n	80012e6 <struct_to_arr+0x7a>
	{
		info_array[i] = 0;
 80012d8:	7dbb      	ldrb	r3, [r7, #22]
 80012da:	4a07      	ldr	r2, [pc, #28]	@ (80012f8 <struct_to_arr+0x8c>)
 80012dc:	2100      	movs	r1, #0
 80012de:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = packet.Length + 4; i <= INSTRUCTION_FRAME_BUFFER; i++)
 80012e0:	7dbb      	ldrb	r3, [r7, #22]
 80012e2:	3301      	adds	r3, #1
 80012e4:	75bb      	strb	r3, [r7, #22]
 80012e6:	7dbb      	ldrb	r3, [r7, #22]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d9f5      	bls.n	80012d8 <struct_to_arr+0x6c>
	}
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000348 	.word	0x20000348

080012fc <arr_to_struct>:

Status_Packet arr_to_struct(uint8_t array[])
{
 80012fc:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8001300:	b08a      	sub	sp, #40	@ 0x28
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
 8001308:	466b      	mov	r3, sp
 800130a:	461e      	mov	r6, r3
	Status_Packet packet;
	packet.Header_1 = array[0];
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	733b      	strb	r3, [r7, #12]
	packet.Header_2 = array[1];
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	785b      	ldrb	r3, [r3, #1]
 8001316:	737b      	strb	r3, [r7, #13]
	packet.Packet_ID = array[2];
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	789b      	ldrb	r3, [r3, #2]
 800131c:	73bb      	strb	r3, [r7, #14]
	packet.Length = array[3];
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	78db      	ldrb	r3, [r3, #3]
 8001322:	73fb      	strb	r3, [r7, #15]
	packet.Error = array[4];
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	791b      	ldrb	r3, [r3, #4]
 8001328:	743b      	strb	r3, [r7, #16]
	uint8_t prm[packet.Length - 2];
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	1e99      	subs	r1, r3, #2
 800132e:	1e4b      	subs	r3, r1, #1
 8001330:	623b      	str	r3, [r7, #32]
 8001332:	460a      	mov	r2, r1
 8001334:	2300      	movs	r3, #0
 8001336:	4690      	mov	r8, r2
 8001338:	4699      	mov	r9, r3
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800134a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800134e:	460a      	mov	r2, r1
 8001350:	2300      	movs	r3, #0
 8001352:	4614      	mov	r4, r2
 8001354:	461d      	mov	r5, r3
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	00eb      	lsls	r3, r5, #3
 8001360:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001364:	00e2      	lsls	r2, r4, #3
 8001366:	460b      	mov	r3, r1
 8001368:	3307      	adds	r3, #7
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	ebad 0d03 	sub.w	sp, sp, r3
 8001372:	466b      	mov	r3, sp
 8001374:	3300      	adds	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 5; i < packet.Length + 3; i++)
 8001378:	2305      	movs	r3, #5
 800137a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800137e:	e00e      	b.n	800139e <arr_to_struct+0xa2>
	{
		prm[i - 5] = array[i];
 8001380:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	441a      	add	r2, r3
 8001388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800138c:	3b05      	subs	r3, #5
 800138e:	7811      	ldrb	r1, [r2, #0]
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 5; i < packet.Length + 3; i++)
 8001394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001398:	3301      	adds	r3, #1
 800139a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	1c9a      	adds	r2, r3, #2
 80013a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013a6:	429a      	cmp	r2, r3
 80013a8:	daea      	bge.n	8001380 <arr_to_struct+0x84>
	}
	packet.Param = prm;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	617b      	str	r3, [r7, #20]
	packet.Checksum = array[packet.Length + 3];
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	3303      	adds	r3, #3
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	763b      	strb	r3, [r7, #24]

	return packet;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	461c      	mov	r4, r3
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80013c8:	46b5      	mov	sp, r6
}
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	3728      	adds	r7, #40	@ 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80013d4:	4770      	bx	lr
	...

080013d8 <AxelFlow_fire>:

Status_Packet AxelFlow_fire(UART_HandleTypeDef *huart, Instruction_Packet ip)
{
 80013d8:	b082      	sub	sp, #8
 80013da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013de:	b0a1      	sub	sp, #132	@ 0x84
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 80013ea:	e881 000c 	stmia.w	r1, {r2, r3}
 80013ee:	466b      	mov	r3, sp
 80013f0:	461e      	mov	r6, r3
	HAL_StatusTypeDef err1, err2;
#ifndef DEBUG_PRINT_COMMUNICATION
	(void) err1, (void) err2; // silence warnings
#endif
	uint8_t Status_array[STATUS_FRAME_BUFFER];
	memset(Status_array, 0, STATUS_FRAME_BUFFER);
 80013f2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013f6:	220a      	movs	r2, #10
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f00a fa1b 	bl	800b836 <memset>
	struct_to_arr(ip);
 8001400:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001406:	f7ff ff31 	bl	800126c <struct_to_arr>

	UART_HandleTypeDef huartx = *huart;
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4611      	mov	r1, r2
 8001412:	2248      	movs	r2, #72	@ 0x48
 8001414:	4618      	mov	r0, r3
 8001416:	f00a faac 	bl	800b972 <memcpy>

	err1 = HAL_UART_Transmit(&huartx, info_array, ip.Length + 4, HAL_MAX_DELAY);
 800141a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800141e:	3304      	adds	r3, #4
 8001420:	b29a      	uxth	r2, r3
 8001422:	f107 001c 	add.w	r0, r7, #28
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	4951      	ldr	r1, [pc, #324]	@ (8001570 <AxelFlow_fire+0x198>)
 800142c:	f004 f92e 	bl	800568c <HAL_UART_Transmit>
 8001430:	4603      	mov	r3, r0
 8001432:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
	__HAL_UART_ENABLE_IT(&huartx, UART_IT_RXNE); // Enable receive interrupt after transmission
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f042 0220 	orr.w	r2, r2, #32
 8001440:	60da      	str	r2, [r3, #12]
	err2 = HAL_UART_Receive(&huartx, Status_array, STATUS_FRAME_BUFFER,
 8001442:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001446:	f107 001c 	add.w	r0, r7, #28
 800144a:	2332      	movs	r3, #50	@ 0x32
 800144c:	220a      	movs	r2, #10
 800144e:	f004 f9a8 	bl	80057a2 <HAL_UART_Receive>
 8001452:	4603      	mov	r3, r0
 8001454:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	STATUS_PACKET_TIMEOUT);
	uint8_t Start_Index = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	for (uint8_t i = 0; i < STATUS_FRAME_BUFFER - 1; i++)
 800145e:	2300      	movs	r3, #0
 8001460:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8001464:	e023      	b.n	80014ae <AxelFlow_fire+0xd6>
	{
		if (Status_array[i] == 0xFF && Status_array[i + 1] == 0xFF
 8001466:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800146a:	3380      	adds	r3, #128	@ 0x80
 800146c:	443b      	add	r3, r7
 800146e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001472:	2bff      	cmp	r3, #255	@ 0xff
 8001474:	d116      	bne.n	80014a4 <AxelFlow_fire+0xcc>
 8001476:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800147a:	3301      	adds	r3, #1
 800147c:	3380      	adds	r3, #128	@ 0x80
 800147e:	443b      	add	r3, r7
 8001480:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001484:	2bff      	cmp	r3, #255	@ 0xff
 8001486:	d10d      	bne.n	80014a4 <AxelFlow_fire+0xcc>
				&& Status_array[i + 2] != 0xFF)
 8001488:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800148c:	3302      	adds	r3, #2
 800148e:	3380      	adds	r3, #128	@ 0x80
 8001490:	443b      	add	r3, r7
 8001492:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001496:	2bff      	cmp	r3, #255	@ 0xff
 8001498:	d004      	beq.n	80014a4 <AxelFlow_fire+0xcc>
		{
			Start_Index = i;
 800149a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800149e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			break;
 80014a2:	e008      	b.n	80014b6 <AxelFlow_fire+0xde>
	for (uint8_t i = 0; i < STATUS_FRAME_BUFFER - 1; i++)
 80014a4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80014a8:	3301      	adds	r3, #1
 80014aa:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80014ae:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d9d7      	bls.n	8001466 <AxelFlow_fire+0x8e>
		}
	}
	uint8_t Status_array_filtered[Status_array[Start_Index + 3] + 4];
 80014b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80014ba:	3303      	adds	r3, #3
 80014bc:	3380      	adds	r3, #128	@ 0x80
 80014be:	443b      	add	r3, r7
 80014c0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80014c4:	1d19      	adds	r1, r3, #4
 80014c6:	1e4b      	subs	r3, r1, #1
 80014c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80014ca:	460a      	mov	r2, r1
 80014cc:	2300      	movs	r3, #0
 80014ce:	4690      	mov	r8, r2
 80014d0:	4699      	mov	r9, r3
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014e6:	460a      	mov	r2, r1
 80014e8:	2300      	movs	r3, #0
 80014ea:	4614      	mov	r4, r2
 80014ec:	461d      	mov	r5, r3
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	00eb      	lsls	r3, r5, #3
 80014f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014fc:	00e2      	lsls	r2, r4, #3
 80014fe:	460b      	mov	r3, r1
 8001500:	3307      	adds	r3, #7
 8001502:	08db      	lsrs	r3, r3, #3
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	ebad 0d03 	sub.w	sp, sp, r3
 800150a:	466b      	mov	r3, sp
 800150c:	3300      	adds	r3, #0
 800150e:	673b      	str	r3, [r7, #112]	@ 0x70

	for (uint8_t i = 0; i < sizeof(Status_array_filtered); i++)
 8001510:	2300      	movs	r3, #0
 8001512:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8001516:	e011      	b.n	800153c <AxelFlow_fire+0x164>
	{
		Status_array_filtered[i] = Status_array[Start_Index + i];
 8001518:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 800151c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001520:	441a      	add	r2, r3
 8001522:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001526:	3280      	adds	r2, #128	@ 0x80
 8001528:	443a      	add	r2, r7
 800152a:	f812 0c1c 	ldrb.w	r0, [r2, #-28]
 800152e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001530:	54d0      	strb	r0, [r2, r3]
	for (uint8_t i = 0; i < sizeof(Status_array_filtered); i++)
 8001532:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001536:	3301      	adds	r3, #1
 8001538:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 800153c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001540:	460a      	mov	r2, r1
 8001542:	4293      	cmp	r3, r2
 8001544:	d3e8      	bcc.n	8001518 <AxelFlow_fire+0x140>
	}
	Status_Packet packet = arr_to_struct(Status_array_filtered);
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fed5 	bl	80012fc <arr_to_struct>
		AxelFlow_debug_println(temp);
		sprintf(temp, "err2: %u", err2);
		AxelFlow_debug_println(temp);
	}
#endif
	return packet;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	461c      	mov	r4, r3
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800155c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001560:	46b5      	mov	sp, r6
}
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	3784      	adds	r7, #132	@ 0x84
 8001566:	46bd      	mov	sp, r7
 8001568:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800156c:	b002      	add	sp, #8
 800156e:	4770      	bx	lr
 8001570:	20000348 	.word	0x20000348

08001574 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <case_insensitive_strcmp+0x16>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800158a:	2301      	movs	r3, #1
 800158c:	e056      	b.n	800163c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d10d      	bne.n	80015b2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8001596:	2300      	movs	r3, #0
 8001598:	e050      	b.n	800163c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e04a      	b.n	800163c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3301      	adds	r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	3301      	adds	r3, #1
 80015bc:	4a22      	ldr	r2, [pc, #136]	@ (8001648 <case_insensitive_strcmp+0xd4>)
 80015be:	4413      	add	r3, r2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d103      	bne.n	80015d2 <case_insensitive_strcmp+0x5e>
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	f103 0220 	add.w	r2, r3, #32
 80015d0:	e000      	b.n	80015d4 <case_insensitive_strcmp+0x60>
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	73bb      	strb	r3, [r7, #14]
 80015da:	7bbb      	ldrb	r3, [r7, #14]
 80015dc:	3301      	adds	r3, #1
 80015de:	491a      	ldr	r1, [pc, #104]	@ (8001648 <case_insensitive_strcmp+0xd4>)
 80015e0:	440b      	add	r3, r1
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d102      	bne.n	80015f2 <case_insensitive_strcmp+0x7e>
 80015ec:	7bbb      	ldrb	r3, [r7, #14]
 80015ee:	3320      	adds	r3, #32
 80015f0:	e000      	b.n	80015f4 <case_insensitive_strcmp+0x80>
 80015f2:	7bbb      	ldrb	r3, [r7, #14]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d0d0      	beq.n	800159a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	737b      	strb	r3, [r7, #13]
 80015fe:	7b7b      	ldrb	r3, [r7, #13]
 8001600:	3301      	adds	r3, #1
 8001602:	4a11      	ldr	r2, [pc, #68]	@ (8001648 <case_insensitive_strcmp+0xd4>)
 8001604:	4413      	add	r3, r2
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d103      	bne.n	8001618 <case_insensitive_strcmp+0xa4>
 8001610:	7b7b      	ldrb	r3, [r7, #13]
 8001612:	f103 0220 	add.w	r2, r3, #32
 8001616:	e000      	b.n	800161a <case_insensitive_strcmp+0xa6>
 8001618:	7b7a      	ldrb	r2, [r7, #13]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	733b      	strb	r3, [r7, #12]
 8001620:	7b3b      	ldrb	r3, [r7, #12]
 8001622:	3301      	adds	r3, #1
 8001624:	4908      	ldr	r1, [pc, #32]	@ (8001648 <case_insensitive_strcmp+0xd4>)
 8001626:	440b      	add	r3, r1
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d102      	bne.n	8001638 <case_insensitive_strcmp+0xc4>
 8001632:	7b3b      	ldrb	r3, [r7, #12]
 8001634:	3320      	adds	r3, #32
 8001636:	e000      	b.n	800163a <case_insensitive_strcmp+0xc6>
 8001638:	7b3b      	ldrb	r3, [r7, #12]
 800163a:	1ad3      	subs	r3, r2, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	0800d980 	.word	0x0800d980

0800164c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2028      	movs	r0, #40	@ 0x28
 800165a:	4798      	blx	r3
 800165c:	60f8      	str	r0, [r7, #12]
    if (node)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d004      	beq.n	800166e <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001664:	2228      	movs	r2, #40	@ 0x28
 8001666:	2100      	movs	r1, #0
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f00a f8e4 	bl	800b836 <memset>
    }

    return node;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001684:	e03d      	b.n	8001702 <cJSON_Delete+0x8a>
    {
        next = item->next;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d108      	bne.n	80016aa <cJSON_Delete+0x32>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ffe7 	bl	8001678 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10c      	bne.n	80016d0 <cJSON_Delete+0x58>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d008      	beq.n	80016d0 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <cJSON_Delete+0x9c>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6912      	ldr	r2, [r2, #16]
 80016c6:	4610      	mov	r0, r2
 80016c8:	4798      	blx	r3
            item->valuestring = NULL;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10c      	bne.n	80016f6 <cJSON_Delete+0x7e>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <cJSON_Delete+0x9c>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6a12      	ldr	r2, [r2, #32]
 80016ec:	4610      	mov	r0, r2
 80016ee:	4798      	blx	r3
            item->string = NULL;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 80016f6:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <cJSON_Delete+0x9c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	4798      	blx	r3
        item = next;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1be      	bne.n	8001686 <cJSON_Delete+0xe>
    }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000000 	.word	0x20000000

08001718 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800171c:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b098      	sub	sp, #96	@ 0x60
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800173e:	2300      	movs	r3, #0
 8001740:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001742:	f7ff ffe9 	bl	8001718 <get_decimal_point>
 8001746:	4603      	mov	r3, r0
 8001748:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <parse_number+0x36>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <parse_number+0x3a>
    {
        return false;
 800175e:	2300      	movs	r3, #0
 8001760:	e0a0      	b.n	80018a4 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001762:	2300      	movs	r3, #0
 8001764:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001766:	e03d      	b.n	80017e4 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6899      	ldr	r1, [r3, #8]
 8001770:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001772:	440b      	add	r3, r1
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b45      	cmp	r3, #69	@ 0x45
 800177a:	dc17      	bgt.n	80017ac <parse_number+0x84>
 800177c:	2b2b      	cmp	r3, #43	@ 0x2b
 800177e:	db40      	blt.n	8001802 <parse_number+0xda>
 8001780:	3b2b      	subs	r3, #43	@ 0x2b
 8001782:	2201      	movs	r2, #1
 8001784:	409a      	lsls	r2, r3
 8001786:	4b4c      	ldr	r3, [pc, #304]	@ (80018b8 <parse_number+0x190>)
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf14      	ite	ne
 800178e:	2301      	movne	r3, #1
 8001790:	2300      	moveq	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10b      	bne.n	80017b0 <parse_number+0x88>
 8001798:	f002 0308 	and.w	r3, r2, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf14      	ite	ne
 80017a0:	2301      	movne	r3, #1
 80017a2:	2300      	moveq	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d111      	bne.n	80017ce <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 80017aa:	e02a      	b.n	8001802 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 80017ac:	2b65      	cmp	r3, #101	@ 0x65
 80017ae:	d128      	bne.n	8001802 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	6899      	ldr	r1, [r3, #8]
 80017b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ba:	440b      	add	r3, r1
 80017bc:	4413      	add	r3, r2
 80017be:	7819      	ldrb	r1, [r3, #0]
 80017c0:	f107 0208 	add.w	r2, r7, #8
 80017c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017c6:	4413      	add	r3, r2
 80017c8:	460a      	mov	r2, r1
 80017ca:	701a      	strb	r2, [r3, #0]
                break;
 80017cc:	e007      	b.n	80017de <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80017ce:	f107 0208 	add.w	r2, r7, #8
 80017d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017d4:	4413      	add	r3, r2
 80017d6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80017da:	701a      	strb	r2, [r3, #0]
                break;
 80017dc:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80017de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e0:	3301      	adds	r3, #1
 80017e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80017e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80017e8:	d80d      	bhi.n	8001806 <parse_number+0xde>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00a      	beq.n	8001806 <parse_number+0xde>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017f6:	441a      	add	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3b3      	bcc.n	8001768 <parse_number+0x40>
        }
    }
loop_end:
 8001800:	e001      	b.n	8001806 <parse_number+0xde>
                goto loop_end;
 8001802:	bf00      	nop
 8001804:	e000      	b.n	8001808 <parse_number+0xe0>
loop_end:
 8001806:	bf00      	nop
    number_c_string[i] = '\0';
 8001808:	f107 0208 	add.w	r2, r7, #8
 800180c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800180e:	4413      	add	r3, r2
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001814:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f009 feb2 	bl	800b588 <strtod>
 8001824:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8001828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	429a      	cmp	r2, r3
 8001830:	d101      	bne.n	8001836 <parse_number+0x10e>
    {
        return false; /* parse_error */
 8001832:	2300      	movs	r3, #0
 8001834:	e036      	b.n	80018a4 <parse_number+0x17c>
    }

    item->valuedouble = number;
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800183c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001840:	a31b      	add	r3, pc, #108	@ (adr r3, 80018b0 <parse_number+0x188>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800184a:	f7ff f973 	bl	8000b34 <__aeabi_dcmpge>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800185a:	615a      	str	r2, [r3, #20]
 800185c:	e015      	b.n	800188a <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <parse_number+0x194>)
 8001864:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001868:	f7ff f95a 	bl	8000b20 <__aeabi_dcmple>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001878:	615a      	str	r2, [r3, #20]
 800187a:	e006      	b.n	800188a <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800187c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001880:	f7ff f96c 	bl	8000b5c <__aeabi_d2iz>
 8001884:	4602      	mov	r2, r0
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2208      	movs	r2, #8
 800188e:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001896:	f107 0208 	add.w	r2, r7, #8
 800189a:	1a8a      	subs	r2, r1, r2
 800189c:	441a      	add	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	609a      	str	r2, [r3, #8]
    return true;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3760      	adds	r7, #96	@ 0x60
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	f3af 8000 	nop.w
 80018b0:	ffc00000 	.word	0xffc00000
 80018b4:	41dfffff 	.word	0x41dfffff
 80018b8:	04007fe5 	.word	0x04007fe5
 80018bc:	c1e00000 	.word	0xc1e00000

080018c0 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	e04c      	b.n	8001970 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	4413      	add	r3, r2
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b2f      	cmp	r3, #47	@ 0x2f
 80018e0:	d90f      	bls.n	8001902 <parse_hex4+0x42>
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4413      	add	r3, r2
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b39      	cmp	r3, #57	@ 0x39
 80018ec:	d809      	bhi.n	8001902 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	3b30      	subs	r3, #48	@ 0x30
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	e02d      	b.n	800195e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4413      	add	r3, r2
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b40      	cmp	r3, #64	@ 0x40
 800190c:	d90f      	bls.n	800192e <parse_hex4+0x6e>
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b46      	cmp	r3, #70	@ 0x46
 8001918:	d809      	bhi.n	800192e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4413      	add	r3, r2
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	3b37      	subs	r3, #55	@ 0x37
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	e017      	b.n	800195e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b60      	cmp	r3, #96	@ 0x60
 8001938:	d90f      	bls.n	800195a <parse_hex4+0x9a>
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4413      	add	r3, r2
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b66      	cmp	r3, #102	@ 0x66
 8001944:	d809      	bhi.n	800195a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4413      	add	r3, r2
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	3b57      	subs	r3, #87	@ 0x57
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e001      	b.n	800195e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800195a:	2300      	movs	r3, #0
 800195c:	e00c      	b.n	8001978 <parse_hex4+0xb8>
        }

        if (i < 3)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d802      	bhi.n	800196a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	3301      	adds	r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d9af      	bls.n	80018d6 <parse_hex4+0x16>
        }
    }

    return h;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	f340 80b7 	ble.w	8001b2e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	3302      	adds	r3, #2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff7b 	bl	80018c0 <parse_hex4>
 80019ca:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80019d2:	d304      	bcc.n	80019de <utf16_literal_to_utf8+0x5a>
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80019da:	f0c0 80aa 	bcc.w	8001b32 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80019e4:	d337      	bcc.n	8001a56 <utf16_literal_to_utf8+0xd2>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80019ec:	d233      	bcs.n	8001a56 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	3306      	adds	r3, #6
 80019f2:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80019f8:	230c      	movs	r3, #12
 80019fa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	f340 8096 	ble.w	8001b36 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001a10:	f040 8093 	bne.w	8001b3a <utf16_literal_to_utf8+0x1b6>
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b75      	cmp	r3, #117	@ 0x75
 8001a1c:	f040 808d 	bne.w	8001b3a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3302      	adds	r3, #2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff4b 	bl	80018c0 <parse_hex4>
 8001a2a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001a32:	f0c0 8084 	bcc.w	8001b3e <utf16_literal_to_utf8+0x1ba>
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001a3c:	d27f      	bcs.n	8001b3e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	029a      	lsls	r2, r3, #10
 8001a42:	4b43      	ldr	r3, [pc, #268]	@ (8001b50 <utf16_literal_to_utf8+0x1cc>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8001a54:	e004      	b.n	8001a60 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001a56:	2306      	movs	r3, #6
 8001a58:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a64:	d803      	bhi.n	8001a6e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001a6c:	e01f      	b.n	8001aae <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a74:	d206      	bcs.n	8001a84 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001a76:	2302      	movs	r3, #2
 8001a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001a7c:	23c0      	movs	r3, #192	@ 0xc0
 8001a7e:	f887 3020 	strb.w	r3, [r7, #32]
 8001a82:	e014      	b.n	8001aae <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a8a:	d206      	bcs.n	8001a9a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001a92:	23e0      	movs	r3, #224	@ 0xe0
 8001a94:	f887 3020 	strb.w	r3, [r7, #32]
 8001a98:	e009      	b.n	8001aae <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001aa0:	d24f      	bcs.n	8001b42 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001aa8:	23f0      	movs	r3, #240	@ 0xf0
 8001aaa:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001aae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001ab8:	e015      	b.n	8001ae6 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6819      	ldr	r1, [r3, #0]
 8001ac8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001acc:	440b      	add	r3, r1
 8001ace:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	099b      	lsrs	r3, r3, #6
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001adc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001ae6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1e5      	bne.n	8001aba <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001aee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d909      	bls.n	8001b0a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	b2d9      	uxtb	r1, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	e007      	b.n	8001b1a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b22:	441a      	add	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001b28:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001b2c:	e00b      	b.n	8001b46 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001b2e:	bf00      	nop
 8001b30:	e008      	b.n	8001b44 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001b32:	bf00      	nop
 8001b34:	e006      	b.n	8001b44 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001b36:	bf00      	nop
 8001b38:	e004      	b.n	8001b44 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001b3a:	bf00      	nop
 8001b3c:	e002      	b.n	8001b44 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001b3e:	bf00      	nop
 8001b40:	e000      	b.n	8001b44 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001b42:	bf00      	nop

fail:
    return 0;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3728      	adds	r7, #40	@ 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	000ffc00 	.word	0x000ffc00

08001b54 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	3301      	adds	r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	3301      	adds	r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b22      	cmp	r3, #34	@ 0x22
 8001b90:	f040 8103 	bne.w	8001d9a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001b9c:	e017      	b.n	8001bce <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b5c      	cmp	r3, #92	@ 0x5c
 8001ba4:	d110      	bne.n	8001bc8 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	f080 80f1 	bcs.w	8001d9e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6a3a      	ldr	r2, [r7, #32]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d203      	bcs.n	8001be8 <parse_string+0x94>
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b22      	cmp	r3, #34	@ 0x22
 8001be6:	d1da      	bne.n	8001b9e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6a3a      	ldr	r2, [r7, #32]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	f080 80d3 	bcs.w	8001da2 <parse_string+0x24e>
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b22      	cmp	r3, #34	@ 0x22
 8001c02:	f040 80ce 	bne.w	8001da2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	4413      	add	r3, r2
 8001c10:	6a3a      	ldr	r2, [r7, #32]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	3201      	adds	r2, #1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4798      	blx	r3
 8001c28:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80ba 	beq.w	8001da6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001c36:	e094      	b.n	8001d62 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001c3e:	d008      	beq.n	8001c52 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c42:	1c53      	adds	r3, r2, #1
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1c59      	adds	r1, r3, #1
 8001c4a:	60f9      	str	r1, [r7, #12]
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	701a      	strb	r2, [r3, #0]
 8001c50:	e087      	b.n	8001d62 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001c52:	2302      	movs	r3, #2
 8001c54:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001c56:	6a3a      	ldr	r2, [r7, #32]
 8001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f340 80a4 	ble.w	8001daa <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	3301      	adds	r3, #1
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b75      	cmp	r3, #117	@ 0x75
 8001c6a:	f300 80a0 	bgt.w	8001dae <parse_string+0x25a>
 8001c6e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001c70:	da04      	bge.n	8001c7c <parse_string+0x128>
 8001c72:	2b22      	cmp	r3, #34	@ 0x22
 8001c74:	d05c      	beq.n	8001d30 <parse_string+0x1dc>
 8001c76:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c78:	d05a      	beq.n	8001d30 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001c7a:	e098      	b.n	8001dae <parse_string+0x25a>
            switch (input_pointer[1])
 8001c7c:	3b5c      	subs	r3, #92	@ 0x5c
 8001c7e:	2b19      	cmp	r3, #25
 8001c80:	f200 8095 	bhi.w	8001dae <parse_string+0x25a>
 8001c84:	a201      	add	r2, pc, #4	@ (adr r2, 8001c8c <parse_string+0x138>)
 8001c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8a:	bf00      	nop
 8001c8c:	08001d31 	.word	0x08001d31
 8001c90:	08001daf 	.word	0x08001daf
 8001c94:	08001daf 	.word	0x08001daf
 8001c98:	08001daf 	.word	0x08001daf
 8001c9c:	08001daf 	.word	0x08001daf
 8001ca0:	08001daf 	.word	0x08001daf
 8001ca4:	08001cf5 	.word	0x08001cf5
 8001ca8:	08001daf 	.word	0x08001daf
 8001cac:	08001daf 	.word	0x08001daf
 8001cb0:	08001daf 	.word	0x08001daf
 8001cb4:	08001d01 	.word	0x08001d01
 8001cb8:	08001daf 	.word	0x08001daf
 8001cbc:	08001daf 	.word	0x08001daf
 8001cc0:	08001daf 	.word	0x08001daf
 8001cc4:	08001daf 	.word	0x08001daf
 8001cc8:	08001daf 	.word	0x08001daf
 8001ccc:	08001daf 	.word	0x08001daf
 8001cd0:	08001daf 	.word	0x08001daf
 8001cd4:	08001d0d 	.word	0x08001d0d
 8001cd8:	08001daf 	.word	0x08001daf
 8001cdc:	08001daf 	.word	0x08001daf
 8001ce0:	08001daf 	.word	0x08001daf
 8001ce4:	08001d19 	.word	0x08001d19
 8001ce8:	08001daf 	.word	0x08001daf
 8001cec:	08001d25 	.word	0x08001d25
 8001cf0:	08001d41 	.word	0x08001d41
                    *output_pointer++ = '\b';
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	60fa      	str	r2, [r7, #12]
 8001cfa:	2208      	movs	r2, #8
 8001cfc:	701a      	strb	r2, [r3, #0]
                    break;
 8001cfe:	e02c      	b.n	8001d5a <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	60fa      	str	r2, [r7, #12]
 8001d06:	220c      	movs	r2, #12
 8001d08:	701a      	strb	r2, [r3, #0]
                    break;
 8001d0a:	e026      	b.n	8001d5a <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	60fa      	str	r2, [r7, #12]
 8001d12:	220a      	movs	r2, #10
 8001d14:	701a      	strb	r2, [r3, #0]
                    break;
 8001d16:	e020      	b.n	8001d5a <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	60fa      	str	r2, [r7, #12]
 8001d1e:	220d      	movs	r2, #13
 8001d20:	701a      	strb	r2, [r3, #0]
                    break;
 8001d22:	e01a      	b.n	8001d5a <parse_string+0x206>
                    *output_pointer++ = '\t';
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	60fa      	str	r2, [r7, #12]
 8001d2a:	2209      	movs	r2, #9
 8001d2c:	701a      	strb	r2, [r3, #0]
                    break;
 8001d2e:	e014      	b.n	8001d5a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1c59      	adds	r1, r3, #1
 8001d38:	60f9      	str	r1, [r7, #12]
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	701a      	strb	r2, [r3, #0]
                    break;
 8001d3e:	e00c      	b.n	8001d5a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	461a      	mov	r2, r3
 8001d46:	6a39      	ldr	r1, [r7, #32]
 8001d48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d4a:	f7ff fe1b 	bl	8001984 <utf16_literal_to_utf8>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d02c      	beq.n	8001db2 <parse_string+0x25e>
                    break;
 8001d58:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001d5a:	7dfb      	ldrb	r3, [r7, #23]
 8001d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d5e:	4413      	add	r3, r2
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8001d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	f4ff af66 	bcc.w	8001c38 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2210      	movs	r2, #16
 8001d76:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69fa      	ldr	r2, [r7, #28]
 8001d7c:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6a3a      	ldr	r2, [r7, #32]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	609a      	str	r2, [r3, #8]

    return true;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e020      	b.n	8001ddc <parse_string+0x288>
        goto fail;
 8001d9a:	bf00      	nop
 8001d9c:	e00a      	b.n	8001db4 <parse_string+0x260>
                    goto fail;
 8001d9e:	bf00      	nop
 8001da0:	e008      	b.n	8001db4 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001da2:	bf00      	nop
 8001da4:	e006      	b.n	8001db4 <parse_string+0x260>
            goto fail; /* allocation failure */
 8001da6:	bf00      	nop
 8001da8:	e004      	b.n	8001db4 <parse_string+0x260>
                goto fail;
 8001daa:	bf00      	nop
 8001dac:	e002      	b.n	8001db4 <parse_string+0x260>
                    goto fail;
 8001dae:	bf00      	nop
 8001db0:	e000      	b.n	8001db4 <parse_string+0x260>
                        goto fail;
 8001db2:	bf00      	nop

fail:
    if (output != NULL)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	69f8      	ldr	r0, [r7, #28]
 8001dc0:	4798      	blx	r3
        output = NULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3728      	adds	r7, #40	@ 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <buffer_skip_whitespace+0x16>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e02c      	b.n	8001e58 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <buffer_skip_whitespace+0x2c>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d306      	bcc.n	8001e1e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	e021      	b.n	8001e58 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00d      	beq.n	8001e40 <buffer_skip_whitespace+0x5c>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d207      	bcs.n	8001e40 <buffer_skip_whitespace+0x5c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4413      	add	r3, r2
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d9e9      	bls.n	8001e14 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d104      	bne.n	8001e56 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	1e5a      	subs	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001e56:	687b      	ldr	r3, [r7, #4]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <skip_utf8_bom+0x1e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <skip_utf8_bom+0x1e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e01c      	b.n	8001ec0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d018      	beq.n	8001ebe <skip_utf8_bom+0x5a>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	1d1a      	adds	r2, r3, #4
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d211      	bcs.n	8001ebe <skip_utf8_bom+0x5a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	4908      	ldr	r1, [pc, #32]	@ (8001ec8 <skip_utf8_bom+0x64>)
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f009 fccc 	bl	800b846 <strncmp>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d104      	bne.n	8001ebe <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	1cda      	adds	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001ebe:	687b      	ldr	r3, [r7, #4]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	0800d7d8 	.word	0x0800d7d8

08001ecc <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e00c      	b.n	8001efc <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7fe f986 	bl	80001f4 <strlen>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	3301      	adds	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	6979      	ldr	r1, [r7, #20]
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 f805 	bl	8001f04 <cJSON_ParseWithLengthOpts>
 8001efa:	4603      	mov	r3, r0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08e      	sub	sp, #56	@ 0x38
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001f12:	f107 0318 	add.w	r3, r7, #24
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
 8001f22:	615a      	str	r2, [r3, #20]
 8001f24:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8001f2a:	4b41      	ldr	r3, [pc, #260]	@ (8002030 <cJSON_ParseWithLengthOpts+0x12c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001f30:	4b3f      	ldr	r3, [pc, #252]	@ (8002030 <cJSON_ParseWithLengthOpts+0x12c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d042      	beq.n	8001fc2 <cJSON_ParseWithLengthOpts+0xbe>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d03f      	beq.n	8001fc2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001f4e:	4a39      	ldr	r2, [pc, #228]	@ (8002034 <cJSON_ParseWithLengthOpts+0x130>)
 8001f50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f54:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f56:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001f5a:	4836      	ldr	r0, [pc, #216]	@ (8002034 <cJSON_ParseWithLengthOpts+0x130>)
 8001f5c:	f7ff fb76 	bl	800164c <cJSON_New_Item>
 8001f60:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8001f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d02e      	beq.n	8001fc6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001f68:	f107 0318 	add.w	r3, r7, #24
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff79 	bl	8001e64 <skip_utf8_bom>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff35 	bl	8001de4 <buffer_skip_whitespace>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f80:	f000 f868 	bl	8002054 <parse_value>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d01f      	beq.n	8001fca <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00e      	beq.n	8001fae <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001f90:	f107 0318 	add.w	r3, r7, #24
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff25 	bl	8001de4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001f9a:	6a3a      	ldr	r2, [r7, #32]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d215      	bcs.n	8001fce <cJSON_ParseWithLengthOpts+0xca>
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10f      	bne.n	8001fce <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d004      	beq.n	8001fbe <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	441a      	add	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fc0:	e031      	b.n	8002026 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001fc2:	bf00      	nop
 8001fc4:	e004      	b.n	8001fd0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001fc6:	bf00      	nop
 8001fc8:	e002      	b.n	8001fd0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001fca:	bf00      	nop
 8001fcc:	e000      	b.n	8001fd0 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001fce:	bf00      	nop

fail:
    if (item != NULL)
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001fd6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001fd8:	f7ff fb4e 	bl	8001678 <cJSON_Delete>
    }

    if (value != NULL)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d020      	beq.n	8002024 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001fea:	6a3a      	ldr	r2, [r7, #32]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d202      	bcs.n	8001ff8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e005      	b.n	8002004 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3b01      	subs	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d004      	beq.n	8002014 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	441a      	add	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <cJSON_ParseWithLengthOpts+0x12c>)
 8002016:	461a      	mov	r2, r3
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002020:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3738      	adds	r7, #56	@ 0x38
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000358 	.word	0x20000358
 8002034:	20000000 	.word	0x20000000

08002038 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff41 	bl	8001ecc <cJSON_ParseWithOpts>
 800204a:	4603      	mov	r3, r0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <parse_value+0x18>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <parse_value+0x1c>
    {
        return false; /* no input */
 800206c:	2300      	movs	r3, #0
 800206e:	e0d2      	b.n	8002216 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d01d      	beq.n	80020b2 <parse_value+0x5e>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	1d1a      	adds	r2, r3, #4
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	d816      	bhi.n	80020b2 <parse_value+0x5e>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4413      	add	r3, r2
 800208e:	2204      	movs	r2, #4
 8002090:	4963      	ldr	r1, [pc, #396]	@ (8002220 <parse_value+0x1cc>)
 8002092:	4618      	mov	r0, r3
 8002094:	f009 fbd7 	bl	800b846 <strncmp>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2204      	movs	r2, #4
 80020a2:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	1d1a      	adds	r2, r3, #4
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	609a      	str	r2, [r3, #8]
        return true;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0b1      	b.n	8002216 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01d      	beq.n	80020f4 <parse_value+0xa0>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	1d5a      	adds	r2, r3, #5
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d816      	bhi.n	80020f4 <parse_value+0xa0>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	4413      	add	r3, r2
 80020d0:	2205      	movs	r2, #5
 80020d2:	4954      	ldr	r1, [pc, #336]	@ (8002224 <parse_value+0x1d0>)
 80020d4:	4618      	mov	r0, r3
 80020d6:	f009 fbb6 	bl	800b846 <strncmp>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	1d5a      	adds	r2, r3, #5
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	609a      	str	r2, [r3, #8]
        return true;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e090      	b.n	8002216 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d020      	beq.n	800213c <parse_value+0xe8>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	1d1a      	adds	r2, r3, #4
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	d819      	bhi.n	800213c <parse_value+0xe8>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4413      	add	r3, r2
 8002112:	2204      	movs	r2, #4
 8002114:	4944      	ldr	r1, [pc, #272]	@ (8002228 <parse_value+0x1d4>)
 8002116:	4618      	mov	r0, r3
 8002118:	f009 fb95 	bl	800b846 <strncmp>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10c      	bne.n	800213c <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2202      	movs	r2, #2
 8002126:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	1d1a      	adds	r2, r3, #4
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	609a      	str	r2, [r3, #8]
        return true;
 8002138:	2301      	movs	r3, #1
 800213a:	e06c      	b.n	8002216 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d013      	beq.n	800216a <parse_value+0x116>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	d20d      	bcs.n	800216a <parse_value+0x116>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4413      	add	r3, r2
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b22      	cmp	r3, #34	@ 0x22
 800215c:	d105      	bne.n	800216a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800215e:	6839      	ldr	r1, [r7, #0]
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff fcf7 	bl	8001b54 <parse_string>
 8002166:	4603      	mov	r3, r0
 8002168:	e055      	b.n	8002216 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d023      	beq.n	80021b8 <parse_value+0x164>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	d21d      	bcs.n	80021b8 <parse_value+0x164>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4413      	add	r3, r2
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b2d      	cmp	r3, #45	@ 0x2d
 800218a:	d00f      	beq.n	80021ac <parse_value+0x158>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4413      	add	r3, r2
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b2f      	cmp	r3, #47	@ 0x2f
 800219a:	d90d      	bls.n	80021b8 <parse_value+0x164>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4413      	add	r3, r2
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b39      	cmp	r3, #57	@ 0x39
 80021aa:	d805      	bhi.n	80021b8 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff faba 	bl	8001728 <parse_number>
 80021b4:	4603      	mov	r3, r0
 80021b6:	e02e      	b.n	8002216 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d013      	beq.n	80021e6 <parse_value+0x192>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d20d      	bcs.n	80021e6 <parse_value+0x192>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	4413      	add	r3, r2
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b5b      	cmp	r3, #91	@ 0x5b
 80021d8:	d105      	bne.n	80021e6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f825 	bl	800222c <parse_array>
 80021e2:	4603      	mov	r3, r0
 80021e4:	e017      	b.n	8002216 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d013      	beq.n	8002214 <parse_value+0x1c0>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d20d      	bcs.n	8002214 <parse_value+0x1c0>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	4413      	add	r3, r2
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b7b      	cmp	r3, #123	@ 0x7b
 8002206:	d105      	bne.n	8002214 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002208:	6839      	ldr	r1, [r7, #0]
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f8d2 	bl	80023b4 <parse_object>
 8002210:	4603      	mov	r3, r0
 8002212:	e000      	b.n	8002216 <parse_value+0x1c2>
    }

    return false;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	0800d7ac 	.word	0x0800d7ac
 8002224:	0800d7dc 	.word	0x0800d7dc
 8002228:	0800d7e4 	.word	0x0800d7e4

0800222c <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002246:	d301      	bcc.n	800224c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002248:	2300      	movs	r3, #0
 800224a:	e0af      	b.n	80023ac <parse_array+0x180>
    }
    input_buffer->depth++;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	4413      	add	r3, r2
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b5b      	cmp	r3, #91	@ 0x5b
 8002264:	f040 8094 	bne.w	8002390 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002272:	6838      	ldr	r0, [r7, #0]
 8002274:	f7ff fdb6 	bl	8001de4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <parse_array+0x6e>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	429a      	cmp	r2, r3
 8002288:	d207      	bcs.n	800229a <parse_array+0x6e>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	4413      	add	r3, r2
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b5d      	cmp	r3, #93	@ 0x5d
 8002298:	d061      	beq.n	800235e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <parse_array+0x80>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d305      	bcc.n	80022b8 <parse_array+0x8c>
    {
        input_buffer->offset--;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	1e5a      	subs	r2, r3, #1
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	609a      	str	r2, [r3, #8]
        goto fail;
 80022b6:	e072      	b.n	800239e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	1e5a      	subs	r2, r3, #1
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	3310      	adds	r3, #16
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff f9c0 	bl	800164c <cJSON_New_Item>
 80022cc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d05f      	beq.n	8002394 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d104      	bne.n	80022e4 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	e007      	b.n	80022f4 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80022fe:	6838      	ldr	r0, [r7, #0]
 8002300:	f7ff fd70 	bl	8001de4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002304:	6839      	ldr	r1, [r7, #0]
 8002306:	6938      	ldr	r0, [r7, #16]
 8002308:	f7ff fea4 	bl	8002054 <parse_value>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d042      	beq.n	8002398 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002312:	6838      	ldr	r0, [r7, #0]
 8002314:	f7ff fd66 	bl	8001de4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00d      	beq.n	800233a <parse_array+0x10e>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	d207      	bcs.n	800233a <parse_array+0x10e>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4413      	add	r3, r2
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b2c      	cmp	r3, #44	@ 0x2c
 8002338:	d0c3      	beq.n	80022c2 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d02d      	beq.n	800239c <parse_array+0x170>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	d227      	bcs.n	800239c <parse_array+0x170>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4413      	add	r3, r2
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b5d      	cmp	r3, #93	@ 0x5d
 800235a:	d11f      	bne.n	800239c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800235c:	e000      	b.n	8002360 <parse_array+0x134>
        goto success;
 800235e:	bf00      	nop
    input_buffer->depth--;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	1e5a      	subs	r2, r3, #1
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <parse_array+0x14a>
        head->prev = current_item;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2220      	movs	r2, #32
 800237a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	609a      	str	r2, [r3, #8]

    return true;
 800238c:	2301      	movs	r3, #1
 800238e:	e00d      	b.n	80023ac <parse_array+0x180>
        goto fail;
 8002390:	bf00      	nop
 8002392:	e004      	b.n	800239e <parse_array+0x172>
            goto fail; /* allocation failure */
 8002394:	bf00      	nop
 8002396:	e002      	b.n	800239e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002398:	bf00      	nop
 800239a:	e000      	b.n	800239e <parse_array+0x172>
        goto fail; /* expected end of array */
 800239c:	bf00      	nop

fail:
    if (head != NULL)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80023a4:	6978      	ldr	r0, [r7, #20]
 80023a6:	f7ff f967 	bl	8001678 <cJSON_Delete>
    }

    return false;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023ce:	d301      	bcc.n	80023d4 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 80023d0:	2300      	movs	r3, #0
 80023d2:	e0f7      	b.n	80025c4 <parse_object+0x210>
    }
    input_buffer->depth++;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80db 	beq.w	800259c <parse_object+0x1e8>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	f080 80d4 	bcs.w	800259c <parse_object+0x1e8>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4413      	add	r3, r2
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b7b      	cmp	r3, #123	@ 0x7b
 8002402:	f040 80cb 	bne.w	800259c <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002410:	6838      	ldr	r0, [r7, #0]
 8002412:	f7ff fce7 	bl	8001de4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00e      	beq.n	800243a <parse_object+0x86>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	d208      	bcs.n	800243a <parse_object+0x86>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4413      	add	r3, r2
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b7d      	cmp	r3, #125	@ 0x7d
 8002436:	f000 8098 	beq.w	800256a <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <parse_object+0x98>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	d305      	bcc.n	8002458 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	1e5a      	subs	r2, r3, #1
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	609a      	str	r2, [r3, #8]
        goto fail;
 8002456:	e0ae      	b.n	80025b6 <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	3310      	adds	r3, #16
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff f8f0 	bl	800164c <cJSON_New_Item>
 800246c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8095 	beq.w	80025a0 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d104      	bne.n	8002486 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	e007      	b.n	8002496 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8083 	beq.w	80025a4 <parse_object+0x1f0>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d27b      	bcs.n	80025a4 <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80024b6:	6838      	ldr	r0, [r7, #0]
 80024b8:	f7ff fc94 	bl	8001de4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80024bc:	6839      	ldr	r1, [r7, #0]
 80024be:	6938      	ldr	r0, [r7, #16]
 80024c0:	f7ff fb48 	bl	8001b54 <parse_string>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d06e      	beq.n	80025a8 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 80024ca:	6838      	ldr	r0, [r7, #0]
 80024cc:	f7ff fc8a 	bl	8001de4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2200      	movs	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d063      	beq.n	80025ac <parse_object+0x1f8>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d25d      	bcs.n	80025ac <parse_object+0x1f8>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4413      	add	r3, r2
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80024fe:	d155      	bne.n	80025ac <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800250a:	6838      	ldr	r0, [r7, #0]
 800250c:	f7ff fc6a 	bl	8001de4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002510:	6839      	ldr	r1, [r7, #0]
 8002512:	6938      	ldr	r0, [r7, #16]
 8002514:	f7ff fd9e 	bl	8002054 <parse_value>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d048      	beq.n	80025b0 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800251e:	6838      	ldr	r0, [r7, #0]
 8002520:	f7ff fc60 	bl	8001de4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00d      	beq.n	8002546 <parse_object+0x192>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	429a      	cmp	r2, r3
 8002534:	d207      	bcs.n	8002546 <parse_object+0x192>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b2c      	cmp	r3, #44	@ 0x2c
 8002544:	d08d      	beq.n	8002462 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d033      	beq.n	80025b4 <parse_object+0x200>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	d22d      	bcs.n	80025b4 <parse_object+0x200>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4413      	add	r3, r2
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b7d      	cmp	r3, #125	@ 0x7d
 8002566:	d125      	bne.n	80025b4 <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8002568:	e000      	b.n	800256c <parse_object+0x1b8>
        goto success; /* empty object */
 800256a:	bf00      	nop
    input_buffer->depth--;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	1e5a      	subs	r2, r3, #1
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <parse_object+0x1ce>
        head->prev = current_item;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2240      	movs	r2, #64	@ 0x40
 8002586:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	609a      	str	r2, [r3, #8]
    return true;
 8002598:	2301      	movs	r3, #1
 800259a:	e013      	b.n	80025c4 <parse_object+0x210>
        goto fail; /* not an object */
 800259c:	bf00      	nop
 800259e:	e00a      	b.n	80025b6 <parse_object+0x202>
            goto fail; /* allocation failure */
 80025a0:	bf00      	nop
 80025a2:	e008      	b.n	80025b6 <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 80025a4:	bf00      	nop
 80025a6:	e006      	b.n	80025b6 <parse_object+0x202>
            goto fail; /* failed to parse name */
 80025a8:	bf00      	nop
 80025aa:	e004      	b.n	80025b6 <parse_object+0x202>
            goto fail; /* invalid object */
 80025ac:	bf00      	nop
 80025ae:	e002      	b.n	80025b6 <parse_object+0x202>
            goto fail; /* failed to parse value */
 80025b0:	bf00      	nop
 80025b2:	e000      	b.n	80025b6 <parse_object+0x202>
        goto fail; /* expected end of object */
 80025b4:	bf00      	nop

fail:
    if (head != NULL)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <parse_object+0x20e>
    {
        cJSON_Delete(head);
 80025bc:	6978      	ldr	r0, [r7, #20]
 80025be:	f7ff f85b 	bl	8001678 <cJSON_Delete>
    }

    return false;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <get_object_item+0x1c>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <get_object_item+0x20>
    {
        return NULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e033      	b.n	8002654 <get_object_item+0x88>
    }

    current_element = object->child;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d017      	beq.n	8002628 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80025f8:	e002      	b.n	8002600 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d01c      	beq.n	8002640 <get_object_item+0x74>
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d018      	beq.n	8002640 <get_object_item+0x74>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4619      	mov	r1, r3
 8002614:	68b8      	ldr	r0, [r7, #8]
 8002616:	f7fd fde3 	bl	80001e0 <strcmp>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ec      	bne.n	80025fa <get_object_item+0x2e>
 8002620:	e00e      	b.n	8002640 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <get_object_item+0x74>
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4619      	mov	r1, r3
 8002634:	68b8      	ldr	r0, [r7, #8]
 8002636:	f7fe ff9d 	bl	8001574 <case_insensitive_strcmp>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f0      	bne.n	8002622 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <get_object_item+0x82>
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <get_object_item+0x86>
        return NULL;
 800264e:	2300      	movs	r3, #0
 8002650:	e000      	b.n	8002654 <get_object_item+0x88>
    }

    return current_element;
 8002652:	697b      	ldr	r3, [r7, #20]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002666:	2200      	movs	r2, #0
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ffae 	bl	80025cc <get_object_item>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <cJSON_IsNumber+0x12>
    {
        return false;
 8002688:	2300      	movs	r3, #0
 800268a:	e007      	b.n	800269c <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b08      	cmp	r3, #8
 8002694:	bf0c      	ite	eq
 8002696:	2301      	moveq	r3, #1
 8002698:	2300      	movne	r3, #0
 800269a:	b2db      	uxtb	r3, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80026b0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80026b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80026c0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80026c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80026c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00b      	beq.n	80026e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80026d0:	e000      	b.n	80026d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80026d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80026d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f9      	beq.n	80026d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80026de:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80026e8:	687b      	ldr	r3, [r7, #4]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <_write>:
#include "string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *ptr, int len) {
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	e009      	b.n	800271c <_write+0x26>
		ITM_SendChar(*ptr++);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	60ba      	str	r2, [r7, #8]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ffc9 	bl	80026a8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3301      	adds	r3, #1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	429a      	cmp	r2, r3
 8002722:	dbf1      	blt.n	8002708 <_write+0x12>
	}
	return len;
 8002724:	687b      	ldr	r3, [r7, #4]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <Parse_JSON>:
int angles[4] = {0, 0, 0, 0}; // Stores angles (angle_dof_4, angle_dof_5, angle_dof_6, angle_gripper)
int gripper = 0;             // Gripper value
int hold = 0;                // Hold value
char debugMsg[1024];

void Parse_JSON(const char *json_str) {
 8002730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002732:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 8002736:	af08      	add	r7, sp, #32
 8002738:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800273c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002740:	6018      	str	r0, [r3, #0]
    cJSON *root = cJSON_Parse(json_str);
 8002742:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002746:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	f7ff fc74 	bl	8002038 <cJSON_Parse>
 8002750:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244

    if (!root) {
 8002754:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8002758:	2b00      	cmp	r3, #0
 800275a:	d117      	bne.n	800278c <Parse_JSON+0x5c>
        char errorMsg[] = "Invalid JSON\n";
 800275c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002760:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002764:	4a68      	ldr	r2, [pc, #416]	@ (8002908 <Parse_JSON+0x1d8>)
 8002766:	461c      	mov	r4, r3
 8002768:	4613      	mov	r3, r2
 800276a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800276c:	c407      	stmia	r4!, {r0, r1, r2}
 800276e:	8023      	strh	r3, [r4, #0]
        CDC_Transmit_FS((uint8_t*)errorMsg, strlen(errorMsg));
 8002770:	f107 0308 	add.w	r3, r7, #8
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fd3d 	bl	80001f4 <strlen>
 800277a:	4603      	mov	r3, r0
 800277c:	b29a      	uxth	r2, r3
 800277e:	f107 0308 	add.w	r3, r7, #8
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f007 fbb7 	bl	8009ef8 <CDC_Transmit_FS>
 800278a:	e0b9      	b.n	8002900 <Parse_JSON+0x1d0>
        return;
    }

    // Define JSON keys
    const char *dof_keys[] = {"dof_4", "dof_5", "dof_6"};
 800278c:	4a5f      	ldr	r2, [pc, #380]	@ (800290c <Parse_JSON+0x1dc>)
 800278e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8002792:	ca07      	ldmia	r2, {r0, r1, r2}
 8002794:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    const char *angle_keys[] = {"angle_dof_4", "angle_dof_5", "angle_dof_6", "angle_gripper"};
 8002798:	4b5d      	ldr	r3, [pc, #372]	@ (8002910 <Parse_JSON+0x1e0>)
 800279a:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 800279e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Extract DOF values
    for (int i = 0; i < 3; i++) {
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 80027aa:	e022      	b.n	80027f2 <Parse_JSON+0xc2>
        cJSON *item = cJSON_GetObjectItem(root, dof_keys[i]);
 80027ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027b6:	443b      	add	r3, r7
 80027b8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80027bc:	4619      	mov	r1, r3
 80027be:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 80027c2:	f7ff ff4b 	bl	800265c <cJSON_GetObjectItem>
 80027c6:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234
        if (cJSON_IsNumber(item)) {
 80027ca:	f8d7 0234 	ldr.w	r0, [r7, #564]	@ 0x234
 80027ce:	f7ff ff54 	bl	800267a <cJSON_IsNumber>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <Parse_JSON+0xb8>
            dof[i] = item->valueint;
 80027d8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	494d      	ldr	r1, [pc, #308]	@ (8002914 <Parse_JSON+0x1e4>)
 80027e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80027e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 80027e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80027ec:	3301      	adds	r3, #1
 80027ee:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 80027f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	ddd8      	ble.n	80027ac <Parse_JSON+0x7c>
        }
    }

    // Extract Angle values
    for (int i = 0; i < 4; i++) {
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8002800:	e022      	b.n	8002848 <Parse_JSON+0x118>
        cJSON *item = cJSON_GetObjectItem(root, angle_keys[i]);
 8002802:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800280c:	443b      	add	r3, r7
 800280e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002812:	4619      	mov	r1, r3
 8002814:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 8002818:	f7ff ff20 	bl	800265c <cJSON_GetObjectItem>
 800281c:	f8c7 0238 	str.w	r0, [r7, #568]	@ 0x238
        if (cJSON_IsNumber(item)) {
 8002820:	f8d7 0238 	ldr.w	r0, [r7, #568]	@ 0x238
 8002824:	f7ff ff29 	bl	800267a <cJSON_IsNumber>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <Parse_JSON+0x10e>
            angles[i] = item->valueint;
 800282e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	4938      	ldr	r1, [pc, #224]	@ (8002918 <Parse_JSON+0x1e8>)
 8002836:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 4; i++) {
 800283e:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8002842:	3301      	adds	r3, #1
 8002844:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8002848:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800284c:	2b03      	cmp	r3, #3
 800284e:	ddd8      	ble.n	8002802 <Parse_JSON+0xd2>
        }
    }

    // Extract Gripper value
    cJSON *gripper_item = cJSON_GetObjectItem(root, "gripper");
 8002850:	4932      	ldr	r1, [pc, #200]	@ (800291c <Parse_JSON+0x1ec>)
 8002852:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 8002856:	f7ff ff01 	bl	800265c <cJSON_GetObjectItem>
 800285a:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
    if (cJSON_IsNumber(gripper_item)) {
 800285e:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 8002862:	f7ff ff0a 	bl	800267a <cJSON_IsNumber>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d004      	beq.n	8002876 <Parse_JSON+0x146>
        gripper = gripper_item->valueint;
 800286c:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	4a2b      	ldr	r2, [pc, #172]	@ (8002920 <Parse_JSON+0x1f0>)
 8002874:	6013      	str	r3, [r2, #0]
    }

    // Extract Hold value
    cJSON *hold_item = cJSON_GetObjectItem(root, "hold");
 8002876:	492b      	ldr	r1, [pc, #172]	@ (8002924 <Parse_JSON+0x1f4>)
 8002878:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 800287c:	f7ff feee 	bl	800265c <cJSON_GetObjectItem>
 8002880:	f8c7 023c 	str.w	r0, [r7, #572]	@ 0x23c
    if (cJSON_IsNumber(hold_item)) {
 8002884:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 8002888:	f7ff fef7 	bl	800267a <cJSON_IsNumber>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d004      	beq.n	800289c <Parse_JSON+0x16c>
        hold = hold_item->valueint;
 8002892:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	4a23      	ldr	r2, [pc, #140]	@ (8002928 <Parse_JSON+0x1f8>)
 800289a:	6013      	str	r3, [r2, #0]
    }

    cJSON_Delete(root);
 800289c:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 80028a0:	f7fe feea 	bl	8001678 <cJSON_Delete>

    char response[512];
    snprintf(response, sizeof(response),
 80028a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <Parse_JSON+0x1e4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002914 <Parse_JSON+0x1e4>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4a19      	ldr	r2, [pc, #100]	@ (8002914 <Parse_JSON+0x1e4>)
 80028b0:	6892      	ldr	r2, [r2, #8]
 80028b2:	4919      	ldr	r1, [pc, #100]	@ (8002918 <Parse_JSON+0x1e8>)
 80028b4:	6809      	ldr	r1, [r1, #0]
 80028b6:	4818      	ldr	r0, [pc, #96]	@ (8002918 <Parse_JSON+0x1e8>)
 80028b8:	6840      	ldr	r0, [r0, #4]
 80028ba:	4c17      	ldr	r4, [pc, #92]	@ (8002918 <Parse_JSON+0x1e8>)
 80028bc:	68a4      	ldr	r4, [r4, #8]
 80028be:	4d16      	ldr	r5, [pc, #88]	@ (8002918 <Parse_JSON+0x1e8>)
 80028c0:	68ed      	ldr	r5, [r5, #12]
 80028c2:	4e17      	ldr	r6, [pc, #92]	@ (8002920 <Parse_JSON+0x1f0>)
 80028c4:	6836      	ldr	r6, [r6, #0]
 80028c6:	f107 0c18 	add.w	ip, r7, #24
 80028ca:	9606      	str	r6, [sp, #24]
 80028cc:	9505      	str	r5, [sp, #20]
 80028ce:	9404      	str	r4, [sp, #16]
 80028d0:	9003      	str	r0, [sp, #12]
 80028d2:	9102      	str	r1, [sp, #8]
 80028d4:	9201      	str	r2, [sp, #4]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	4a14      	ldr	r2, [pc, #80]	@ (800292c <Parse_JSON+0x1fc>)
 80028dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028e0:	4660      	mov	r0, ip
 80028e2:	f008 ff31 	bl	800b748 <sniprintf>
        "DOFs: %d, %d, %d, %d angle : %d, %d, %d, %d\n",
        dof[0], dof[1], dof[2], angles[0],
        angles[1], angles[2], angles[3], gripper);
    CDC_Transmit_FS((uint8_t*)response, strlen(response));
 80028e6:	f107 0318 	add.w	r3, r7, #24
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fd fc82 	bl	80001f4 <strlen>
 80028f0:	4603      	mov	r3, r0
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	f107 0318 	add.w	r3, r7, #24
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f007 fafc 	bl	8009ef8 <CDC_Transmit_FS>
}
 8002900:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8002904:	46bd      	mov	sp, r7
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	0800d82c 	.word	0x0800d82c
 800290c:	0800d854 	.word	0x0800d854
 8002910:	0800d894 	.word	0x0800d894
 8002914:	20000360 	.word	0x20000360
 8002918:	2000036c 	.word	0x2000036c
 800291c:	0800d7ec 	.word	0x0800d7ec
 8002920:	2000037c 	.word	0x2000037c
 8002924:	0800d7f4 	.word	0x0800d7f4
 8002928:	20000380 	.word	0x20000380
 800292c:	0800d7fc 	.word	0x0800d7fc

08002930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002930:	b5b0      	push	{r4, r5, r7, lr}
 8002932:	f5ad 7d46 	sub.w	sp, sp, #792	@ 0x318
 8002936:	af12      	add	r7, sp, #72	@ 0x48

  /* USER CODE BEGIN 1 */
	AxelFlow_debug_init(&huart2);
 8002938:	485b      	ldr	r0, [pc, #364]	@ (8002aa8 <main+0x178>)
 800293a:	f7fe fc37 	bl	80011ac <AxelFlow_debug_init>
	UART_HandleTypeDef servo1_UART_Handle = AxelFlow_UART_Init(USART1,1000000); // Make sure that interrupt is selected.
 800293e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8002942:	4a5a      	ldr	r2, [pc, #360]	@ (8002aac <main+0x17c>)
 8002944:	495a      	ldr	r1, [pc, #360]	@ (8002ab0 <main+0x180>)
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fc42 	bl	80011d0 <AxelFlow_UART_Init>
	Servo servo1 = AxelFlow_servo_init(0x04, &servo1_UART_Handle, false);
 800294c:	f507 700e 	add.w	r0, r7, #568	@ 0x238
 8002950:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8002954:	2300      	movs	r3, #0
 8002956:	2104      	movs	r1, #4
 8002958:	f7fe faf6 	bl	8000f48 <AxelFlow_servo_init>
	Servo servo2 = AxelFlow_servo_init(0x03, &servo1_UART_Handle, false);
 800295c:	f507 70f4 	add.w	r0, r7, #488	@ 0x1e8
 8002960:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8002964:	2300      	movs	r3, #0
 8002966:	2103      	movs	r1, #3
 8002968:	f7fe faee 	bl	8000f48 <AxelFlow_servo_init>
	Servo servo3 = AxelFlow_servo_init(0x01, &servo1_UART_Handle, false);
 800296c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002970:	f5a3 709c 	sub.w	r0, r3, #312	@ 0x138
 8002974:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8002978:	2300      	movs	r3, #0
 800297a:	2101      	movs	r1, #1
 800297c:	f7fe fae4 	bl	8000f48 <AxelFlow_servo_init>
	Servo servo4 = AxelFlow_servo_init(0x05, &servo1_UART_Handle, false);
 8002980:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002984:	f5a3 70c4 	sub.w	r0, r3, #392	@ 0x188
 8002988:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800298c:	2300      	movs	r3, #0
 800298e:	2105      	movs	r1, #5
 8002990:	f7fe fada 	bl	8000f48 <AxelFlow_servo_init>
	Servo servo5 = AxelFlow_servo_init(0x02, &servo1_UART_Handle, true);
 8002994:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002998:	f5a3 70ec 	sub.w	r0, r3, #472	@ 0x1d8
 800299c:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 80029a0:	2301      	movs	r3, #1
 80029a2:	2102      	movs	r1, #2
 80029a4:	f7fe fad0 	bl	8000f48 <AxelFlow_servo_init>
	Servo servo6 = AxelFlow_servo_init(0x09, &servo1_UART_Handle, false);
 80029a8:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80029ac:	f5a3 700a 	sub.w	r0, r3, #552	@ 0x228
 80029b0:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 80029b4:	2300      	movs	r3, #0
 80029b6:	2109      	movs	r1, #9
 80029b8:	f7fe fac6 	bl	8000f48 <AxelFlow_servo_init>
	Servo servo7 = AxelFlow_servo_init(0x08, &servo1_UART_Handle, false);
 80029bc:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80029c0:	f5a3 701e 	sub.w	r0, r3, #632	@ 0x278
 80029c4:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 80029c8:	2300      	movs	r3, #0
 80029ca:	2108      	movs	r1, #8
 80029cc:	f7fe fabc 	bl	8000f48 <AxelFlow_servo_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029d0:	f000 fb4c 	bl	800306c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029d4:	f000 f87a 	bl	8002acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029d8:	f000 f936 	bl	8002c48 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80029dc:	f000 f8e0 	bl	8002ba0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80029e0:	f000 f908 	bl	8002bf4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80029e4:	f007 f9b4 	bl	8009d50 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		printf("Hello");
 80029e8:	4832      	ldr	r0, [pc, #200]	@ (8002ab4 <main+0x184>)
 80029ea:	f008 fe9b 	bl	800b724 <iprintf>
		char ch[40];
		int x;
		SyncWrite_Packet write_packet;
		Parse_JSON(USB_RX_Buffer);
 80029ee:	4832      	ldr	r0, [pc, #200]	@ (8002ab8 <main+0x188>)
 80029f0:	f7ff fe9e 	bl	8002730 <Parse_JSON>
		HAL_Delay(1);
 80029f4:	2001      	movs	r0, #1
 80029f6:	f000 fbab 	bl	8003150 <HAL_Delay>
		snprintf(debugMsg, sizeof(debugMsg), "Received JSON: %s\n", USB_RX_Buffer);
 80029fa:	4b2f      	ldr	r3, [pc, #188]	@ (8002ab8 <main+0x188>)
 80029fc:	4a2f      	ldr	r2, [pc, #188]	@ (8002abc <main+0x18c>)
 80029fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a02:	482f      	ldr	r0, [pc, #188]	@ (8002ac0 <main+0x190>)
 8002a04:	f008 fea0 	bl	800b748 <sniprintf>
		CDC_Transmit_FS((uint8_t*)debugMsg, strlen(debugMsg));
 8002a08:	482d      	ldr	r0, [pc, #180]	@ (8002ac0 <main+0x190>)
 8002a0a:	f7fd fbf3 	bl	80001f4 <strlen>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	4619      	mov	r1, r3
 8002a14:	482a      	ldr	r0, [pc, #168]	@ (8002ac0 <main+0x190>)
 8002a16:	f007 fa6f 	bl	8009ef8 <CDC_Transmit_FS>


		setSpeed(20, servo4);
 8002a1a:	463d      	mov	r5, r7
 8002a1c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002a20:	f5a3 74c4 	sub.w	r4, r3, #392	@ 0x188
 8002a24:	4668      	mov	r0, sp
 8002a26:	f104 030c 	add.w	r3, r4, #12
 8002a2a:	2244      	movs	r2, #68	@ 0x44
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f008 ffa0 	bl	800b972 <memcpy>
 8002a32:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002a36:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	f7fe fb1a 	bl	8001074 <setSpeed>
		HAL_Delay(2000);
 8002a40:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002a44:	f000 fb84 	bl	8003150 <HAL_Delay>
//		write_packet.ID= Servo;
//		write_packet.pos=pos;
//		write_packet.speed=speed;
//		Sync_write( write_packet,USART1);
//        confirm_set(120, servo6);
		setPosition(120, servo4);
 8002a48:	463d      	mov	r5, r7
 8002a4a:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002a4e:	f5a3 74c4 	sub.w	r4, r3, #392	@ 0x188
 8002a52:	4668      	mov	r0, sp
 8002a54:	f104 030c 	add.w	r3, r4, #12
 8002a58:	2244      	movs	r2, #68	@ 0x44
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f008 ff89 	bl	800b972 <memcpy>
 8002a60:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002a64:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8002ac4 <main+0x194>
 8002a68:	4628      	mov	r0, r5
 8002a6a:	f7fe fac3 	bl	8000ff4 <setPosition>
//		setSpeed(20, servo6);
		HAL_Delay(1000);
 8002a6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a72:	f000 fb6d 	bl	8003150 <HAL_Delay>
//        confirm_set(180, servo6);
//        move_arm(servo4,angles[0], servo6,angles[1], servo2, angles[2], servo1,angles[3], 0 ); //FOR ARM
        //move_arm(servo4,angles[0], servo6,angles[1], servo3, angles[2], servo1,angles[3], 0 ); //FOR TESTING
		setPosition(180, servo4);
 8002a76:	463d      	mov	r5, r7
 8002a78:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002a7c:	f5a3 74c4 	sub.w	r4, r3, #392	@ 0x188
 8002a80:	4668      	mov	r0, sp
 8002a82:	f104 030c 	add.w	r3, r4, #12
 8002a86:	2244      	movs	r2, #68	@ 0x44
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f008 ff72 	bl	800b972 <memcpy>
 8002a8e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002a92:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8002ac8 <main+0x198>
 8002a96:	4628      	mov	r0, r5
 8002a98:	f7fe faac 	bl	8000ff4 <setPosition>
//		setSpeed(50, servo3);
		HAL_Delay(2000);
 8002a9c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002aa0:	f000 fb56 	bl	8003150 <HAL_Delay>
  {
 8002aa4:	bf00      	nop
 8002aa6:	e79f      	b.n	80029e8 <main+0xb8>
 8002aa8:	200007cc 	.word	0x200007cc
 8002aac:	000f4240 	.word	0x000f4240
 8002ab0:	40011000 	.word	0x40011000
 8002ab4:	0800d8a4 	.word	0x0800d8a4
 8002ab8:	20000814 	.word	0x20000814
 8002abc:	0800d8ac 	.word	0x0800d8ac
 8002ac0:	20000384 	.word	0x20000384
 8002ac4:	42f00000 	.word	0x42f00000
 8002ac8:	43340000 	.word	0x43340000

08002acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b094      	sub	sp, #80	@ 0x50
 8002ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ad2:	f107 0320 	add.w	r3, r7, #32
 8002ad6:	2230      	movs	r2, #48	@ 0x30
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f008 feab 	bl	800b836 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	4b28      	ldr	r3, [pc, #160]	@ (8002b98 <SystemClock_Config+0xcc>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	4a27      	ldr	r2, [pc, #156]	@ (8002b98 <SystemClock_Config+0xcc>)
 8002afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b00:	4b25      	ldr	r3, [pc, #148]	@ (8002b98 <SystemClock_Config+0xcc>)
 8002b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	4b22      	ldr	r3, [pc, #136]	@ (8002b9c <SystemClock_Config+0xd0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a21      	ldr	r2, [pc, #132]	@ (8002b9c <SystemClock_Config+0xd0>)
 8002b16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002b9c <SystemClock_Config+0xd0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b32:	2302      	movs	r3, #2
 8002b34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b36:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002b3c:	2319      	movs	r3, #25
 8002b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b40:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002b44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b46:	2304      	movs	r3, #4
 8002b48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b4e:	f107 0320 	add.w	r3, r7, #32
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 f89a 	bl	8004c8c <HAL_RCC_OscConfig>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002b5e:	f000 f8a9 	bl	8002cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b62:	230f      	movs	r3, #15
 8002b64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b66:	2302      	movs	r3, #2
 8002b68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 fafc 	bl	800517c <HAL_RCC_ClockConfig>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002b8a:	f000 f893 	bl	8002cb4 <Error_Handler>
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3750      	adds	r7, #80	@ 0x50
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40007000 	.word	0x40007000

08002ba0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ba4:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <MX_USART1_UART_Init+0x48>)
 8002ba6:	4a11      	ldr	r2, [pc, #68]	@ (8002bec <MX_USART1_UART_Init+0x4c>)
 8002ba8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8002baa:	4b0f      	ldr	r3, [pc, #60]	@ (8002be8 <MX_USART1_UART_Init+0x48>)
 8002bac:	4a10      	ldr	r2, [pc, #64]	@ (8002bf0 <MX_USART1_UART_Init+0x50>)
 8002bae:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <MX_USART1_UART_Init+0x48>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <MX_USART1_UART_Init+0x48>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <MX_USART1_UART_Init+0x48>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <MX_USART1_UART_Init+0x48>)
 8002bc4:	220c      	movs	r2, #12
 8002bc6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bc8:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <MX_USART1_UART_Init+0x48>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <MX_USART1_UART_Init+0x48>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8002bd4:	4804      	ldr	r0, [pc, #16]	@ (8002be8 <MX_USART1_UART_Init+0x48>)
 8002bd6:	f002 fd01 	bl	80055dc <HAL_HalfDuplex_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8002be0:	f000 f868 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000784 	.word	0x20000784
 8002bec:	40011000 	.word	0x40011000
 8002bf0:	000f4240 	.word	0x000f4240

08002bf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bf8:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002bfa:	4a12      	ldr	r2, [pc, #72]	@ (8002c44 <MX_USART2_UART_Init+0x50>)
 8002bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bfe:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c06:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c12:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c18:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1e:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c24:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c2a:	4805      	ldr	r0, [pc, #20]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c2c:	f002 fc86 	bl	800553c <HAL_UART_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c36:	f000 f83d 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200007cc 	.word	0x200007cc
 8002c44:	40004400 	.word	0x40004400

08002c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b17      	ldr	r3, [pc, #92]	@ (8002cb0 <MX_GPIO_Init+0x68>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	4a16      	ldr	r2, [pc, #88]	@ (8002cb0 <MX_GPIO_Init+0x68>)
 8002c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c5e:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <MX_GPIO_Init+0x68>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <MX_GPIO_Init+0x68>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	4a0f      	ldr	r2, [pc, #60]	@ (8002cb0 <MX_GPIO_Init+0x68>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <MX_GPIO_Init+0x68>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
 8002c8a:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <MX_GPIO_Init+0x68>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	4a08      	ldr	r2, [pc, #32]	@ (8002cb0 <MX_GPIO_Init+0x68>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <MX_GPIO_Init+0x68>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800

08002cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb8:	b672      	cpsid	i
}
 8002cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cbc:	bf00      	nop
 8002cbe:	e7fd      	b.n	8002cbc <Error_Handler+0x8>

08002cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	4b10      	ldr	r3, [pc, #64]	@ (8002d0c <HAL_MspInit+0x4c>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cce:	4a0f      	ldr	r2, [pc, #60]	@ (8002d0c <HAL_MspInit+0x4c>)
 8002cd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <HAL_MspInit+0x4c>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cde:	607b      	str	r3, [r7, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <HAL_MspInit+0x4c>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	4a08      	ldr	r2, [pc, #32]	@ (8002d0c <HAL_MspInit+0x4c>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cf2:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <HAL_MspInit+0x4c>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800

08002d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	@ 0x30
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a36      	ldr	r2, [pc, #216]	@ (8002e08 <HAL_UART_MspInit+0xf8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d135      	bne.n	8002d9e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	4b35      	ldr	r3, [pc, #212]	@ (8002e0c <HAL_UART_MspInit+0xfc>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	4a34      	ldr	r2, [pc, #208]	@ (8002e0c <HAL_UART_MspInit+0xfc>)
 8002d3c:	f043 0310 	orr.w	r3, r3, #16
 8002d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d42:	4b32      	ldr	r3, [pc, #200]	@ (8002e0c <HAL_UART_MspInit+0xfc>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	4b2e      	ldr	r3, [pc, #184]	@ (8002e0c <HAL_UART_MspInit+0xfc>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	4a2d      	ldr	r2, [pc, #180]	@ (8002e0c <HAL_UART_MspInit+0xfc>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002e0c <HAL_UART_MspInit+0xfc>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d70:	2302      	movs	r3, #2
 8002d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d7c:	2307      	movs	r3, #7
 8002d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d80:	f107 031c 	add.w	r3, r7, #28
 8002d84:	4619      	mov	r1, r3
 8002d86:	4822      	ldr	r0, [pc, #136]	@ (8002e10 <HAL_UART_MspInit+0x100>)
 8002d88:	f000 fbaa 	bl	80034e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2100      	movs	r1, #0
 8002d90:	2025      	movs	r0, #37	@ 0x25
 8002d92:	f000 fadc 	bl	800334e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d96:	2025      	movs	r0, #37	@ 0x25
 8002d98:	f000 faf5 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d9c:	e030      	b.n	8002e00 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e14 <HAL_UART_MspInit+0x104>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d12b      	bne.n	8002e00 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	4b17      	ldr	r3, [pc, #92]	@ (8002e0c <HAL_UART_MspInit+0xfc>)
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	4a16      	ldr	r2, [pc, #88]	@ (8002e0c <HAL_UART_MspInit+0xfc>)
 8002db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002db8:	4b14      	ldr	r3, [pc, #80]	@ (8002e0c <HAL_UART_MspInit+0xfc>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	4b10      	ldr	r3, [pc, #64]	@ (8002e0c <HAL_UART_MspInit+0xfc>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	4a0f      	ldr	r2, [pc, #60]	@ (8002e0c <HAL_UART_MspInit+0xfc>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8002e0c <HAL_UART_MspInit+0xfc>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002de0:	230c      	movs	r3, #12
 8002de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dec:	2302      	movs	r3, #2
 8002dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002df0:	2307      	movs	r3, #7
 8002df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df4:	f107 031c 	add.w	r3, r7, #28
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4805      	ldr	r0, [pc, #20]	@ (8002e10 <HAL_UART_MspInit+0x100>)
 8002dfc:	f000 fb70 	bl	80034e0 <HAL_GPIO_Init>
}
 8002e00:	bf00      	nop
 8002e02:	3730      	adds	r7, #48	@ 0x30
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40011000 	.word	0x40011000
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40020000 	.word	0x40020000
 8002e14:	40004400 	.word	0x40004400

08002e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e1c:	bf00      	nop
 8002e1e:	e7fd      	b.n	8002e1c <NMI_Handler+0x4>

08002e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <HardFault_Handler+0x4>

08002e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e2c:	bf00      	nop
 8002e2e:	e7fd      	b.n	8002e2c <MemManage_Handler+0x4>

08002e30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e34:	bf00      	nop
 8002e36:	e7fd      	b.n	8002e34 <BusFault_Handler+0x4>

08002e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <UsageFault_Handler+0x4>

08002e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e6e:	f000 f94f 	bl	8003110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e7c:	4802      	ldr	r0, [pc, #8]	@ (8002e88 <USART1_IRQHandler+0x10>)
 8002e7e:	f002 fd27 	bl	80058d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000784 	.word	0x20000784

08002e8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e90:	4802      	ldr	r0, [pc, #8]	@ (8002e9c <OTG_FS_IRQHandler+0x10>)
 8002e92:	f000 fded 	bl	8003a70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200020fc 	.word	0x200020fc

08002ea0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return 1;
 8002ea4:	2301      	movs	r3, #1
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <_kill>:

int _kill(int pid, int sig)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002eba:	f008 fd2d 	bl	800b918 <__errno>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2216      	movs	r2, #22
 8002ec2:	601a      	str	r2, [r3, #0]
  return -1;
 8002ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <_exit>:

void _exit (int status)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff ffe7 	bl	8002eb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ee2:	bf00      	nop
 8002ee4:	e7fd      	b.n	8002ee2 <_exit+0x12>

08002ee6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e00a      	b.n	8002f0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ef8:	f3af 8000 	nop.w
 8002efc:	4601      	mov	r1, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	60ba      	str	r2, [r7, #8]
 8002f04:	b2ca      	uxtb	r2, r1
 8002f06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	dbf0      	blt.n	8002ef8 <_read+0x12>
  }

  return len;
 8002f16:	687b      	ldr	r3, [r7, #4]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f48:	605a      	str	r2, [r3, #4]
  return 0;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <_isatty>:

int _isatty(int file)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f60:	2301      	movs	r3, #1
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b085      	sub	sp, #20
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f90:	4a14      	ldr	r2, [pc, #80]	@ (8002fe4 <_sbrk+0x5c>)
 8002f92:	4b15      	ldr	r3, [pc, #84]	@ (8002fe8 <_sbrk+0x60>)
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f9c:	4b13      	ldr	r3, [pc, #76]	@ (8002fec <_sbrk+0x64>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fa4:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <_sbrk+0x64>)
 8002fa6:	4a12      	ldr	r2, [pc, #72]	@ (8002ff0 <_sbrk+0x68>)
 8002fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002faa:	4b10      	ldr	r3, [pc, #64]	@ (8002fec <_sbrk+0x64>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d207      	bcs.n	8002fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb8:	f008 fcae 	bl	800b918 <__errno>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc6:	e009      	b.n	8002fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc8:	4b08      	ldr	r3, [pc, #32]	@ (8002fec <_sbrk+0x64>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fce:	4b07      	ldr	r3, [pc, #28]	@ (8002fec <_sbrk+0x64>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	4a05      	ldr	r2, [pc, #20]	@ (8002fec <_sbrk+0x64>)
 8002fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fda:	68fb      	ldr	r3, [r7, #12]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20020000 	.word	0x20020000
 8002fe8:	00000400 	.word	0x00000400
 8002fec:	20000c14 	.word	0x20000c14
 8002ff0:	20002950 	.word	0x20002950

08002ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ff8:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <SystemInit+0x20>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffe:	4a05      	ldr	r2, [pc, #20]	@ (8003014 <SystemInit+0x20>)
 8003000:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003004:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003050 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800301c:	f7ff ffea 	bl	8002ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003020:	480c      	ldr	r0, [pc, #48]	@ (8003054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003022:	490d      	ldr	r1, [pc, #52]	@ (8003058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003024:	4a0d      	ldr	r2, [pc, #52]	@ (800305c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003028:	e002      	b.n	8003030 <LoopCopyDataInit>

0800302a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800302a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800302c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800302e:	3304      	adds	r3, #4

08003030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003034:	d3f9      	bcc.n	800302a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003036:	4a0a      	ldr	r2, [pc, #40]	@ (8003060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003038:	4c0a      	ldr	r4, [pc, #40]	@ (8003064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800303a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800303c:	e001      	b.n	8003042 <LoopFillZerobss>

0800303e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800303e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003040:	3204      	adds	r2, #4

08003042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003044:	d3fb      	bcc.n	800303e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003046:	f008 fc6d 	bl	800b924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800304a:	f7ff fc71 	bl	8002930 <main>
  bx  lr    
 800304e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003050:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003058:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 800305c:	0800dce8 	.word	0x0800dce8
  ldr r2, =_sbss
 8003060:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8003064:	2000294c 	.word	0x2000294c

08003068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003068:	e7fe      	b.n	8003068 <ADC_IRQHandler>
	...

0800306c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003070:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <HAL_Init+0x40>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a0d      	ldr	r2, [pc, #52]	@ (80030ac <HAL_Init+0x40>)
 8003076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800307a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800307c:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <HAL_Init+0x40>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0a      	ldr	r2, [pc, #40]	@ (80030ac <HAL_Init+0x40>)
 8003082:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003086:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003088:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <HAL_Init+0x40>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a07      	ldr	r2, [pc, #28]	@ (80030ac <HAL_Init+0x40>)
 800308e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003092:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003094:	2003      	movs	r0, #3
 8003096:	f000 f94f 	bl	8003338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800309a:	200f      	movs	r0, #15
 800309c:	f000 f808 	bl	80030b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030a0:	f7ff fe0e 	bl	8002cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023c00 	.word	0x40023c00

080030b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030b8:	4b12      	ldr	r3, [pc, #72]	@ (8003104 <HAL_InitTick+0x54>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b12      	ldr	r3, [pc, #72]	@ (8003108 <HAL_InitTick+0x58>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f967 	bl	80033a2 <HAL_SYSTICK_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e00e      	b.n	80030fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b0f      	cmp	r3, #15
 80030e2:	d80a      	bhi.n	80030fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e4:	2200      	movs	r2, #0
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	f000 f92f 	bl	800334e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f0:	4a06      	ldr	r2, [pc, #24]	@ (800310c <HAL_InitTick+0x5c>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	2000000c 	.word	0x2000000c
 8003108:	20000014 	.word	0x20000014
 800310c:	20000010 	.word	0x20000010

08003110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003114:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_IncTick+0x20>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <HAL_IncTick+0x24>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4413      	add	r3, r2
 8003120:	4a04      	ldr	r2, [pc, #16]	@ (8003134 <HAL_IncTick+0x24>)
 8003122:	6013      	str	r3, [r2, #0]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000014 	.word	0x20000014
 8003134:	20000c18 	.word	0x20000c18

08003138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return uwTick;
 800313c:	4b03      	ldr	r3, [pc, #12]	@ (800314c <HAL_GetTick+0x14>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20000c18 	.word	0x20000c18

08003150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff ffee 	bl	8003138 <HAL_GetTick>
 800315c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d005      	beq.n	8003176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800316a:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <HAL_Delay+0x44>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003176:	bf00      	nop
 8003178:	f7ff ffde 	bl	8003138 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d8f7      	bhi.n	8003178 <HAL_Delay+0x28>
  {
  }
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000014 	.word	0x20000014

08003198 <__NVIC_SetPriorityGrouping>:
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a8:	4b0c      	ldr	r3, [pc, #48]	@ (80031dc <__NVIC_SetPriorityGrouping+0x44>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031b4:	4013      	ands	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ca:	4a04      	ldr	r2, [pc, #16]	@ (80031dc <__NVIC_SetPriorityGrouping+0x44>)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	60d3      	str	r3, [r2, #12]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <__NVIC_GetPriorityGrouping>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e4:	4b04      	ldr	r3, [pc, #16]	@ (80031f8 <__NVIC_GetPriorityGrouping+0x18>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	0a1b      	lsrs	r3, r3, #8
 80031ea:	f003 0307 	and.w	r3, r3, #7
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_EnableIRQ>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	2b00      	cmp	r3, #0
 800320c:	db0b      	blt.n	8003226 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	f003 021f 	and.w	r2, r3, #31
 8003214:	4907      	ldr	r1, [pc, #28]	@ (8003234 <__NVIC_EnableIRQ+0x38>)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2001      	movs	r0, #1
 800321e:	fa00 f202 	lsl.w	r2, r0, r2
 8003222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000e100 	.word	0xe000e100

08003238 <__NVIC_SetPriority>:
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	6039      	str	r1, [r7, #0]
 8003242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	2b00      	cmp	r3, #0
 800324a:	db0a      	blt.n	8003262 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	490c      	ldr	r1, [pc, #48]	@ (8003284 <__NVIC_SetPriority+0x4c>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	0112      	lsls	r2, r2, #4
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	440b      	add	r3, r1
 800325c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003260:	e00a      	b.n	8003278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	4908      	ldr	r1, [pc, #32]	@ (8003288 <__NVIC_SetPriority+0x50>)
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	3b04      	subs	r3, #4
 8003270:	0112      	lsls	r2, r2, #4
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	440b      	add	r3, r1
 8003276:	761a      	strb	r2, [r3, #24]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000e100 	.word	0xe000e100
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <NVIC_EncodePriority>:
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	@ 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f1c3 0307 	rsb	r3, r3, #7
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	bf28      	it	cs
 80032aa:	2304      	movcs	r3, #4
 80032ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d902      	bls.n	80032bc <NVIC_EncodePriority+0x30>
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3b03      	subs	r3, #3
 80032ba:	e000      	b.n	80032be <NVIC_EncodePriority+0x32>
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	401a      	ands	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d4:	f04f 31ff 	mov.w	r1, #4294967295
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa01 f303 	lsl.w	r3, r1, r3
 80032de:	43d9      	mvns	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e4:	4313      	orrs	r3, r2
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3724      	adds	r7, #36	@ 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <SysTick_Config>:
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3b01      	subs	r3, #1
 8003300:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003304:	d301      	bcc.n	800330a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003306:	2301      	movs	r3, #1
 8003308:	e00f      	b.n	800332a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800330a:	4a0a      	ldr	r2, [pc, #40]	@ (8003334 <SysTick_Config+0x40>)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003312:	210f      	movs	r1, #15
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f7ff ff8e 	bl	8003238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800331c:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <SysTick_Config+0x40>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003322:	4b04      	ldr	r3, [pc, #16]	@ (8003334 <SysTick_Config+0x40>)
 8003324:	2207      	movs	r2, #7
 8003326:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	e000e010 	.word	0xe000e010

08003338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff29 	bl	8003198 <__NVIC_SetPriorityGrouping>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	4603      	mov	r3, r0
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003360:	f7ff ff3e 	bl	80031e0 <__NVIC_GetPriorityGrouping>
 8003364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	6978      	ldr	r0, [r7, #20]
 800336c:	f7ff ff8e 	bl	800328c <NVIC_EncodePriority>
 8003370:	4602      	mov	r2, r0
 8003372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff5d 	bl	8003238 <__NVIC_SetPriority>
}
 800337e:	bf00      	nop
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	4603      	mov	r3, r0
 800338e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff31 	bl	80031fc <__NVIC_EnableIRQ>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff ffa2 	bl	80032f4 <SysTick_Config>
 80033b0:	4603      	mov	r3, r0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033c8:	f7ff feb6 	bl	8003138 <HAL_GetTick>
 80033cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d008      	beq.n	80033ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2280      	movs	r2, #128	@ 0x80
 80033de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e052      	b.n	8003492 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0216 	bic.w	r2, r2, #22
 80033fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800340a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d103      	bne.n	800341c <HAL_DMA_Abort+0x62>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0208 	bic.w	r2, r2, #8
 800342a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800343c:	e013      	b.n	8003466 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800343e:	f7ff fe7b 	bl	8003138 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b05      	cmp	r3, #5
 800344a:	d90c      	bls.n	8003466 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2203      	movs	r2, #3
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e015      	b.n	8003492 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e4      	bne.n	800343e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003478:	223f      	movs	r2, #63	@ 0x3f
 800347a:	409a      	lsls	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d004      	beq.n	80034b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2280      	movs	r2, #128	@ 0x80
 80034b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e00c      	b.n	80034d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2205      	movs	r2, #5
 80034bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b089      	sub	sp, #36	@ 0x24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	e159      	b.n	80037b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034fc:	2201      	movs	r2, #1
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	429a      	cmp	r2, r3
 8003516:	f040 8148 	bne.w	80037aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d005      	beq.n	8003532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800352e:	2b02      	cmp	r3, #2
 8003530:	d130      	bne.n	8003594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	2203      	movs	r2, #3
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4013      	ands	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003568:	2201      	movs	r2, #1
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 0201 	and.w	r2, r3, #1
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b03      	cmp	r3, #3
 800359e:	d017      	beq.n	80035d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2203      	movs	r2, #3
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d123      	bne.n	8003624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	08da      	lsrs	r2, r3, #3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3208      	adds	r2, #8
 80035e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	220f      	movs	r2, #15
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	08da      	lsrs	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3208      	adds	r2, #8
 800361e:	69b9      	ldr	r1, [r7, #24]
 8003620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	2203      	movs	r2, #3
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0203 	and.w	r2, r3, #3
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80a2 	beq.w	80037aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	4b57      	ldr	r3, [pc, #348]	@ (80037c8 <HAL_GPIO_Init+0x2e8>)
 800366c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366e:	4a56      	ldr	r2, [pc, #344]	@ (80037c8 <HAL_GPIO_Init+0x2e8>)
 8003670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003674:	6453      	str	r3, [r2, #68]	@ 0x44
 8003676:	4b54      	ldr	r3, [pc, #336]	@ (80037c8 <HAL_GPIO_Init+0x2e8>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003682:	4a52      	ldr	r2, [pc, #328]	@ (80037cc <HAL_GPIO_Init+0x2ec>)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	3302      	adds	r3, #2
 800368a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	220f      	movs	r2, #15
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a49      	ldr	r2, [pc, #292]	@ (80037d0 <HAL_GPIO_Init+0x2f0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d019      	beq.n	80036e2 <HAL_GPIO_Init+0x202>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a48      	ldr	r2, [pc, #288]	@ (80037d4 <HAL_GPIO_Init+0x2f4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_GPIO_Init+0x1fe>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a47      	ldr	r2, [pc, #284]	@ (80037d8 <HAL_GPIO_Init+0x2f8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00d      	beq.n	80036da <HAL_GPIO_Init+0x1fa>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a46      	ldr	r2, [pc, #280]	@ (80037dc <HAL_GPIO_Init+0x2fc>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d007      	beq.n	80036d6 <HAL_GPIO_Init+0x1f6>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a45      	ldr	r2, [pc, #276]	@ (80037e0 <HAL_GPIO_Init+0x300>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d101      	bne.n	80036d2 <HAL_GPIO_Init+0x1f2>
 80036ce:	2304      	movs	r3, #4
 80036d0:	e008      	b.n	80036e4 <HAL_GPIO_Init+0x204>
 80036d2:	2307      	movs	r3, #7
 80036d4:	e006      	b.n	80036e4 <HAL_GPIO_Init+0x204>
 80036d6:	2303      	movs	r3, #3
 80036d8:	e004      	b.n	80036e4 <HAL_GPIO_Init+0x204>
 80036da:	2302      	movs	r3, #2
 80036dc:	e002      	b.n	80036e4 <HAL_GPIO_Init+0x204>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <HAL_GPIO_Init+0x204>
 80036e2:	2300      	movs	r3, #0
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	f002 0203 	and.w	r2, r2, #3
 80036ea:	0092      	lsls	r2, r2, #2
 80036ec:	4093      	lsls	r3, r2
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036f4:	4935      	ldr	r1, [pc, #212]	@ (80037cc <HAL_GPIO_Init+0x2ec>)
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	089b      	lsrs	r3, r3, #2
 80036fa:	3302      	adds	r3, #2
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003702:	4b38      	ldr	r3, [pc, #224]	@ (80037e4 <HAL_GPIO_Init+0x304>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	43db      	mvns	r3, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4013      	ands	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003726:	4a2f      	ldr	r2, [pc, #188]	@ (80037e4 <HAL_GPIO_Init+0x304>)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800372c:	4b2d      	ldr	r3, [pc, #180]	@ (80037e4 <HAL_GPIO_Init+0x304>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003750:	4a24      	ldr	r2, [pc, #144]	@ (80037e4 <HAL_GPIO_Init+0x304>)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003756:	4b23      	ldr	r3, [pc, #140]	@ (80037e4 <HAL_GPIO_Init+0x304>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	43db      	mvns	r3, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4013      	ands	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800377a:	4a1a      	ldr	r2, [pc, #104]	@ (80037e4 <HAL_GPIO_Init+0x304>)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003780:	4b18      	ldr	r3, [pc, #96]	@ (80037e4 <HAL_GPIO_Init+0x304>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037a4:	4a0f      	ldr	r2, [pc, #60]	@ (80037e4 <HAL_GPIO_Init+0x304>)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3301      	adds	r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	2b0f      	cmp	r3, #15
 80037b4:	f67f aea2 	bls.w	80034fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	3724      	adds	r7, #36	@ 0x24
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40013800 	.word	0x40013800
 80037d0:	40020000 	.word	0x40020000
 80037d4:	40020400 	.word	0x40020400
 80037d8:	40020800 	.word	0x40020800
 80037dc:	40020c00 	.word	0x40020c00
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40013c00 	.word	0x40013c00

080037e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e101      	b.n	80039fe <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f006 fcb7 	bl	800a188 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2203      	movs	r2, #3
 800381e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003828:	d102      	bne.n	8003830 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f003 f888 	bl	800694a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	7c1a      	ldrb	r2, [r3, #16]
 8003842:	f88d 2000 	strb.w	r2, [sp]
 8003846:	3304      	adds	r3, #4
 8003848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800384a:	f002 ff67 	bl	800671c <USB_CoreInit>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0ce      	b.n	80039fe <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f003 f880 	bl	800696c <USB_SetCurrentMode>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0bf      	b.n	80039fe <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	e04a      	b.n	800391a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3315      	adds	r3, #21
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	3314      	adds	r3, #20
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	b298      	uxth	r0, r3
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	332e      	adds	r3, #46	@ 0x2e
 80038c0:	4602      	mov	r2, r0
 80038c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	3318      	adds	r3, #24
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	331c      	adds	r3, #28
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	3320      	adds	r3, #32
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	3324      	adds	r3, #36	@ 0x24
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	3301      	adds	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	791b      	ldrb	r3, [r3, #4]
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	429a      	cmp	r2, r3
 8003922:	d3af      	bcc.n	8003884 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	e044      	b.n	80039b4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003940:	7bfa      	ldrb	r2, [r7, #15]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003982:	7bfa      	ldrb	r2, [r7, #15]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	3301      	adds	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	791b      	ldrb	r3, [r3, #4]
 80039b8:	7bfa      	ldrb	r2, [r7, #15]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d3b5      	bcc.n	800392a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	7c1a      	ldrb	r2, [r3, #16]
 80039c6:	f88d 2000 	strb.w	r2, [sp]
 80039ca:	3304      	adds	r3, #4
 80039cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ce:	f003 f819 	bl	8006a04 <USB_DevInit>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e00c      	b.n	80039fe <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f004 f863 	bl	8007ac2 <USB_DevDisconnect>

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_PCD_Start+0x1c>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e022      	b.n	8003a68 <HAL_PCD_Start+0x62>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d105      	bne.n	8003a4a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f002 ff6a 	bl	8006928 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f004 f811 	bl	8007a80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b08d      	sub	sp, #52	@ 0x34
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f004 f8cf 	bl	8007c2a <USB_GetMode>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f040 848c 	bne.w	80043ac <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f004 f833 	bl	8007b04 <USB_ReadInterrupts>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8482 	beq.w	80043aa <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f004 f820 	bl	8007b04 <USB_ReadInterrupts>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d107      	bne.n	8003ade <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f002 0202 	and.w	r2, r2, #2
 8003adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f004 f80e 	bl	8007b04 <USB_ReadInterrupts>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d161      	bne.n	8003bb6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0210 	bic.w	r2, r2, #16
 8003b00:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	f003 020f 	and.w	r2, r3, #15
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3304      	adds	r3, #4
 8003b20:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	0c5b      	lsrs	r3, r3, #17
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d124      	bne.n	8003b78 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d035      	beq.n	8003ba6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	6a38      	ldr	r0, [r7, #32]
 8003b4e:	f003 fe45 	bl	80077dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b5e:	441a      	add	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b70:	441a      	add	r2, r3
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	615a      	str	r2, [r3, #20]
 8003b76:	e016      	b.n	8003ba6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	0c5b      	lsrs	r3, r3, #17
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	2b06      	cmp	r3, #6
 8003b82:	d110      	bne.n	8003ba6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6a38      	ldr	r0, [r7, #32]
 8003b90:	f003 fe24 	bl	80077dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ba0:	441a      	add	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699a      	ldr	r2, [r3, #24]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0210 	orr.w	r2, r2, #16
 8003bb4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f003 ffa2 	bl	8007b04 <USB_ReadInterrupts>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bc6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bca:	f040 80a7 	bne.w	8003d1c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f003 ffa7 	bl	8007b2a <USB_ReadDevAllOutEpInterrupt>
 8003bdc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003bde:	e099      	b.n	8003d14 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 808e 	beq.w	8003d08 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f003 ffcb 	bl	8007b92 <USB_ReadDevOutEPInterrupt>
 8003bfc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00c      	beq.n	8003c22 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c14:	461a      	mov	r2, r3
 8003c16:	2301      	movs	r3, #1
 8003c18:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fea3 	bl	8004968 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00c      	beq.n	8003c46 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 ff79 	bl	8004b38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2310      	movs	r3, #16
 8003c60:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d030      	beq.n	8003cce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c74:	2b80      	cmp	r3, #128	@ 0x80
 8003c76:	d109      	bne.n	8003c8c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c8a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	78db      	ldrb	r3, [r3, #3]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d108      	bne.n	8003cbc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2200      	movs	r2, #0
 8003cae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f006 fb62 	bl	800a380 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2302      	movs	r3, #2
 8003ccc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d009      	beq.n	8003d08 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d00:	461a      	mov	r2, r3
 8003d02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d06:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f47f af62 	bne.w	8003be0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f003 feef 	bl	8007b04 <USB_ReadInterrupts>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d30:	f040 80db 	bne.w	8003eea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f003 ff10 	bl	8007b5e <USB_ReadDevAllInEpInterrupt>
 8003d3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003d44:	e0cd      	b.n	8003ee2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80c2 	beq.w	8003ed6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f003 ff36 	bl	8007bce <USB_ReadDevInEPInterrupt>
 8003d62:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d057      	beq.n	8003e1e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	2201      	movs	r2, #1
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69f9      	ldr	r1, [r7, #28]
 8003d8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d8e:	4013      	ands	r3, r2
 8003d90:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d9e:	461a      	mov	r2, r3
 8003da0:	2301      	movs	r3, #1
 8003da2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	799b      	ldrb	r3, [r3, #6]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d132      	bne.n	8003e12 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	3320      	adds	r3, #32
 8003dbc:	6819      	ldr	r1, [r3, #0]
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4403      	add	r3, r0
 8003dcc:	331c      	adds	r3, #28
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4419      	add	r1, r3
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4403      	add	r3, r0
 8003de0:	3320      	adds	r3, #32
 8003de2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d113      	bne.n	8003e12 <HAL_PCD_IRQHandler+0x3a2>
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	3324      	adds	r3, #36	@ 0x24
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d108      	bne.n	8003e12 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	f003 ff3d 	bl	8007c8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f006 fa36 	bl	800a28a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e34:	461a      	mov	r2, r3
 8003e36:	2308      	movs	r3, #8
 8003e38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e50:	461a      	mov	r2, r3
 8003e52:	2310      	movs	r3, #16
 8003e54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2340      	movs	r3, #64	@ 0x40
 8003e70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d023      	beq.n	8003ec4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e7e:	6a38      	ldr	r0, [r7, #32]
 8003e80:	f002 ff24 	bl	8006ccc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	3310      	adds	r3, #16
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	4413      	add	r3, r2
 8003e94:	3304      	adds	r3, #4
 8003e96:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	78db      	ldrb	r3, [r3, #3]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d108      	bne.n	8003eb2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f006 fa79 	bl	800a3a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ece:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fcbd 	bl	8004850 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	3301      	adds	r3, #1
 8003eda:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ede:	085b      	lsrs	r3, r3, #1
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f47f af2e 	bne.w	8003d46 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f003 fe08 	bl	8007b04 <USB_ReadInterrupts>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003efe:	d122      	bne.n	8003f46 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d108      	bne.n	8003f30 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f26:	2100      	movs	r1, #0
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fea3 	bl	8004c74 <HAL_PCDEx_LPM_Callback>
 8003f2e:	e002      	b.n	8003f36 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f006 fa17 	bl	800a364 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f003 fdda 	bl	8007b04 <USB_ReadInterrupts>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f5a:	d112      	bne.n	8003f82 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d102      	bne.n	8003f72 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f006 f9d3 	bl	800a318 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003f80:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f003 fdbc 	bl	8007b04 <USB_ReadInterrupts>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f96:	f040 80b7 	bne.w	8004108 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2110      	movs	r1, #16
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f002 fe89 	bl	8006ccc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fbe:	e046      	b.n	800404e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fd2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ff2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004000:	461a      	mov	r2, r3
 8004002:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004006:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004022:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004026:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004042:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004046:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404a:	3301      	adds	r3, #1
 800404c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	791b      	ldrb	r3, [r3, #4]
 8004052:	461a      	mov	r2, r3
 8004054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004056:	4293      	cmp	r3, r2
 8004058:	d3b2      	bcc.n	8003fc0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004068:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800406c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	7bdb      	ldrb	r3, [r3, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800407c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004086:	f043 030b 	orr.w	r3, r3, #11
 800408a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800409c:	f043 030b 	orr.w	r3, r3, #11
 80040a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80040a2:	e015      	b.n	80040d0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040b6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80040ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040ca:	f043 030b 	orr.w	r3, r3, #11
 80040ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80040e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040f2:	461a      	mov	r2, r3
 80040f4:	f003 fdca 	bl	8007c8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f003 fcf9 	bl	8007b04 <USB_ReadInterrupts>
 8004112:	4603      	mov	r3, r0
 8004114:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800411c:	d123      	bne.n	8004166 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f003 fd8f 	bl	8007c46 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f002 fe46 	bl	8006dbe <USB_GetDevSpeed>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681c      	ldr	r4, [r3, #0]
 800413e:	f001 f9c9 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 8004142:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004148:	461a      	mov	r2, r3
 800414a:	4620      	mov	r0, r4
 800414c:	f002 fb4a 	bl	80067e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f006 f8c2 	bl	800a2da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695a      	ldr	r2, [r3, #20]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004164:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f003 fcca 	bl	8007b04 <USB_ReadInterrupts>
 8004170:	4603      	mov	r3, r0
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b08      	cmp	r3, #8
 8004178:	d10a      	bne.n	8004190 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f006 f89f 	bl	800a2be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f002 0208 	and.w	r2, r2, #8
 800418e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f003 fcb5 	bl	8007b04 <USB_ReadInterrupts>
 800419a:	4603      	mov	r3, r0
 800419c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a0:	2b80      	cmp	r3, #128	@ 0x80
 80041a2:	d123      	bne.n	80041ec <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041b0:	2301      	movs	r3, #1
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b4:	e014      	b.n	80041e0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d105      	bne.n	80041da <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	4619      	mov	r1, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fb0a 	bl	80047ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	3301      	adds	r3, #1
 80041de:	627b      	str	r3, [r7, #36]	@ 0x24
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	461a      	mov	r2, r3
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d3e4      	bcc.n	80041b6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f003 fc87 	bl	8007b04 <USB_ReadInterrupts>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004200:	d13c      	bne.n	800427c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004202:	2301      	movs	r3, #1
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
 8004206:	e02b      	b.n	8004260 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	3318      	adds	r3, #24
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d115      	bne.n	800425a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800422e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004230:	2b00      	cmp	r3, #0
 8004232:	da12      	bge.n	800425a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004238:	4613      	mov	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	3317      	adds	r3, #23
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004250:	b2db      	uxtb	r3, r3
 8004252:	4619      	mov	r1, r3
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 faca 	bl	80047ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	3301      	adds	r3, #1
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	791b      	ldrb	r3, [r3, #4]
 8004264:	461a      	mov	r2, r3
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	4293      	cmp	r3, r2
 800426a:	d3cd      	bcc.n	8004208 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800427a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f003 fc3f 	bl	8007b04 <USB_ReadInterrupts>
 8004286:	4603      	mov	r3, r0
 8004288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800428c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004290:	d156      	bne.n	8004340 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004292:	2301      	movs	r3, #1
 8004294:	627b      	str	r3, [r7, #36]	@ 0x24
 8004296:	e045      	b.n	8004324 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d12e      	bne.n	800431e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da2b      	bge.n	800431e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80042d2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d121      	bne.n	800431e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042de:	4613      	mov	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80042ec:	2201      	movs	r2, #1
 80042ee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004316:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800431a:	6053      	str	r3, [r2, #4]
            break;
 800431c:	e008      	b.n	8004330 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	3301      	adds	r3, #1
 8004322:	627b      	str	r3, [r7, #36]	@ 0x24
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	791b      	ldrb	r3, [r3, #4]
 8004328:	461a      	mov	r2, r3
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	4293      	cmp	r3, r2
 800432e:	d3b3      	bcc.n	8004298 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695a      	ldr	r2, [r3, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800433e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f003 fbdd 	bl	8007b04 <USB_ReadInterrupts>
 800434a:	4603      	mov	r3, r0
 800434c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004354:	d10a      	bne.n	800436c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f006 f836 	bl	800a3c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800436a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f003 fbc7 	bl	8007b04 <USB_ReadInterrupts>
 8004376:	4603      	mov	r3, r0
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b04      	cmp	r3, #4
 800437e:	d115      	bne.n	80043ac <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f006 f826 	bl	800a3e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6859      	ldr	r1, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	e000      	b.n	80043ac <HAL_PCD_IRQHandler+0x93c>
      return;
 80043aa:	bf00      	nop
    }
  }
}
 80043ac:	3734      	adds	r7, #52	@ 0x34
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd90      	pop	{r4, r7, pc}

080043b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_PCD_SetAddress+0x1a>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e012      	b.n	80043f2 <HAL_PCD_SetAddress+0x40>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	4611      	mov	r1, r2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f003 fb26 	bl	8007a34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	4608      	mov	r0, r1
 8004404:	4611      	mov	r1, r2
 8004406:	461a      	mov	r2, r3
 8004408:	4603      	mov	r3, r0
 800440a:	70fb      	strb	r3, [r7, #3]
 800440c:	460b      	mov	r3, r1
 800440e:	803b      	strh	r3, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800441c:	2b00      	cmp	r3, #0
 800441e:	da0f      	bge.n	8004440 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	f003 020f 	and.w	r2, r3, #15
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	3310      	adds	r3, #16
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	4413      	add	r3, r2
 8004434:	3304      	adds	r3, #4
 8004436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	705a      	strb	r2, [r3, #1]
 800443e:	e00f      	b.n	8004460 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	f003 020f 	and.w	r2, r3, #15
 8004446:	4613      	mov	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	3304      	adds	r3, #4
 8004458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	b2da      	uxtb	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800446c:	883b      	ldrh	r3, [r7, #0]
 800446e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	78ba      	ldrb	r2, [r7, #2]
 800447a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	785b      	ldrb	r3, [r3, #1]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800448e:	78bb      	ldrb	r3, [r7, #2]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d102      	bne.n	800449a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_PCD_EP_Open+0xae>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e00e      	b.n	80044c6 <HAL_PCD_EP_Open+0xcc>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68f9      	ldr	r1, [r7, #12]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f002 fca6 	bl	8006e08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80044c4:	7afb      	ldrb	r3, [r7, #11]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	da0f      	bge.n	8004502 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	f003 020f 	and.w	r2, r3, #15
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	3310      	adds	r3, #16
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	3304      	adds	r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	705a      	strb	r2, [r3, #1]
 8004500:	e00f      	b.n	8004522 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	f003 020f 	and.w	r2, r3, #15
 8004508:	4613      	mov	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	4413      	add	r3, r2
 8004518:	3304      	adds	r3, #4
 800451a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004522:	78fb      	ldrb	r3, [r7, #3]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_PCD_EP_Close+0x6e>
 8004538:	2302      	movs	r3, #2
 800453a:	e00e      	b.n	800455a <HAL_PCD_EP_Close+0x8c>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68f9      	ldr	r1, [r7, #12]
 800454a:	4618      	mov	r0, r3
 800454c:	f002 fce4 	bl	8006f18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	460b      	mov	r3, r1
 8004570:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004572:	7afb      	ldrb	r3, [r7, #11]
 8004574:	f003 020f 	and.w	r2, r3, #15
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	3304      	adds	r3, #4
 800458a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2200      	movs	r2, #0
 800459c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2200      	movs	r2, #0
 80045a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045a4:	7afb      	ldrb	r3, [r7, #11]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	799b      	ldrb	r3, [r3, #6]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d102      	bne.n	80045be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	799b      	ldrb	r3, [r3, #6]
 80045c6:	461a      	mov	r2, r3
 80045c8:	6979      	ldr	r1, [r7, #20]
 80045ca:	f002 fd81 	bl	80070d0 <USB_EPStartXfer>

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 020f 	and.w	r2, r3, #15
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80045fa:	681b      	ldr	r3, [r3, #0]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	460b      	mov	r3, r1
 8004616:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004618:	7afb      	ldrb	r3, [r7, #11]
 800461a:	f003 020f 	and.w	r2, r3, #15
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	3310      	adds	r3, #16
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	3304      	adds	r3, #4
 800462e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2200      	movs	r2, #0
 8004640:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2201      	movs	r2, #1
 8004646:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004648:	7afb      	ldrb	r3, [r7, #11]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	b2da      	uxtb	r2, r3
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	799b      	ldrb	r3, [r3, #6]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d102      	bne.n	8004662 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	799b      	ldrb	r3, [r3, #6]
 800466a:	461a      	mov	r2, r3
 800466c:	6979      	ldr	r1, [r7, #20]
 800466e:	f002 fd2f 	bl	80070d0 <USB_EPStartXfer>

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	7912      	ldrb	r2, [r2, #4]
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e04f      	b.n	800473a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800469a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da0f      	bge.n	80046c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 020f 	and.w	r2, r3, #15
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	3310      	adds	r3, #16
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	3304      	adds	r3, #4
 80046b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	705a      	strb	r2, [r3, #1]
 80046c0:	e00d      	b.n	80046de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	3304      	adds	r3, #4
 80046d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_PCD_EP_SetStall+0x82>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e01d      	b.n	800473a <HAL_PCD_EP_SetStall+0xbe>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	4618      	mov	r0, r3
 800470e:	f003 f8bd 	bl	800788c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	7999      	ldrb	r1, [r3, #6]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800472a:	461a      	mov	r2, r3
 800472c:	f003 faae 	bl	8007c8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	460b      	mov	r3, r1
 800474c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	7912      	ldrb	r2, [r2, #4]
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e042      	b.n	80047e6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004764:	2b00      	cmp	r3, #0
 8004766:	da0f      	bge.n	8004788 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	f003 020f 	and.w	r2, r3, #15
 800476e:	4613      	mov	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	3310      	adds	r3, #16
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4413      	add	r3, r2
 800477c:	3304      	adds	r3, #4
 800477e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	705a      	strb	r2, [r3, #1]
 8004786:	e00f      	b.n	80047a8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	f003 020f 	and.w	r2, r3, #15
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	3304      	adds	r3, #4
 80047a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ae:	78fb      	ldrb	r3, [r7, #3]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_PCD_EP_ClrStall+0x86>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e00e      	b.n	80047e6 <HAL_PCD_EP_ClrStall+0xa4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68f9      	ldr	r1, [r7, #12]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f003 f8c6 	bl	8007968 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	460b      	mov	r3, r1
 80047f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	da0c      	bge.n	800481c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	f003 020f 	and.w	r2, r3, #15
 8004808:	4613      	mov	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	3310      	adds	r3, #16
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	4413      	add	r3, r2
 8004816:	3304      	adds	r3, #4
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	e00c      	b.n	8004836 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	f003 020f 	and.w	r2, r3, #15
 8004822:	4613      	mov	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	3304      	adds	r3, #4
 8004834:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68f9      	ldr	r1, [r7, #12]
 800483c:	4618      	mov	r0, r3
 800483e:	f002 fee5 	bl	800760c <USB_EPStopXfer>
 8004842:	4603      	mov	r3, r0
 8004844:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004846:	7afb      	ldrb	r3, [r7, #11]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08a      	sub	sp, #40	@ 0x28
 8004854:	af02      	add	r7, sp, #8
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	3310      	adds	r3, #16
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	4413      	add	r3, r2
 8004874:	3304      	adds	r3, #4
 8004876:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	429a      	cmp	r2, r3
 8004882:	d901      	bls.n	8004888 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e06b      	b.n	8004960 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	429a      	cmp	r2, r3
 800489c:	d902      	bls.n	80048a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	3303      	adds	r3, #3
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048ac:	e02a      	b.n	8004904 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d902      	bls.n	80048ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3303      	adds	r3, #3
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	68d9      	ldr	r1, [r3, #12]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	4603      	mov	r3, r0
 80048e6:	6978      	ldr	r0, [r7, #20]
 80048e8:	f002 ff3a 	bl	8007760 <USB_WritePacket>

    ep->xfer_buff  += len;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	441a      	add	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	441a      	add	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	429a      	cmp	r2, r3
 8004918:	d809      	bhi.n	800492e <PCD_WriteEmptyTxFifo+0xde>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004922:	429a      	cmp	r2, r3
 8004924:	d203      	bcs.n	800492e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1bf      	bne.n	80048ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	429a      	cmp	r2, r3
 8004938:	d811      	bhi.n	800495e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	2201      	movs	r2, #1
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800494e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	43db      	mvns	r3, r3
 8004954:	6939      	ldr	r1, [r7, #16]
 8004956:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800495a:	4013      	ands	r3, r2
 800495c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3720      	adds	r7, #32
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	333c      	adds	r3, #60	@ 0x3c
 8004980:	3304      	adds	r3, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	799b      	ldrb	r3, [r3, #6]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d17b      	bne.n	8004a96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d015      	beq.n	80049d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4a61      	ldr	r2, [pc, #388]	@ (8004b30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	f240 80b9 	bls.w	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80b3 	beq.w	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ca:	461a      	mov	r2, r3
 80049cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049d0:	6093      	str	r3, [r2, #8]
 80049d2:	e0a7      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ea:	461a      	mov	r2, r3
 80049ec:	2320      	movs	r3, #32
 80049ee:	6093      	str	r3, [r2, #8]
 80049f0:	e098      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f040 8093 	bne.w	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	4a4b      	ldr	r2, [pc, #300]	@ (8004b30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d90f      	bls.n	8004a26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a22:	6093      	str	r3, [r2, #8]
 8004a24:	e07e      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4413      	add	r3, r2
 8004a38:	3304      	adds	r3, #4
 8004a3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a1a      	ldr	r2, [r3, #32]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	0159      	lsls	r1, r3, #5
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	440b      	add	r3, r1
 8004a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a52:	1ad2      	subs	r2, r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d114      	bne.n	8004a88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a70:	461a      	mov	r2, r3
 8004a72:	2101      	movs	r1, #1
 8004a74:	f003 f90a 	bl	8007c8c <USB_EP0_OutStart>
 8004a78:	e006      	b.n	8004a88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	441a      	add	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f005 fbe0 	bl	800a254 <HAL_PCD_DataOutStageCallback>
 8004a94:	e046      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	4a26      	ldr	r2, [pc, #152]	@ (8004b34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d124      	bne.n	8004ae8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aba:	6093      	str	r3, [r2, #8]
 8004abc:	e032      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2320      	movs	r3, #32
 8004ad8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f005 fbb7 	bl	800a254 <HAL_PCD_DataOutStageCallback>
 8004ae6:	e01d      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d114      	bne.n	8004b18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b10:	461a      	mov	r2, r3
 8004b12:	2100      	movs	r1, #0
 8004b14:	f003 f8ba 	bl	8007c8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f005 fb98 	bl	800a254 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	4f54300a 	.word	0x4f54300a
 8004b34:	4f54310a 	.word	0x4f54310a

08004b38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	333c      	adds	r3, #60	@ 0x3c
 8004b50:	3304      	adds	r3, #4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a15      	ldr	r2, [pc, #84]	@ (8004bc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d90e      	bls.n	8004b8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b84:	461a      	mov	r2, r3
 8004b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f005 fb4f 	bl	800a230 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d90c      	bls.n	8004bb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	799b      	ldrb	r3, [r3, #6]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d108      	bne.n	8004bb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bac:	461a      	mov	r2, r3
 8004bae:	2101      	movs	r1, #1
 8004bb0:	f003 f86c 	bl	8007c8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	4f54300a 	.word	0x4f54300a

08004bc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d107      	bne.n	8004bf2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004be2:	883b      	ldrh	r3, [r7, #0]
 8004be4:	0419      	lsls	r1, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bf0:	e028      	b.n	8004c44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c00:	2300      	movs	r3, #0
 8004c02:	73fb      	strb	r3, [r7, #15]
 8004c04:	e00d      	b.n	8004c22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	3340      	adds	r3, #64	@ 0x40
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4413      	add	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
 8004c22:	7bfa      	ldrb	r2, [r7, #15]
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d3ec      	bcc.n	8004c06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c2c:	883b      	ldrh	r3, [r7, #0]
 8004c2e:	0418      	lsls	r0, r3, #16
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6819      	ldr	r1, [r3, #0]
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	4302      	orrs	r2, r0
 8004c3c:	3340      	adds	r3, #64	@ 0x40
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	887a      	ldrh	r2, [r7, #2]
 8004c64:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e267      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d075      	beq.n	8004d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004caa:	4b88      	ldr	r3, [pc, #544]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb6:	4b85      	ldr	r3, [pc, #532]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d112      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cc2:	4b82      	ldr	r3, [pc, #520]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cce:	d10b      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05b      	beq.n	8004d94 <HAL_RCC_OscConfig+0x108>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d157      	bne.n	8004d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e242      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf0:	d106      	bne.n	8004d00 <HAL_RCC_OscConfig+0x74>
 8004cf2:	4b76      	ldr	r3, [pc, #472]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a75      	ldr	r2, [pc, #468]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e01d      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x98>
 8004d0a:	4b70      	ldr	r3, [pc, #448]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	4b6d      	ldr	r3, [pc, #436]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a6c      	ldr	r2, [pc, #432]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d24:	4b69      	ldr	r3, [pc, #420]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a68      	ldr	r2, [pc, #416]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b66      	ldr	r3, [pc, #408]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a65      	ldr	r2, [pc, #404]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d013      	beq.n	8004d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fe f9f8 	bl	8003138 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fe f9f4 	bl	8003138 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	@ 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e207      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0xc0>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fe f9e4 	bl	8003138 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fe f9e0 	bl	8003138 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	@ 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e1f3      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d86:	4b51      	ldr	r3, [pc, #324]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0xe8>
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d063      	beq.n	8004e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004da2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dae:	4b47      	ldr	r3, [pc, #284]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d11c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dba:	4b44      	ldr	r3, [pc, #272]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d116      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc6:	4b41      	ldr	r3, [pc, #260]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d001      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e1c7      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dde:	4b3b      	ldr	r3, [pc, #236]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4937      	ldr	r1, [pc, #220]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df2:	e03a      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d020      	beq.n	8004e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dfc:	4b34      	ldr	r3, [pc, #208]	@ (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fe f999 	bl	8003138 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0a:	f7fe f995 	bl	8003138 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e1a8      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e28:	4b28      	ldr	r3, [pc, #160]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4925      	ldr	r1, [pc, #148]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]
 8004e3c:	e015      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fe f978 	bl	8003138 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e4c:	f7fe f974 	bl	8003138 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e187      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d036      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fe f958 	bl	8003138 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e8c:	f7fe f954 	bl	8003138 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e167      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x200>
 8004eaa:	e01b      	b.n	8004ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eac:	4b09      	ldr	r3, [pc, #36]	@ (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7fe f941 	bl	8003138 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb8:	e00e      	b.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eba:	f7fe f93d 	bl	8003138 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d907      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e150      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	42470000 	.word	0x42470000
 8004ed4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed8:	4b88      	ldr	r3, [pc, #544]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ea      	bne.n	8004eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8097 	beq.w	8005020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef6:	4b81      	ldr	r3, [pc, #516]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10f      	bne.n	8004f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	4b7d      	ldr	r3, [pc, #500]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	4a7c      	ldr	r2, [pc, #496]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f12:	4b7a      	ldr	r3, [pc, #488]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f22:	4b77      	ldr	r3, [pc, #476]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d118      	bne.n	8004f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2e:	4b74      	ldr	r3, [pc, #464]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a73      	ldr	r2, [pc, #460]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3a:	f7fe f8fd 	bl	8003138 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fe f8f9 	bl	8003138 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e10c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	4b6a      	ldr	r3, [pc, #424]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d106      	bne.n	8004f76 <HAL_RCC_OscConfig+0x2ea>
 8004f68:	4b64      	ldr	r3, [pc, #400]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6c:	4a63      	ldr	r2, [pc, #396]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f74:	e01c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x30c>
 8004f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f82:	4a5e      	ldr	r2, [pc, #376]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f96:	e00b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f98:	4b58      	ldr	r3, [pc, #352]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9c:	4a57      	ldr	r2, [pc, #348]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa4:	4b55      	ldr	r3, [pc, #340]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa8:	4a54      	ldr	r2, [pc, #336]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004faa:	f023 0304 	bic.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fe f8be 	bl	8003138 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fe f8ba 	bl	8003138 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e0cb      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd6:	4b49      	ldr	r3, [pc, #292]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ee      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x334>
 8004fe2:	e014      	b.n	800500e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe4:	f7fe f8a8 	bl	8003138 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fe f8a4 	bl	8003138 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e0b5      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005002:	4b3e      	ldr	r3, [pc, #248]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ee      	bne.n	8004fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d105      	bne.n	8005020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005014:	4b39      	ldr	r3, [pc, #228]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005018:	4a38      	ldr	r2, [pc, #224]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 800501a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800501e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80a1 	beq.w	800516c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800502a:	4b34      	ldr	r3, [pc, #208]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b08      	cmp	r3, #8
 8005034:	d05c      	beq.n	80050f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d141      	bne.n	80050c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b31      	ldr	r3, [pc, #196]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fe f878 	bl	8003138 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800504c:	f7fe f874 	bl	8003138 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e087      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	4b27      	ldr	r3, [pc, #156]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	3b01      	subs	r3, #1
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	491b      	ldr	r1, [pc, #108]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005094:	4b1b      	ldr	r3, [pc, #108]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fe f84d 	bl	8003138 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fe f849 	bl	8003138 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e05c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b4:	4b11      	ldr	r3, [pc, #68]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x416>
 80050c0:	e054      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c2:	4b10      	ldr	r3, [pc, #64]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fe f836 	bl	8003138 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fe f832 	bl	8003138 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e045      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e2:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x444>
 80050ee:	e03d      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e038      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 80050fc:	40023800 	.word	0x40023800
 8005100:	40007000 	.word	0x40007000
 8005104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005108:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <HAL_RCC_OscConfig+0x4ec>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d028      	beq.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d121      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d11a      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800513e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005140:	4293      	cmp	r3, r2
 8005142:	d111      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	3b01      	subs	r3, #1
 8005152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d107      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800

0800517c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0cc      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b68      	ldr	r3, [pc, #416]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d90c      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b65      	ldr	r3, [pc, #404]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b63      	ldr	r3, [pc, #396]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0b8      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d0:	4b59      	ldr	r3, [pc, #356]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a58      	ldr	r2, [pc, #352]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e8:	4b53      	ldr	r3, [pc, #332]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a52      	ldr	r2, [pc, #328]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f4:	4b50      	ldr	r3, [pc, #320]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	494d      	ldr	r1, [pc, #308]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d044      	beq.n	800529c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521a:	4b47      	ldr	r3, [pc, #284]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d119      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d003      	beq.n	800523a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005236:	2b03      	cmp	r3, #3
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	4b3f      	ldr	r3, [pc, #252]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e06f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b3b      	ldr	r3, [pc, #236]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e067      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b37      	ldr	r3, [pc, #220]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4934      	ldr	r1, [pc, #208]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800526c:	f7fd ff64 	bl	8003138 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fd ff60 	bl	8003138 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e04f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b2b      	ldr	r3, [pc, #172]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b25      	ldr	r3, [pc, #148]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d20c      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b22      	ldr	r3, [pc, #136]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b20      	ldr	r3, [pc, #128]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e032      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d0:	4b19      	ldr	r3, [pc, #100]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4916      	ldr	r1, [pc, #88]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ee:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	490e      	ldr	r1, [pc, #56]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005302:	f000 f821 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8005306:	4602      	mov	r2, r0
 8005308:	4b0b      	ldr	r3, [pc, #44]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	490a      	ldr	r1, [pc, #40]	@ (800533c <HAL_RCC_ClockConfig+0x1c0>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800531e:	4b09      	ldr	r3, [pc, #36]	@ (8005344 <HAL_RCC_ClockConfig+0x1c8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fd fec4 	bl	80030b0 <HAL_InitTick>

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023c00 	.word	0x40023c00
 8005338:	40023800 	.word	0x40023800
 800533c:	0800d908 	.word	0x0800d908
 8005340:	2000000c 	.word	0x2000000c
 8005344:	20000010 	.word	0x20000010

08005348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800534c:	b090      	sub	sp, #64	@ 0x40
 800534e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005360:	4b59      	ldr	r3, [pc, #356]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b08      	cmp	r3, #8
 800536a:	d00d      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x40>
 800536c:	2b08      	cmp	r3, #8
 800536e:	f200 80a1 	bhi.w	80054b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x34>
 8005376:	2b04      	cmp	r3, #4
 8005378:	d003      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x3a>
 800537a:	e09b      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800537c:	4b53      	ldr	r3, [pc, #332]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x184>)
 800537e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005380:	e09b      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005382:	4b53      	ldr	r3, [pc, #332]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005384:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005386:	e098      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005388:	4b4f      	ldr	r3, [pc, #316]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005390:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005392:	4b4d      	ldr	r3, [pc, #308]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d028      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539e:	4b4a      	ldr	r3, [pc, #296]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	2200      	movs	r2, #0
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053b0:	2100      	movs	r1, #0
 80053b2:	4b47      	ldr	r3, [pc, #284]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053b4:	fb03 f201 	mul.w	r2, r3, r1
 80053b8:	2300      	movs	r3, #0
 80053ba:	fb00 f303 	mul.w	r3, r0, r3
 80053be:	4413      	add	r3, r2
 80053c0:	4a43      	ldr	r2, [pc, #268]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053c2:	fba0 1202 	umull	r1, r2, r0, r2
 80053c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053c8:	460a      	mov	r2, r1
 80053ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80053cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ce:	4413      	add	r3, r2
 80053d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d4:	2200      	movs	r2, #0
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	61fa      	str	r2, [r7, #28]
 80053da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80053e2:	f7fb fc03 	bl	8000bec <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4613      	mov	r3, r2
 80053ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053ee:	e053      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f0:	4b35      	ldr	r3, [pc, #212]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	099b      	lsrs	r3, r3, #6
 80053f6:	2200      	movs	r2, #0
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	617a      	str	r2, [r7, #20]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005402:	f04f 0b00 	mov.w	fp, #0
 8005406:	4652      	mov	r2, sl
 8005408:	465b      	mov	r3, fp
 800540a:	f04f 0000 	mov.w	r0, #0
 800540e:	f04f 0100 	mov.w	r1, #0
 8005412:	0159      	lsls	r1, r3, #5
 8005414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005418:	0150      	lsls	r0, r2, #5
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	ebb2 080a 	subs.w	r8, r2, sl
 8005422:	eb63 090b 	sbc.w	r9, r3, fp
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005432:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005436:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800543a:	ebb2 0408 	subs.w	r4, r2, r8
 800543e:	eb63 0509 	sbc.w	r5, r3, r9
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	00eb      	lsls	r3, r5, #3
 800544c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005450:	00e2      	lsls	r2, r4, #3
 8005452:	4614      	mov	r4, r2
 8005454:	461d      	mov	r5, r3
 8005456:	eb14 030a 	adds.w	r3, r4, sl
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	eb45 030b 	adc.w	r3, r5, fp
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800546e:	4629      	mov	r1, r5
 8005470:	028b      	lsls	r3, r1, #10
 8005472:	4621      	mov	r1, r4
 8005474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005478:	4621      	mov	r1, r4
 800547a:	028a      	lsls	r2, r1, #10
 800547c:	4610      	mov	r0, r2
 800547e:	4619      	mov	r1, r3
 8005480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005482:	2200      	movs	r2, #0
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	60fa      	str	r2, [r7, #12]
 8005488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800548c:	f7fb fbae 	bl	8000bec <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4613      	mov	r3, r2
 8005496:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005498:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	3301      	adds	r3, #1
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80054a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054b2:	e002      	b.n	80054ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054b4:	4b05      	ldr	r3, [pc, #20]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x184>)
 80054b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3740      	adds	r7, #64	@ 0x40
 80054c0:	46bd      	mov	sp, r7
 80054c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c6:	bf00      	nop
 80054c8:	40023800 	.word	0x40023800
 80054cc:	00f42400 	.word	0x00f42400
 80054d0:	017d7840 	.word	0x017d7840

080054d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d8:	4b03      	ldr	r3, [pc, #12]	@ (80054e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	2000000c 	.word	0x2000000c

080054ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054f0:	f7ff fff0 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b05      	ldr	r3, [pc, #20]	@ (800550c <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	0a9b      	lsrs	r3, r3, #10
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4903      	ldr	r1, [pc, #12]	@ (8005510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40023800 	.word	0x40023800
 8005510:	0800d918 	.word	0x0800d918

08005514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005518:	f7ff ffdc 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 800551c:	4602      	mov	r2, r0
 800551e:	4b05      	ldr	r3, [pc, #20]	@ (8005534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	0b5b      	lsrs	r3, r3, #13
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	4903      	ldr	r1, [pc, #12]	@ (8005538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800552a:	5ccb      	ldrb	r3, [r1, r3]
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005530:	4618      	mov	r0, r3
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40023800 	.word	0x40023800
 8005538:	0800d918 	.word	0x0800d918

0800553c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e042      	b.n	80055d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fd fbd4 	bl	8002d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2224      	movs	r2, #36	@ 0x24
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800557e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fe57 	bl	8006234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e04a      	b.n	8005684 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fd fb84 	bl	8002d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2224      	movs	r2, #36	@ 0x24
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800561e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fe07 	bl	8006234 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695a      	ldr	r2, [r3, #20]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8005644:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695a      	ldr	r2, [r3, #20]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0208 	orr.w	r2, r2, #8
 8005654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	@ 0x28
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	4613      	mov	r3, r2
 800569a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d175      	bne.n	8005798 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <HAL_UART_Transmit+0x2c>
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e06e      	b.n	800579a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2221      	movs	r2, #33	@ 0x21
 80056c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ca:	f7fd fd35 	bl	8003138 <HAL_GetTick>
 80056ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	88fa      	ldrh	r2, [r7, #6]
 80056da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e4:	d108      	bne.n	80056f8 <HAL_UART_Transmit+0x6c>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d104      	bne.n	80056f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	e003      	b.n	8005700 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056fc:	2300      	movs	r3, #0
 80056fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005700:	e02e      	b.n	8005760 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2200      	movs	r2, #0
 800570a:	2180      	movs	r1, #128	@ 0x80
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fb9b 	bl	8005e48 <UART_WaitOnFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e03a      	b.n	800579a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10b      	bne.n	8005742 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005738:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	3302      	adds	r3, #2
 800573e:	61bb      	str	r3, [r7, #24]
 8005740:	e007      	b.n	8005752 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	781a      	ldrb	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	3301      	adds	r3, #1
 8005750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1cb      	bne.n	8005702 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2200      	movs	r2, #0
 8005772:	2140      	movs	r1, #64	@ 0x40
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 fb67 	bl	8005e48 <UART_WaitOnFlagUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e006      	b.n	800579a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	e000      	b.n	800579a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005798:	2302      	movs	r3, #2
  }
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b08a      	sub	sp, #40	@ 0x28
 80057a6:	af02      	add	r7, sp, #8
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	603b      	str	r3, [r7, #0]
 80057ae:	4613      	mov	r3, r2
 80057b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b20      	cmp	r3, #32
 80057c0:	f040 8081 	bne.w	80058c6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_UART_Receive+0x2e>
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e079      	b.n	80058c8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2222      	movs	r2, #34	@ 0x22
 80057de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057e8:	f7fd fca6 	bl	8003138 <HAL_GetTick>
 80057ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	88fa      	ldrh	r2, [r7, #6]
 80057f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	88fa      	ldrh	r2, [r7, #6]
 80057f8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005802:	d108      	bne.n	8005816 <HAL_UART_Receive+0x74>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d104      	bne.n	8005816 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e003      	b.n	800581e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800581e:	e047      	b.n	80058b0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2200      	movs	r2, #0
 8005828:	2120      	movs	r1, #32
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fb0c 	bl	8005e48 <UART_WaitOnFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e042      	b.n	80058c8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10c      	bne.n	8005862 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	b29b      	uxth	r3, r3
 8005850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005854:	b29a      	uxth	r2, r3
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	3302      	adds	r3, #2
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	e01f      	b.n	80058a2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800586a:	d007      	beq.n	800587c <HAL_UART_Receive+0xda>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <HAL_UART_Receive+0xe8>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d106      	bne.n	800588a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	b2da      	uxtb	r2, r3
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	e008      	b.n	800589c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005896:	b2da      	uxtb	r2, r3
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	3301      	adds	r3, #1
 80058a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1b2      	bne.n	8005820 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e000      	b.n	80058c8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80058c6:	2302      	movs	r3, #2
  }
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b0ba      	sub	sp, #232	@ 0xe8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800590e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10f      	bne.n	8005936 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <HAL_UART_IRQHandler+0x66>
 8005922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fbc2 	bl	80060b8 <UART_Receive_IT>
      return;
 8005934:	e25b      	b.n	8005dee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 80de 	beq.w	8005afc <HAL_UART_IRQHandler+0x22c>
 8005940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d106      	bne.n	800595a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800594c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005950:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80d1 	beq.w	8005afc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800595a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00b      	beq.n	800597e <HAL_UART_IRQHandler+0xae>
 8005966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800596a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005976:	f043 0201 	orr.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00b      	beq.n	80059a2 <HAL_UART_IRQHandler+0xd2>
 800598a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599a:	f043 0202 	orr.w	r2, r3, #2
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <HAL_UART_IRQHandler+0xf6>
 80059ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059be:	f043 0204 	orr.w	r2, r3, #4
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d011      	beq.n	80059f6 <HAL_UART_IRQHandler+0x126>
 80059d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d105      	bne.n	80059ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ee:	f043 0208 	orr.w	r2, r3, #8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 81f2 	beq.w	8005de4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_UART_IRQHandler+0x14e>
 8005a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fb4d 	bl	80060b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a28:	2b40      	cmp	r3, #64	@ 0x40
 8005a2a:	bf0c      	ite	eq
 8005a2c:	2301      	moveq	r3, #1
 8005a2e:	2300      	movne	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <HAL_UART_IRQHandler+0x17a>
 8005a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d04f      	beq.n	8005aea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fa55 	bl	8005efa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5a:	2b40      	cmp	r3, #64	@ 0x40
 8005a5c:	d141      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3314      	adds	r3, #20
 8005a64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3314      	adds	r3, #20
 8005a86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1d9      	bne.n	8005a5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d013      	beq.n	8005ada <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab6:	4a7e      	ldr	r2, [pc, #504]	@ (8005cb0 <HAL_UART_IRQHandler+0x3e0>)
 8005ab8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fd fceb 	bl	800349a <HAL_DMA_Abort_IT>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d016      	beq.n	8005af8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad8:	e00e      	b.n	8005af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f99e 	bl	8005e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	e00a      	b.n	8005af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f99a 	bl	8005e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	e006      	b.n	8005af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f996 	bl	8005e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005af6:	e175      	b.n	8005de4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af8:	bf00      	nop
    return;
 8005afa:	e173      	b.n	8005de4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	f040 814f 	bne.w	8005da4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 8148 	beq.w	8005da4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8141 	beq.w	8005da4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b22:	2300      	movs	r3, #0
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b42:	2b40      	cmp	r3, #64	@ 0x40
 8005b44:	f040 80b6 	bne.w	8005cb4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8145 	beq.w	8005de8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b66:	429a      	cmp	r2, r3
 8005b68:	f080 813e 	bcs.w	8005de8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b7e:	f000 8088 	beq.w	8005c92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
 8005b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005bae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005bba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1d9      	bne.n	8005b82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3314      	adds	r3, #20
 8005bd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005bde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005be0:	f023 0301 	bic.w	r3, r3, #1
 8005be4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3314      	adds	r3, #20
 8005bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005bf2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e1      	bne.n	8005bce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3314      	adds	r3, #20
 8005c10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3314      	adds	r3, #20
 8005c2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e3      	bne.n	8005c0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	330c      	adds	r3, #12
 8005c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c62:	f023 0310 	bic.w	r3, r3, #16
 8005c66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	330c      	adds	r3, #12
 8005c70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005c74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e3      	bne.n	8005c50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fd fb94 	bl	80033ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2202      	movs	r2, #2
 8005c96:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f8c1 	bl	8005e30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cae:	e09b      	b.n	8005de8 <HAL_UART_IRQHandler+0x518>
 8005cb0:	08005fc1 	.word	0x08005fc1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 808e 	beq.w	8005dec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005cd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 8089 	beq.w	8005dec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cf0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	330c      	adds	r3, #12
 8005cfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005cfe:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e3      	bne.n	8005cda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3314      	adds	r3, #20
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	623b      	str	r3, [r7, #32]
   return(result);
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	f023 0301 	bic.w	r3, r3, #1
 8005d28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3314      	adds	r3, #20
 8005d32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d36:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e3      	bne.n	8005d12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0310 	bic.w	r3, r3, #16
 8005d6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	330c      	adds	r3, #12
 8005d78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005d7c:	61fa      	str	r2, [r7, #28]
 8005d7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	69b9      	ldr	r1, [r7, #24]
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	617b      	str	r3, [r7, #20]
   return(result);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e3      	bne.n	8005d58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f847 	bl	8005e30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005da2:	e023      	b.n	8005dec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d009      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x4f4>
 8005db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f913 	bl	8005fe8 <UART_Transmit_IT>
    return;
 8005dc2:	e014      	b.n	8005dee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00e      	beq.n	8005dee <HAL_UART_IRQHandler+0x51e>
 8005dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f953 	bl	8006088 <UART_EndTransmit_IT>
    return;
 8005de2:	e004      	b.n	8005dee <HAL_UART_IRQHandler+0x51e>
    return;
 8005de4:	bf00      	nop
 8005de6:	e002      	b.n	8005dee <HAL_UART_IRQHandler+0x51e>
      return;
 8005de8:	bf00      	nop
 8005dea:	e000      	b.n	8005dee <HAL_UART_IRQHandler+0x51e>
      return;
 8005dec:	bf00      	nop
  }
}
 8005dee:	37e8      	adds	r7, #232	@ 0xe8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	4613      	mov	r3, r2
 8005e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e58:	e03b      	b.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e60:	d037      	beq.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e62:	f7fd f969 	bl	8003138 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	6a3a      	ldr	r2, [r7, #32]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d302      	bcc.n	8005e78 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e03a      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d023      	beq.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b80      	cmp	r3, #128	@ 0x80
 8005e8e:	d020      	beq.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b40      	cmp	r3, #64	@ 0x40
 8005e94:	d01d      	beq.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d116      	bne.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f81d 	bl	8005efa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2208      	movs	r2, #8
 8005ec4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e00f      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4013      	ands	r3, r2
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	bf0c      	ite	eq
 8005ee2:	2301      	moveq	r3, #1
 8005ee4:	2300      	movne	r3, #0
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d0b4      	beq.n	8005e5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b095      	sub	sp, #84	@ 0x54
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	330c      	adds	r3, #12
 8005f08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	330c      	adds	r3, #12
 8005f20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f22:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e5      	bne.n	8005f02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3314      	adds	r3, #20
 8005f3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	f023 0301 	bic.w	r3, r3, #1
 8005f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3314      	adds	r3, #20
 8005f54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e5      	bne.n	8005f36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d119      	bne.n	8005fa6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	330c      	adds	r3, #12
 8005f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f023 0310 	bic.w	r3, r3, #16
 8005f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f92:	61ba      	str	r2, [r7, #24]
 8005f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6979      	ldr	r1, [r7, #20]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e5      	bne.n	8005f72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005fb4:	bf00      	nop
 8005fb6:	3754      	adds	r7, #84	@ 0x54
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f7ff ff1e 	bl	8005e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b21      	cmp	r3, #33	@ 0x21
 8005ffa:	d13e      	bne.n	800607a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006004:	d114      	bne.n	8006030 <UART_Transmit_IT+0x48>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d110      	bne.n	8006030 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006022:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	1c9a      	adds	r2, r3, #2
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	621a      	str	r2, [r3, #32]
 800602e:	e008      	b.n	8006042 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	1c59      	adds	r1, r3, #1
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6211      	str	r1, [r2, #32]
 800603a:	781a      	ldrb	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006046:	b29b      	uxth	r3, r3
 8006048:	3b01      	subs	r3, #1
 800604a:	b29b      	uxth	r3, r3
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	4619      	mov	r1, r3
 8006050:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10f      	bne.n	8006076 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006064:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006074:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	e000      	b.n	800607c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800607a:	2302      	movs	r3, #2
  }
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800609e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff fea3 	bl	8005df4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08c      	sub	sp, #48	@ 0x30
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b22      	cmp	r3, #34	@ 0x22
 80060ca:	f040 80ae 	bne.w	800622a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060d6:	d117      	bne.n	8006108 <UART_Receive_IT+0x50>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d113      	bne.n	8006108 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	1c9a      	adds	r2, r3, #2
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	629a      	str	r2, [r3, #40]	@ 0x28
 8006106:	e026      	b.n	8006156 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800610e:	2300      	movs	r3, #0
 8006110:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800611a:	d007      	beq.n	800612c <UART_Receive_IT+0x74>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <UART_Receive_IT+0x82>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d106      	bne.n	800613a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	b2da      	uxtb	r2, r3
 8006134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006136:	701a      	strb	r2, [r3, #0]
 8006138:	e008      	b.n	800614c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006146:	b2da      	uxtb	r2, r3
 8006148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29b      	uxth	r3, r3
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	4619      	mov	r1, r3
 8006164:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006166:	2b00      	cmp	r3, #0
 8006168:	d15d      	bne.n	8006226 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0220 	bic.w	r2, r2, #32
 8006178:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006188:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695a      	ldr	r2, [r3, #20]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0201 	bic.w	r2, r2, #1
 8006198:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d135      	bne.n	800621c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	330c      	adds	r3, #12
 80061bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	613b      	str	r3, [r7, #16]
   return(result);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f023 0310 	bic.w	r3, r3, #16
 80061cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	330c      	adds	r3, #12
 80061d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d6:	623a      	str	r2, [r7, #32]
 80061d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	69f9      	ldr	r1, [r7, #28]
 80061dc:	6a3a      	ldr	r2, [r7, #32]
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e5      	bne.n	80061b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2b10      	cmp	r3, #16
 80061f6:	d10a      	bne.n	800620e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff fe0b 	bl	8005e30 <HAL_UARTEx_RxEventCallback>
 800621a:	e002      	b.n	8006222 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fdf3 	bl	8005e08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	e002      	b.n	800622c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	e000      	b.n	800622c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800622a:	2302      	movs	r3, #2
  }
}
 800622c:	4618      	mov	r0, r3
 800622e:	3730      	adds	r7, #48	@ 0x30
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006238:	b0c0      	sub	sp, #256	@ 0x100
 800623a:	af00      	add	r7, sp, #0
 800623c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006250:	68d9      	ldr	r1, [r3, #12]
 8006252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	ea40 0301 	orr.w	r3, r0, r1
 800625c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	431a      	orrs	r2, r3
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	431a      	orrs	r2, r3
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	4313      	orrs	r3, r2
 800627c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800628c:	f021 010c 	bic.w	r1, r1, #12
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800629a:	430b      	orrs	r3, r1
 800629c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800629e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80062aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ae:	6999      	ldr	r1, [r3, #24]
 80062b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	ea40 0301 	orr.w	r3, r0, r1
 80062ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4b8f      	ldr	r3, [pc, #572]	@ (8006500 <UART_SetConfig+0x2cc>)
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d005      	beq.n	80062d4 <UART_SetConfig+0xa0>
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4b8d      	ldr	r3, [pc, #564]	@ (8006504 <UART_SetConfig+0x2d0>)
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d104      	bne.n	80062de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062d4:	f7ff f91e 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 80062d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80062dc:	e003      	b.n	80062e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062de:	f7ff f905 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 80062e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062f0:	f040 810c 	bne.w	800650c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062f8:	2200      	movs	r2, #0
 80062fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006302:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006306:	4622      	mov	r2, r4
 8006308:	462b      	mov	r3, r5
 800630a:	1891      	adds	r1, r2, r2
 800630c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800630e:	415b      	adcs	r3, r3
 8006310:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006312:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006316:	4621      	mov	r1, r4
 8006318:	eb12 0801 	adds.w	r8, r2, r1
 800631c:	4629      	mov	r1, r5
 800631e:	eb43 0901 	adc.w	r9, r3, r1
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800632e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006336:	4690      	mov	r8, r2
 8006338:	4699      	mov	r9, r3
 800633a:	4623      	mov	r3, r4
 800633c:	eb18 0303 	adds.w	r3, r8, r3
 8006340:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006344:	462b      	mov	r3, r5
 8006346:	eb49 0303 	adc.w	r3, r9, r3
 800634a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800634e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800635a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800635e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006362:	460b      	mov	r3, r1
 8006364:	18db      	adds	r3, r3, r3
 8006366:	653b      	str	r3, [r7, #80]	@ 0x50
 8006368:	4613      	mov	r3, r2
 800636a:	eb42 0303 	adc.w	r3, r2, r3
 800636e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006370:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006374:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006378:	f7fa fc38 	bl	8000bec <__aeabi_uldivmod>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4b61      	ldr	r3, [pc, #388]	@ (8006508 <UART_SetConfig+0x2d4>)
 8006382:	fba3 2302 	umull	r2, r3, r3, r2
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	011c      	lsls	r4, r3, #4
 800638a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800638e:	2200      	movs	r2, #0
 8006390:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006394:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006398:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800639c:	4642      	mov	r2, r8
 800639e:	464b      	mov	r3, r9
 80063a0:	1891      	adds	r1, r2, r2
 80063a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80063a4:	415b      	adcs	r3, r3
 80063a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80063ac:	4641      	mov	r1, r8
 80063ae:	eb12 0a01 	adds.w	sl, r2, r1
 80063b2:	4649      	mov	r1, r9
 80063b4:	eb43 0b01 	adc.w	fp, r3, r1
 80063b8:	f04f 0200 	mov.w	r2, #0
 80063bc:	f04f 0300 	mov.w	r3, #0
 80063c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063cc:	4692      	mov	sl, r2
 80063ce:	469b      	mov	fp, r3
 80063d0:	4643      	mov	r3, r8
 80063d2:	eb1a 0303 	adds.w	r3, sl, r3
 80063d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063da:	464b      	mov	r3, r9
 80063dc:	eb4b 0303 	adc.w	r3, fp, r3
 80063e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80063f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063f8:	460b      	mov	r3, r1
 80063fa:	18db      	adds	r3, r3, r3
 80063fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80063fe:	4613      	mov	r3, r2
 8006400:	eb42 0303 	adc.w	r3, r2, r3
 8006404:	647b      	str	r3, [r7, #68]	@ 0x44
 8006406:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800640a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800640e:	f7fa fbed 	bl	8000bec <__aeabi_uldivmod>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4611      	mov	r1, r2
 8006418:	4b3b      	ldr	r3, [pc, #236]	@ (8006508 <UART_SetConfig+0x2d4>)
 800641a:	fba3 2301 	umull	r2, r3, r3, r1
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	2264      	movs	r2, #100	@ 0x64
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	1acb      	subs	r3, r1, r3
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800642e:	4b36      	ldr	r3, [pc, #216]	@ (8006508 <UART_SetConfig+0x2d4>)
 8006430:	fba3 2302 	umull	r2, r3, r3, r2
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800643c:	441c      	add	r4, r3
 800643e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006442:	2200      	movs	r2, #0
 8006444:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006448:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800644c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006450:	4642      	mov	r2, r8
 8006452:	464b      	mov	r3, r9
 8006454:	1891      	adds	r1, r2, r2
 8006456:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006458:	415b      	adcs	r3, r3
 800645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800645c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006460:	4641      	mov	r1, r8
 8006462:	1851      	adds	r1, r2, r1
 8006464:	6339      	str	r1, [r7, #48]	@ 0x30
 8006466:	4649      	mov	r1, r9
 8006468:	414b      	adcs	r3, r1
 800646a:	637b      	str	r3, [r7, #52]	@ 0x34
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006478:	4659      	mov	r1, fp
 800647a:	00cb      	lsls	r3, r1, #3
 800647c:	4651      	mov	r1, sl
 800647e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006482:	4651      	mov	r1, sl
 8006484:	00ca      	lsls	r2, r1, #3
 8006486:	4610      	mov	r0, r2
 8006488:	4619      	mov	r1, r3
 800648a:	4603      	mov	r3, r0
 800648c:	4642      	mov	r2, r8
 800648e:	189b      	adds	r3, r3, r2
 8006490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006494:	464b      	mov	r3, r9
 8006496:	460a      	mov	r2, r1
 8006498:	eb42 0303 	adc.w	r3, r2, r3
 800649c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80064b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064b4:	460b      	mov	r3, r1
 80064b6:	18db      	adds	r3, r3, r3
 80064b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064ba:	4613      	mov	r3, r2
 80064bc:	eb42 0303 	adc.w	r3, r2, r3
 80064c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80064ca:	f7fa fb8f 	bl	8000bec <__aeabi_uldivmod>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006508 <UART_SetConfig+0x2d4>)
 80064d4:	fba3 1302 	umull	r1, r3, r3, r2
 80064d8:	095b      	lsrs	r3, r3, #5
 80064da:	2164      	movs	r1, #100	@ 0x64
 80064dc:	fb01 f303 	mul.w	r3, r1, r3
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	3332      	adds	r3, #50	@ 0x32
 80064e6:	4a08      	ldr	r2, [pc, #32]	@ (8006508 <UART_SetConfig+0x2d4>)
 80064e8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	f003 0207 	and.w	r2, r3, #7
 80064f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4422      	add	r2, r4
 80064fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064fc:	e106      	b.n	800670c <UART_SetConfig+0x4d8>
 80064fe:	bf00      	nop
 8006500:	40011000 	.word	0x40011000
 8006504:	40011400 	.word	0x40011400
 8006508:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800650c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006510:	2200      	movs	r2, #0
 8006512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006516:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800651a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800651e:	4642      	mov	r2, r8
 8006520:	464b      	mov	r3, r9
 8006522:	1891      	adds	r1, r2, r2
 8006524:	6239      	str	r1, [r7, #32]
 8006526:	415b      	adcs	r3, r3
 8006528:	627b      	str	r3, [r7, #36]	@ 0x24
 800652a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800652e:	4641      	mov	r1, r8
 8006530:	1854      	adds	r4, r2, r1
 8006532:	4649      	mov	r1, r9
 8006534:	eb43 0501 	adc.w	r5, r3, r1
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	f04f 0300 	mov.w	r3, #0
 8006540:	00eb      	lsls	r3, r5, #3
 8006542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006546:	00e2      	lsls	r2, r4, #3
 8006548:	4614      	mov	r4, r2
 800654a:	461d      	mov	r5, r3
 800654c:	4643      	mov	r3, r8
 800654e:	18e3      	adds	r3, r4, r3
 8006550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006554:	464b      	mov	r3, r9
 8006556:	eb45 0303 	adc.w	r3, r5, r3
 800655a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800655e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800656a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800656e:	f04f 0200 	mov.w	r2, #0
 8006572:	f04f 0300 	mov.w	r3, #0
 8006576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800657a:	4629      	mov	r1, r5
 800657c:	008b      	lsls	r3, r1, #2
 800657e:	4621      	mov	r1, r4
 8006580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006584:	4621      	mov	r1, r4
 8006586:	008a      	lsls	r2, r1, #2
 8006588:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800658c:	f7fa fb2e 	bl	8000bec <__aeabi_uldivmod>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4b60      	ldr	r3, [pc, #384]	@ (8006718 <UART_SetConfig+0x4e4>)
 8006596:	fba3 2302 	umull	r2, r3, r3, r2
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	011c      	lsls	r4, r3, #4
 800659e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80065ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80065b0:	4642      	mov	r2, r8
 80065b2:	464b      	mov	r3, r9
 80065b4:	1891      	adds	r1, r2, r2
 80065b6:	61b9      	str	r1, [r7, #24]
 80065b8:	415b      	adcs	r3, r3
 80065ba:	61fb      	str	r3, [r7, #28]
 80065bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065c0:	4641      	mov	r1, r8
 80065c2:	1851      	adds	r1, r2, r1
 80065c4:	6139      	str	r1, [r7, #16]
 80065c6:	4649      	mov	r1, r9
 80065c8:	414b      	adcs	r3, r1
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065d8:	4659      	mov	r1, fp
 80065da:	00cb      	lsls	r3, r1, #3
 80065dc:	4651      	mov	r1, sl
 80065de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065e2:	4651      	mov	r1, sl
 80065e4:	00ca      	lsls	r2, r1, #3
 80065e6:	4610      	mov	r0, r2
 80065e8:	4619      	mov	r1, r3
 80065ea:	4603      	mov	r3, r0
 80065ec:	4642      	mov	r2, r8
 80065ee:	189b      	adds	r3, r3, r2
 80065f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065f4:	464b      	mov	r3, r9
 80065f6:	460a      	mov	r2, r1
 80065f8:	eb42 0303 	adc.w	r3, r2, r3
 80065fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	67bb      	str	r3, [r7, #120]	@ 0x78
 800660a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006618:	4649      	mov	r1, r9
 800661a:	008b      	lsls	r3, r1, #2
 800661c:	4641      	mov	r1, r8
 800661e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006622:	4641      	mov	r1, r8
 8006624:	008a      	lsls	r2, r1, #2
 8006626:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800662a:	f7fa fadf 	bl	8000bec <__aeabi_uldivmod>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4611      	mov	r1, r2
 8006634:	4b38      	ldr	r3, [pc, #224]	@ (8006718 <UART_SetConfig+0x4e4>)
 8006636:	fba3 2301 	umull	r2, r3, r3, r1
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	2264      	movs	r2, #100	@ 0x64
 800663e:	fb02 f303 	mul.w	r3, r2, r3
 8006642:	1acb      	subs	r3, r1, r3
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	3332      	adds	r3, #50	@ 0x32
 8006648:	4a33      	ldr	r2, [pc, #204]	@ (8006718 <UART_SetConfig+0x4e4>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006654:	441c      	add	r4, r3
 8006656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800665a:	2200      	movs	r2, #0
 800665c:	673b      	str	r3, [r7, #112]	@ 0x70
 800665e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006660:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006664:	4642      	mov	r2, r8
 8006666:	464b      	mov	r3, r9
 8006668:	1891      	adds	r1, r2, r2
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	415b      	adcs	r3, r3
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006674:	4641      	mov	r1, r8
 8006676:	1851      	adds	r1, r2, r1
 8006678:	6039      	str	r1, [r7, #0]
 800667a:	4649      	mov	r1, r9
 800667c:	414b      	adcs	r3, r1
 800667e:	607b      	str	r3, [r7, #4]
 8006680:	f04f 0200 	mov.w	r2, #0
 8006684:	f04f 0300 	mov.w	r3, #0
 8006688:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800668c:	4659      	mov	r1, fp
 800668e:	00cb      	lsls	r3, r1, #3
 8006690:	4651      	mov	r1, sl
 8006692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006696:	4651      	mov	r1, sl
 8006698:	00ca      	lsls	r2, r1, #3
 800669a:	4610      	mov	r0, r2
 800669c:	4619      	mov	r1, r3
 800669e:	4603      	mov	r3, r0
 80066a0:	4642      	mov	r2, r8
 80066a2:	189b      	adds	r3, r3, r2
 80066a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066a6:	464b      	mov	r3, r9
 80066a8:	460a      	mov	r2, r1
 80066aa:	eb42 0303 	adc.w	r3, r2, r3
 80066ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80066ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80066c8:	4649      	mov	r1, r9
 80066ca:	008b      	lsls	r3, r1, #2
 80066cc:	4641      	mov	r1, r8
 80066ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066d2:	4641      	mov	r1, r8
 80066d4:	008a      	lsls	r2, r1, #2
 80066d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80066da:	f7fa fa87 	bl	8000bec <__aeabi_uldivmod>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006718 <UART_SetConfig+0x4e4>)
 80066e4:	fba3 1302 	umull	r1, r3, r3, r2
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	2164      	movs	r1, #100	@ 0x64
 80066ec:	fb01 f303 	mul.w	r3, r1, r3
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	3332      	adds	r3, #50	@ 0x32
 80066f6:	4a08      	ldr	r2, [pc, #32]	@ (8006718 <UART_SetConfig+0x4e4>)
 80066f8:	fba2 2303 	umull	r2, r3, r2, r3
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	f003 020f 	and.w	r2, r3, #15
 8006702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4422      	add	r2, r4
 800670a:	609a      	str	r2, [r3, #8]
}
 800670c:	bf00      	nop
 800670e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006712:	46bd      	mov	sp, r7
 8006714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006718:	51eb851f 	.word	0x51eb851f

0800671c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800671c:	b084      	sub	sp, #16
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	f107 001c 	add.w	r0, r7, #28
 800672a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800672e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006732:	2b01      	cmp	r3, #1
 8006734:	d123      	bne.n	800677e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800674a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800675e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006762:	2b01      	cmp	r3, #1
 8006764:	d105      	bne.n	8006772 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f001 fae8 	bl	8007d48 <USB_CoreReset>
 8006778:	4603      	mov	r3, r0
 800677a:	73fb      	strb	r3, [r7, #15]
 800677c:	e01b      	b.n	80067b6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f001 fadc 	bl	8007d48 <USB_CoreReset>
 8006790:	4603      	mov	r3, r0
 8006792:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006794:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006798:	2b00      	cmp	r3, #0
 800679a:	d106      	bne.n	80067aa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80067a8:	e005      	b.n	80067b6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80067b6:	7fbb      	ldrb	r3, [r7, #30]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d10b      	bne.n	80067d4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f043 0206 	orr.w	r2, r3, #6
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f043 0220 	orr.w	r2, r3, #32
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067e0:	b004      	add	sp, #16
 80067e2:	4770      	bx	lr

080067e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	4613      	mov	r3, r2
 80067f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80067f2:	79fb      	ldrb	r3, [r7, #7]
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d165      	bne.n	80068c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4a41      	ldr	r2, [pc, #260]	@ (8006900 <USB_SetTurnaroundTime+0x11c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d906      	bls.n	800680e <USB_SetTurnaroundTime+0x2a>
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4a40      	ldr	r2, [pc, #256]	@ (8006904 <USB_SetTurnaroundTime+0x120>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d202      	bcs.n	800680e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006808:	230f      	movs	r3, #15
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	e062      	b.n	80068d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	4a3c      	ldr	r2, [pc, #240]	@ (8006904 <USB_SetTurnaroundTime+0x120>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d306      	bcc.n	8006824 <USB_SetTurnaroundTime+0x40>
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	4a3b      	ldr	r2, [pc, #236]	@ (8006908 <USB_SetTurnaroundTime+0x124>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d202      	bcs.n	8006824 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800681e:	230e      	movs	r3, #14
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	e057      	b.n	80068d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	4a38      	ldr	r2, [pc, #224]	@ (8006908 <USB_SetTurnaroundTime+0x124>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d306      	bcc.n	800683a <USB_SetTurnaroundTime+0x56>
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4a37      	ldr	r2, [pc, #220]	@ (800690c <USB_SetTurnaroundTime+0x128>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d202      	bcs.n	800683a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006834:	230d      	movs	r3, #13
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	e04c      	b.n	80068d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	4a33      	ldr	r2, [pc, #204]	@ (800690c <USB_SetTurnaroundTime+0x128>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d306      	bcc.n	8006850 <USB_SetTurnaroundTime+0x6c>
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	4a32      	ldr	r2, [pc, #200]	@ (8006910 <USB_SetTurnaroundTime+0x12c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d802      	bhi.n	8006850 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800684a:	230c      	movs	r3, #12
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	e041      	b.n	80068d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4a2f      	ldr	r2, [pc, #188]	@ (8006910 <USB_SetTurnaroundTime+0x12c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d906      	bls.n	8006866 <USB_SetTurnaroundTime+0x82>
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4a2e      	ldr	r2, [pc, #184]	@ (8006914 <USB_SetTurnaroundTime+0x130>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d802      	bhi.n	8006866 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006860:	230b      	movs	r3, #11
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	e036      	b.n	80068d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	4a2a      	ldr	r2, [pc, #168]	@ (8006914 <USB_SetTurnaroundTime+0x130>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d906      	bls.n	800687c <USB_SetTurnaroundTime+0x98>
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	4a29      	ldr	r2, [pc, #164]	@ (8006918 <USB_SetTurnaroundTime+0x134>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d802      	bhi.n	800687c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006876:	230a      	movs	r3, #10
 8006878:	617b      	str	r3, [r7, #20]
 800687a:	e02b      	b.n	80068d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	4a26      	ldr	r2, [pc, #152]	@ (8006918 <USB_SetTurnaroundTime+0x134>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d906      	bls.n	8006892 <USB_SetTurnaroundTime+0xae>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4a25      	ldr	r2, [pc, #148]	@ (800691c <USB_SetTurnaroundTime+0x138>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d202      	bcs.n	8006892 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800688c:	2309      	movs	r3, #9
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	e020      	b.n	80068d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	4a21      	ldr	r2, [pc, #132]	@ (800691c <USB_SetTurnaroundTime+0x138>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d306      	bcc.n	80068a8 <USB_SetTurnaroundTime+0xc4>
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	4a20      	ldr	r2, [pc, #128]	@ (8006920 <USB_SetTurnaroundTime+0x13c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d802      	bhi.n	80068a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80068a2:	2308      	movs	r3, #8
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	e015      	b.n	80068d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006920 <USB_SetTurnaroundTime+0x13c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d906      	bls.n	80068be <USB_SetTurnaroundTime+0xda>
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006924 <USB_SetTurnaroundTime+0x140>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d202      	bcs.n	80068be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80068b8:	2307      	movs	r3, #7
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	e00a      	b.n	80068d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80068be:	2306      	movs	r3, #6
 80068c0:	617b      	str	r3, [r7, #20]
 80068c2:	e007      	b.n	80068d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80068c4:	79fb      	ldrb	r3, [r7, #7]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d102      	bne.n	80068d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80068ca:	2309      	movs	r3, #9
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	e001      	b.n	80068d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80068d0:	2309      	movs	r3, #9
 80068d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	029b      	lsls	r3, r3, #10
 80068e8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80068ec:	431a      	orrs	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	00d8acbf 	.word	0x00d8acbf
 8006904:	00e4e1c0 	.word	0x00e4e1c0
 8006908:	00f42400 	.word	0x00f42400
 800690c:	01067380 	.word	0x01067380
 8006910:	011a499f 	.word	0x011a499f
 8006914:	01312cff 	.word	0x01312cff
 8006918:	014ca43f 	.word	0x014ca43f
 800691c:	016e3600 	.word	0x016e3600
 8006920:	01a6ab1f 	.word	0x01a6ab1f
 8006924:	01e84800 	.word	0x01e84800

08006928 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f043 0201 	orr.w	r2, r3, #1
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f023 0201 	bic.w	r2, r3, #1
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	460b      	mov	r3, r1
 8006976:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d115      	bne.n	80069ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800699a:	200a      	movs	r0, #10
 800699c:	f7fc fbd8 	bl	8003150 <HAL_Delay>
      ms += 10U;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	330a      	adds	r3, #10
 80069a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f001 f93f 	bl	8007c2a <USB_GetMode>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d01e      	beq.n	80069f0 <USB_SetCurrentMode+0x84>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80069b6:	d9f0      	bls.n	800699a <USB_SetCurrentMode+0x2e>
 80069b8:	e01a      	b.n	80069f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80069ba:	78fb      	ldrb	r3, [r7, #3]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d115      	bne.n	80069ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80069cc:	200a      	movs	r0, #10
 80069ce:	f7fc fbbf 	bl	8003150 <HAL_Delay>
      ms += 10U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	330a      	adds	r3, #10
 80069d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 f926 	bl	8007c2a <USB_GetMode>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <USB_SetCurrentMode+0x84>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80069e8:	d9f0      	bls.n	80069cc <USB_SetCurrentMode+0x60>
 80069ea:	e001      	b.n	80069f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e005      	b.n	80069fc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2bc8      	cmp	r3, #200	@ 0xc8
 80069f4:	d101      	bne.n	80069fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a04:	b084      	sub	sp, #16
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b086      	sub	sp, #24
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a1e:	2300      	movs	r3, #0
 8006a20:	613b      	str	r3, [r7, #16]
 8006a22:	e009      	b.n	8006a38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	3340      	adds	r3, #64	@ 0x40
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	2200      	movs	r2, #0
 8006a30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	3301      	adds	r3, #1
 8006a36:	613b      	str	r3, [r7, #16]
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	2b0e      	cmp	r3, #14
 8006a3c:	d9f2      	bls.n	8006a24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a3e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d11c      	bne.n	8006a80 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a54:	f043 0302 	orr.w	r3, r3, #2
 8006a58:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a76:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a7e:	e00b      	b.n	8006a98 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a84:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a90:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006aa4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d10d      	bne.n	8006ac8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006aac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d104      	bne.n	8006abe <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f968 	bl	8006d8c <USB_SetDevSpeed>
 8006abc:	e008      	b.n	8006ad0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006abe:	2101      	movs	r1, #1
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f963 	bl	8006d8c <USB_SetDevSpeed>
 8006ac6:	e003      	b.n	8006ad0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ac8:	2103      	movs	r1, #3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f95e 	bl	8006d8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ad0:	2110      	movs	r1, #16
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f8fa 	bl	8006ccc <USB_FlushTxFifo>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f924 	bl	8006d30 <USB_FlushRxFifo>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af8:	461a      	mov	r2, r3
 8006afa:	2300      	movs	r3, #0
 8006afc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b04:	461a      	mov	r2, r3
 8006b06:	2300      	movs	r3, #0
 8006b08:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b10:	461a      	mov	r2, r3
 8006b12:	2300      	movs	r3, #0
 8006b14:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b16:	2300      	movs	r3, #0
 8006b18:	613b      	str	r3, [r7, #16]
 8006b1a:	e043      	b.n	8006ba4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b32:	d118      	bne.n	8006b66 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b46:	461a      	mov	r2, r3
 8006b48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	e013      	b.n	8006b78 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	e008      	b.n	8006b78 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b72:	461a      	mov	r2, r3
 8006b74:	2300      	movs	r3, #0
 8006b76:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b84:	461a      	mov	r2, r3
 8006b86:	2300      	movs	r3, #0
 8006b88:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b96:	461a      	mov	r2, r3
 8006b98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006b9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	613b      	str	r3, [r7, #16]
 8006ba4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ba8:	461a      	mov	r2, r3
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d3b5      	bcc.n	8006b1c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	613b      	str	r3, [r7, #16]
 8006bb4:	e043      	b.n	8006c3e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bcc:	d118      	bne.n	8006c00 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be0:	461a      	mov	r2, r3
 8006be2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	e013      	b.n	8006c12 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	e008      	b.n	8006c12 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	2300      	movs	r3, #0
 8006c10:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c1e:	461a      	mov	r2, r3
 8006c20:	2300      	movs	r3, #0
 8006c22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c30:	461a      	mov	r2, r3
 8006c32:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c42:	461a      	mov	r2, r3
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d3b5      	bcc.n	8006bb6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c5c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006c6a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d105      	bne.n	8006c80 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	f043 0210 	orr.w	r2, r3, #16
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	699a      	ldr	r2, [r3, #24]
 8006c84:	4b10      	ldr	r3, [pc, #64]	@ (8006cc8 <USB_DevInit+0x2c4>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c8c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	f043 0208 	orr.w	r2, r3, #8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ca0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d107      	bne.n	8006cb8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cb0:	f043 0304 	orr.w	r3, r3, #4
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cc4:	b004      	add	sp, #16
 8006cc6:	4770      	bx	lr
 8006cc8:	803c3800 	.word	0x803c3800

08006ccc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ce6:	d901      	bls.n	8006cec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e01b      	b.n	8006d24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	daf2      	bge.n	8006cda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	019b      	lsls	r3, r3, #6
 8006cfc:	f043 0220 	orr.w	r2, r3, #32
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	3301      	adds	r3, #1
 8006d08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d10:	d901      	bls.n	8006d16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e006      	b.n	8006d24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d0f0      	beq.n	8006d04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d48:	d901      	bls.n	8006d4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e018      	b.n	8006d80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	daf2      	bge.n	8006d3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2210      	movs	r2, #16
 8006d5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	3301      	adds	r3, #1
 8006d64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d6c:	d901      	bls.n	8006d72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e006      	b.n	8006d80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0310 	and.w	r3, r3, #16
 8006d7a:	2b10      	cmp	r3, #16
 8006d7c:	d0f0      	beq.n	8006d60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	68f9      	ldr	r1, [r7, #12]
 8006da8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006dac:	4313      	orrs	r3, r2
 8006dae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b087      	sub	sp, #28
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 0306 	and.w	r3, r3, #6
 8006dd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d102      	bne.n	8006de4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006dde:	2300      	movs	r3, #0
 8006de0:	75fb      	strb	r3, [r7, #23]
 8006de2:	e00a      	b.n	8006dfa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d002      	beq.n	8006df0 <USB_GetDevSpeed+0x32>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b06      	cmp	r3, #6
 8006dee:	d102      	bne.n	8006df6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006df0:	2302      	movs	r3, #2
 8006df2:	75fb      	strb	r3, [r7, #23]
 8006df4:	e001      	b.n	8006dfa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006df6:	230f      	movs	r3, #15
 8006df8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	371c      	adds	r7, #28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	785b      	ldrb	r3, [r3, #1]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d13a      	bne.n	8006e9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e2a:	69da      	ldr	r2, [r3, #28]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	2101      	movs	r1, #1
 8006e36:	fa01 f303 	lsl.w	r3, r1, r3
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	68f9      	ldr	r1, [r7, #12]
 8006e3e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e42:	4313      	orrs	r3, r2
 8006e44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d155      	bne.n	8006f08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	791b      	ldrb	r3, [r3, #4]
 8006e76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	059b      	lsls	r3, r3, #22
 8006e7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e80:	4313      	orrs	r3, r2
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	0151      	lsls	r1, r2, #5
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	440a      	add	r2, r1
 8006e8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	e036      	b.n	8006f08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ea0:	69da      	ldr	r2, [r3, #28]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	2101      	movs	r1, #1
 8006eac:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb0:	041b      	lsls	r3, r3, #16
 8006eb2:	68f9      	ldr	r1, [r7, #12]
 8006eb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d11a      	bne.n	8006f08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	791b      	ldrb	r3, [r3, #4]
 8006eec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
	...

08006f18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d161      	bne.n	8006ff8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f4a:	d11f      	bne.n	8006f8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	0151      	lsls	r1, r2, #5
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	440a      	add	r2, r1
 8006f82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	f003 030f 	and.w	r3, r3, #15
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	43db      	mvns	r3, r3
 8006fa6:	68f9      	ldr	r1, [r7, #12]
 8006fa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fac:	4013      	ands	r3, r2
 8006fae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb6:	69da      	ldr	r2, [r3, #28]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	f003 030f 	and.w	r3, r3, #15
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	68f9      	ldr	r1, [r7, #12]
 8006fcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	0159      	lsls	r1, r3, #5
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	440b      	add	r3, r1
 8006fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4b35      	ldr	r3, [pc, #212]	@ (80070c8 <USB_DeactivateEndpoint+0x1b0>)
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	600b      	str	r3, [r1, #0]
 8006ff6:	e060      	b.n	80070ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800700a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800700e:	d11f      	bne.n	8007050 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	0151      	lsls	r1, r2, #5
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	440a      	add	r2, r1
 8007026:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800702a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800702e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	0151      	lsls	r1, r2, #5
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	440a      	add	r2, r1
 8007046:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800704a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800704e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007056:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	2101      	movs	r1, #1
 8007062:	fa01 f303 	lsl.w	r3, r1, r3
 8007066:	041b      	lsls	r3, r3, #16
 8007068:	43db      	mvns	r3, r3
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007070:	4013      	ands	r3, r2
 8007072:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800707a:	69da      	ldr	r2, [r3, #28]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	f003 030f 	and.w	r3, r3, #15
 8007084:	2101      	movs	r1, #1
 8007086:	fa01 f303 	lsl.w	r3, r1, r3
 800708a:	041b      	lsls	r3, r3, #16
 800708c:	43db      	mvns	r3, r3
 800708e:	68f9      	ldr	r1, [r7, #12]
 8007090:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007094:	4013      	ands	r3, r2
 8007096:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	0159      	lsls	r1, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	440b      	add	r3, r1
 80070ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b2:	4619      	mov	r1, r3
 80070b4:	4b05      	ldr	r3, [pc, #20]	@ (80070cc <USB_DeactivateEndpoint+0x1b4>)
 80070b6:	4013      	ands	r3, r2
 80070b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	ec337800 	.word	0xec337800
 80070cc:	eff37800 	.word	0xeff37800

080070d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08a      	sub	sp, #40	@ 0x28
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	4613      	mov	r3, r2
 80070dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	785b      	ldrb	r3, [r3, #1]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	f040 817f 	bne.w	80073f0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d132      	bne.n	8007160 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	0151      	lsls	r1, r2, #5
 800710c:	69fa      	ldr	r2, [r7, #28]
 800710e:	440a      	add	r2, r1
 8007110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007114:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007118:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800711c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	0151      	lsls	r1, r2, #5
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	440a      	add	r2, r1
 8007134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007138:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800713c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	0151      	lsls	r1, r2, #5
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	440a      	add	r2, r1
 8007154:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007158:	0cdb      	lsrs	r3, r3, #19
 800715a:	04db      	lsls	r3, r3, #19
 800715c:	6113      	str	r3, [r2, #16]
 800715e:	e097      	b.n	8007290 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	0151      	lsls	r1, r2, #5
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	440a      	add	r2, r1
 8007176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800717a:	0cdb      	lsrs	r3, r3, #19
 800717c:	04db      	lsls	r3, r3, #19
 800717e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	4413      	add	r3, r2
 8007188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	0151      	lsls	r1, r2, #5
 8007192:	69fa      	ldr	r2, [r7, #28]
 8007194:	440a      	add	r2, r1
 8007196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800719a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800719e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80071a2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d11a      	bne.n	80071e0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	691a      	ldr	r2, [r3, #16]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d903      	bls.n	80071be <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	69fa      	ldr	r2, [r7, #28]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071dc:	6113      	str	r3, [r2, #16]
 80071de:	e044      	b.n	800726a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	4413      	add	r3, r2
 80071ea:	1e5a      	subs	r2, r3, #1
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007202:	691a      	ldr	r2, [r3, #16]
 8007204:	8afb      	ldrh	r3, [r7, #22]
 8007206:	04d9      	lsls	r1, r3, #19
 8007208:	4ba4      	ldr	r3, [pc, #656]	@ (800749c <USB_EPStartXfer+0x3cc>)
 800720a:	400b      	ands	r3, r1
 800720c:	69b9      	ldr	r1, [r7, #24]
 800720e:	0148      	lsls	r0, r1, #5
 8007210:	69f9      	ldr	r1, [r7, #28]
 8007212:	4401      	add	r1, r0
 8007214:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007218:	4313      	orrs	r3, r2
 800721a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	791b      	ldrb	r3, [r3, #4]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d122      	bne.n	800726a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	440a      	add	r2, r1
 800723a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800723e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007242:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007250:	691a      	ldr	r2, [r3, #16]
 8007252:	8afb      	ldrh	r3, [r7, #22]
 8007254:	075b      	lsls	r3, r3, #29
 8007256:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800725a:	69b9      	ldr	r1, [r7, #24]
 800725c:	0148      	lsls	r0, r1, #5
 800725e:	69f9      	ldr	r1, [r7, #28]
 8007260:	4401      	add	r1, r0
 8007262:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007266:	4313      	orrs	r3, r2
 8007268:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007276:	691a      	ldr	r2, [r3, #16]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007280:	69b9      	ldr	r1, [r7, #24]
 8007282:	0148      	lsls	r0, r1, #5
 8007284:	69f9      	ldr	r1, [r7, #28]
 8007286:	4401      	add	r1, r0
 8007288:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800728c:	4313      	orrs	r3, r2
 800728e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d14b      	bne.n	800732e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d009      	beq.n	80072b2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072aa:	461a      	mov	r2, r3
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	791b      	ldrb	r3, [r3, #4]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d128      	bne.n	800730c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d110      	bne.n	80072ec <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	69ba      	ldr	r2, [r7, #24]
 80072da:	0151      	lsls	r1, r2, #5
 80072dc:	69fa      	ldr	r2, [r7, #28]
 80072de:	440a      	add	r2, r1
 80072e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	e00f      	b.n	800730c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	0151      	lsls	r1, r2, #5
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	440a      	add	r2, r1
 8007302:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800730a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	0151      	lsls	r1, r2, #5
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	440a      	add	r2, r1
 8007322:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007326:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	e166      	b.n	80075fc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	0151      	lsls	r1, r2, #5
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	440a      	add	r2, r1
 8007344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007348:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800734c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	791b      	ldrb	r3, [r3, #4]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d015      	beq.n	8007382 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 814e 	beq.w	80075fc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	f003 030f 	and.w	r3, r3, #15
 8007370:	2101      	movs	r1, #1
 8007372:	fa01 f303 	lsl.w	r3, r1, r3
 8007376:	69f9      	ldr	r1, [r7, #28]
 8007378:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800737c:	4313      	orrs	r3, r2
 800737e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007380:	e13c      	b.n	80075fc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800738e:	2b00      	cmp	r3, #0
 8007390:	d110      	bne.n	80073b4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	0151      	lsls	r1, r2, #5
 80073a4:	69fa      	ldr	r2, [r7, #28]
 80073a6:	440a      	add	r2, r1
 80073a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80073b0:	6013      	str	r3, [r2, #0]
 80073b2:	e00f      	b.n	80073d4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073d2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	68d9      	ldr	r1, [r3, #12]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	781a      	ldrb	r2, [r3, #0]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	b298      	uxth	r0, r3
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	4603      	mov	r3, r0
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 f9b9 	bl	8007760 <USB_WritePacket>
 80073ee:	e105      	b.n	80075fc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800740a:	0cdb      	lsrs	r3, r3, #19
 800740c:	04db      	lsls	r3, r3, #19
 800740e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800742a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800742e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007432:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d132      	bne.n	80074a0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	689a      	ldr	r2, [r3, #8]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007468:	69b9      	ldr	r1, [r7, #24]
 800746a:	0148      	lsls	r0, r1, #5
 800746c:	69f9      	ldr	r1, [r7, #28]
 800746e:	4401      	add	r1, r0
 8007470:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007474:	4313      	orrs	r3, r2
 8007476:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	0151      	lsls	r1, r2, #5
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	440a      	add	r2, r1
 800748e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007492:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007496:	6113      	str	r3, [r2, #16]
 8007498:	e062      	b.n	8007560 <USB_EPStartXfer+0x490>
 800749a:	bf00      	nop
 800749c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d123      	bne.n	80074f0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074b4:	691a      	ldr	r2, [r3, #16]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074be:	69b9      	ldr	r1, [r7, #24]
 80074c0:	0148      	lsls	r0, r1, #5
 80074c2:	69f9      	ldr	r1, [r7, #28]
 80074c4:	4401      	add	r1, r0
 80074c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80074ca:	4313      	orrs	r3, r2
 80074cc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	0151      	lsls	r1, r2, #5
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	440a      	add	r2, r1
 80074e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074ec:	6113      	str	r3, [r2, #16]
 80074ee:	e037      	b.n	8007560 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	691a      	ldr	r2, [r3, #16]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	4413      	add	r3, r2
 80074fa:	1e5a      	subs	r2, r3, #1
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	fbb2 f3f3 	udiv	r3, r2, r3
 8007504:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	8afa      	ldrh	r2, [r7, #22]
 800750c:	fb03 f202 	mul.w	r2, r3, r2
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007520:	691a      	ldr	r2, [r3, #16]
 8007522:	8afb      	ldrh	r3, [r7, #22]
 8007524:	04d9      	lsls	r1, r3, #19
 8007526:	4b38      	ldr	r3, [pc, #224]	@ (8007608 <USB_EPStartXfer+0x538>)
 8007528:	400b      	ands	r3, r1
 800752a:	69b9      	ldr	r1, [r7, #24]
 800752c:	0148      	lsls	r0, r1, #5
 800752e:	69f9      	ldr	r1, [r7, #28]
 8007530:	4401      	add	r1, r0
 8007532:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007536:	4313      	orrs	r3, r2
 8007538:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007550:	69b9      	ldr	r1, [r7, #24]
 8007552:	0148      	lsls	r0, r1, #5
 8007554:	69f9      	ldr	r1, [r7, #28]
 8007556:	4401      	add	r1, r0
 8007558:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800755c:	4313      	orrs	r3, r2
 800755e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007560:	79fb      	ldrb	r3, [r7, #7]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d10d      	bne.n	8007582 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d009      	beq.n	8007582 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	68d9      	ldr	r1, [r3, #12]
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800757e:	460a      	mov	r2, r1
 8007580:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	791b      	ldrb	r3, [r3, #4]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d128      	bne.n	80075dc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007596:	2b00      	cmp	r3, #0
 8007598:	d110      	bne.n	80075bc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	0151      	lsls	r1, r2, #5
 80075ac:	69fa      	ldr	r2, [r7, #28]
 80075ae:	440a      	add	r2, r1
 80075b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	e00f      	b.n	80075dc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	69fa      	ldr	r2, [r7, #28]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	0151      	lsls	r1, r2, #5
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	440a      	add	r2, r1
 80075f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80075fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3720      	adds	r7, #32
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	1ff80000 	.word	0x1ff80000

0800760c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	785b      	ldrb	r3, [r3, #1]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d14a      	bne.n	80076c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800763e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007642:	f040 8086 	bne.w	8007752 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	4413      	add	r3, r2
 8007650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	7812      	ldrb	r2, [r2, #0]
 800765a:	0151      	lsls	r1, r2, #5
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	440a      	add	r2, r1
 8007660:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007664:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007668:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	7812      	ldrb	r2, [r2, #0]
 800767e:	0151      	lsls	r1, r2, #5
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	440a      	add	r2, r1
 8007684:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007688:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800768c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3301      	adds	r3, #1
 8007692:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f242 7210 	movw	r2, #10000	@ 0x2710
 800769a:	4293      	cmp	r3, r2
 800769c:	d902      	bls.n	80076a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	75fb      	strb	r3, [r7, #23]
          break;
 80076a2:	e056      	b.n	8007752 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076bc:	d0e7      	beq.n	800768e <USB_EPStopXfer+0x82>
 80076be:	e048      	b.n	8007752 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076d8:	d13b      	bne.n	8007752 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	7812      	ldrb	r2, [r2, #0]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80076fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	7812      	ldrb	r2, [r2, #0]
 8007712:	0151      	lsls	r1, r2, #5
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	440a      	add	r2, r1
 8007718:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800771c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007720:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3301      	adds	r3, #1
 8007726:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800772e:	4293      	cmp	r3, r2
 8007730:	d902      	bls.n	8007738 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]
          break;
 8007736:	e00c      	b.n	8007752 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800774c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007750:	d0e7      	beq.n	8007722 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007752:	7dfb      	ldrb	r3, [r7, #23]
}
 8007754:	4618      	mov	r0, r3
 8007756:	371c      	adds	r7, #28
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007760:	b480      	push	{r7}
 8007762:	b089      	sub	sp, #36	@ 0x24
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	4611      	mov	r1, r2
 800776c:	461a      	mov	r2, r3
 800776e:	460b      	mov	r3, r1
 8007770:	71fb      	strb	r3, [r7, #7]
 8007772:	4613      	mov	r3, r2
 8007774:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800777e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007782:	2b00      	cmp	r3, #0
 8007784:	d123      	bne.n	80077ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007786:	88bb      	ldrh	r3, [r7, #4]
 8007788:	3303      	adds	r3, #3
 800778a:	089b      	lsrs	r3, r3, #2
 800778c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800778e:	2300      	movs	r3, #0
 8007790:	61bb      	str	r3, [r7, #24]
 8007792:	e018      	b.n	80077c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	031a      	lsls	r2, r3, #12
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	4413      	add	r3, r2
 800779c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077a0:	461a      	mov	r2, r3
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	3301      	adds	r3, #1
 80077ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	3301      	adds	r3, #1
 80077b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	3301      	adds	r3, #1
 80077b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	3301      	adds	r3, #1
 80077be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	3301      	adds	r3, #1
 80077c4:	61bb      	str	r3, [r7, #24]
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d3e2      	bcc.n	8007794 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3724      	adds	r7, #36	@ 0x24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80077dc:	b480      	push	{r7}
 80077de:	b08b      	sub	sp, #44	@ 0x2c
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80077f2:	88fb      	ldrh	r3, [r7, #6]
 80077f4:	089b      	lsrs	r3, r3, #2
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	f003 0303 	and.w	r3, r3, #3
 8007800:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007802:	2300      	movs	r3, #0
 8007804:	623b      	str	r3, [r7, #32]
 8007806:	e014      	b.n	8007832 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007812:	601a      	str	r2, [r3, #0]
    pDest++;
 8007814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007816:	3301      	adds	r3, #1
 8007818:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781c:	3301      	adds	r3, #1
 800781e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007822:	3301      	adds	r3, #1
 8007824:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	3301      	adds	r3, #1
 800782a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	3301      	adds	r3, #1
 8007830:	623b      	str	r3, [r7, #32]
 8007832:	6a3a      	ldr	r2, [r7, #32]
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	429a      	cmp	r2, r3
 8007838:	d3e6      	bcc.n	8007808 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800783a:	8bfb      	ldrh	r3, [r7, #30]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01e      	beq.n	800787e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800784a:	461a      	mov	r2, r3
 800784c:	f107 0310 	add.w	r3, r7, #16
 8007850:	6812      	ldr	r2, [r2, #0]
 8007852:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	b2db      	uxtb	r3, r3
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	fa22 f303 	lsr.w	r3, r2, r3
 8007860:	b2da      	uxtb	r2, r3
 8007862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007864:	701a      	strb	r2, [r3, #0]
      i++;
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	3301      	adds	r3, #1
 800786a:	623b      	str	r3, [r7, #32]
      pDest++;
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	3301      	adds	r3, #1
 8007870:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007872:	8bfb      	ldrh	r3, [r7, #30]
 8007874:	3b01      	subs	r3, #1
 8007876:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007878:	8bfb      	ldrh	r3, [r7, #30]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1ea      	bne.n	8007854 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800787e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007880:	4618      	mov	r0, r3
 8007882:	372c      	adds	r7, #44	@ 0x2c
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	785b      	ldrb	r3, [r3, #1]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d12c      	bne.n	8007902 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	db12      	blt.n	80078e0 <USB_EPSetStall+0x54>
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00f      	beq.n	80078e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	0151      	lsls	r1, r2, #5
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	440a      	add	r2, r1
 80078d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80078de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	0151      	lsls	r1, r2, #5
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	440a      	add	r2, r1
 80078f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	e02b      	b.n	800795a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	db12      	blt.n	800793a <USB_EPSetStall+0xae>
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00f      	beq.n	800793a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	0151      	lsls	r1, r2, #5
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	440a      	add	r2, r1
 8007930:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007934:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007938:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	0151      	lsls	r1, r2, #5
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	440a      	add	r2, r1
 8007950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007954:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007958:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d128      	bne.n	80079d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	0151      	lsls	r1, r2, #5
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	440a      	add	r2, r1
 800799a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800799e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80079a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	791b      	ldrb	r3, [r3, #4]
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d003      	beq.n	80079b4 <USB_EPClearStall+0x4c>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	791b      	ldrb	r3, [r3, #4]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d138      	bne.n	8007a26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	e027      	b.n	8007a26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80079f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	791b      	ldrb	r3, [r3, #4]
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d003      	beq.n	8007a06 <USB_EPClearStall+0x9e>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	791b      	ldrb	r3, [r3, #4]
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d10f      	bne.n	8007a26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	0151      	lsls	r1, r2, #5
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	440a      	add	r2, r1
 8007a1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a52:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007a56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	011b      	lsls	r3, r3, #4
 8007a64:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007a68:	68f9      	ldr	r1, [r7, #12]
 8007a6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007a9a:	f023 0303 	bic.w	r3, r3, #3
 8007a9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007aae:	f023 0302 	bic.w	r3, r3, #2
 8007ab2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007adc:	f023 0303 	bic.w	r3, r3, #3
 8007ae0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007af0:	f043 0302 	orr.w	r3, r3, #2
 8007af4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	0c1b      	lsrs	r3, r3, #16
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b085      	sub	sp, #20
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	b29b      	uxth	r3, r3
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b085      	sub	sp, #20
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b087      	sub	sp, #28
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bf0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007bf2:	78fb      	ldrb	r3, [r7, #3]
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfe:	01db      	lsls	r3, r3, #7
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007c08:	78fb      	ldrb	r3, [r7, #3]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	371c      	adds	r7, #28
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	f003 0301 	and.w	r3, r3, #1
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b085      	sub	sp, #20
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c60:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007c64:	f023 0307 	bic.w	r3, r3, #7
 8007c68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	460b      	mov	r3, r1
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	333c      	adds	r3, #60	@ 0x3c
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	4a26      	ldr	r2, [pc, #152]	@ (8007d44 <USB_EP0_OutStart+0xb8>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d90a      	bls.n	8007cc6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cc0:	d101      	bne.n	8007cc6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e037      	b.n	8007d36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ccc:	461a      	mov	r2, r3
 8007cce:	2300      	movs	r3, #0
 8007cd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ce0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ce4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cf4:	f043 0318 	orr.w	r3, r3, #24
 8007cf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d08:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007d0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007d0e:	7afb      	ldrb	r3, [r7, #11]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d10f      	bne.n	8007d34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d2e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007d32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	371c      	adds	r7, #28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	4f54300a 	.word	0x4f54300a

08007d48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3301      	adds	r3, #1
 8007d58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d60:	d901      	bls.n	8007d66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e01b      	b.n	8007d9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	daf2      	bge.n	8007d54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	f043 0201 	orr.w	r2, r3, #1
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3301      	adds	r3, #1
 8007d82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d8a:	d901      	bls.n	8007d90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e006      	b.n	8007d9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d0f0      	beq.n	8007d7e <USB_CoreReset+0x36>

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
	...

08007dac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007db8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007dbc:	f002 fcaa 	bl	800a714 <USBD_static_malloc>
 8007dc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d109      	bne.n	8007ddc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	32b0      	adds	r2, #176	@ 0xb0
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e0d4      	b.n	8007f86 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ddc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007de0:	2100      	movs	r1, #0
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f003 fd27 	bl	800b836 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	32b0      	adds	r2, #176	@ 0xb0
 8007df2:	68f9      	ldr	r1, [r7, #12]
 8007df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	32b0      	adds	r2, #176	@ 0xb0
 8007e02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	7c1b      	ldrb	r3, [r3, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d138      	bne.n	8007e86 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007e14:	4b5e      	ldr	r3, [pc, #376]	@ (8007f90 <USBD_CDC_Init+0x1e4>)
 8007e16:	7819      	ldrb	r1, [r3, #0]
 8007e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f002 fb55 	bl	800a4ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007e24:	4b5a      	ldr	r3, [pc, #360]	@ (8007f90 <USBD_CDC_Init+0x1e4>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	f003 020f 	and.w	r2, r3, #15
 8007e2c:	6879      	ldr	r1, [r7, #4]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	440b      	add	r3, r1
 8007e38:	3324      	adds	r3, #36	@ 0x24
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007e3e:	4b55      	ldr	r3, [pc, #340]	@ (8007f94 <USBD_CDC_Init+0x1e8>)
 8007e40:	7819      	ldrb	r1, [r3, #0]
 8007e42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e46:	2202      	movs	r2, #2
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f002 fb40 	bl	800a4ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007e4e:	4b51      	ldr	r3, [pc, #324]	@ (8007f94 <USBD_CDC_Init+0x1e8>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	f003 020f 	and.w	r2, r3, #15
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	440b      	add	r3, r1
 8007e62:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007e66:	2201      	movs	r2, #1
 8007e68:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8007f98 <USBD_CDC_Init+0x1ec>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	f003 020f 	and.w	r2, r3, #15
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	4613      	mov	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	440b      	add	r3, r1
 8007e7e:	3326      	adds	r3, #38	@ 0x26
 8007e80:	2210      	movs	r2, #16
 8007e82:	801a      	strh	r2, [r3, #0]
 8007e84:	e035      	b.n	8007ef2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007e86:	4b42      	ldr	r3, [pc, #264]	@ (8007f90 <USBD_CDC_Init+0x1e4>)
 8007e88:	7819      	ldrb	r1, [r3, #0]
 8007e8a:	2340      	movs	r3, #64	@ 0x40
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f002 fb1d 	bl	800a4ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007e94:	4b3e      	ldr	r3, [pc, #248]	@ (8007f90 <USBD_CDC_Init+0x1e4>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	f003 020f 	and.w	r2, r3, #15
 8007e9c:	6879      	ldr	r1, [r7, #4]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	440b      	add	r3, r1
 8007ea8:	3324      	adds	r3, #36	@ 0x24
 8007eaa:	2201      	movs	r2, #1
 8007eac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007eae:	4b39      	ldr	r3, [pc, #228]	@ (8007f94 <USBD_CDC_Init+0x1e8>)
 8007eb0:	7819      	ldrb	r1, [r3, #0]
 8007eb2:	2340      	movs	r3, #64	@ 0x40
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f002 fb09 	bl	800a4ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ebc:	4b35      	ldr	r3, [pc, #212]	@ (8007f94 <USBD_CDC_Init+0x1e8>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	f003 020f 	and.w	r2, r3, #15
 8007ec4:	6879      	ldr	r1, [r7, #4]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	440b      	add	r3, r1
 8007ed0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8007f98 <USBD_CDC_Init+0x1ec>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	f003 020f 	and.w	r2, r3, #15
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	440b      	add	r3, r1
 8007eec:	3326      	adds	r3, #38	@ 0x26
 8007eee:	2210      	movs	r2, #16
 8007ef0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ef2:	4b29      	ldr	r3, [pc, #164]	@ (8007f98 <USBD_CDC_Init+0x1ec>)
 8007ef4:	7819      	ldrb	r1, [r3, #0]
 8007ef6:	2308      	movs	r3, #8
 8007ef8:	2203      	movs	r2, #3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f002 fae7 	bl	800a4ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007f00:	4b25      	ldr	r3, [pc, #148]	@ (8007f98 <USBD_CDC_Init+0x1ec>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	f003 020f 	and.w	r2, r3, #15
 8007f08:	6879      	ldr	r1, [r7, #4]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	440b      	add	r3, r1
 8007f14:	3324      	adds	r3, #36	@ 0x24
 8007f16:	2201      	movs	r2, #1
 8007f18:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	33b0      	adds	r3, #176	@ 0xb0
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007f50:	2302      	movs	r3, #2
 8007f52:	e018      	b.n	8007f86 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	7c1b      	ldrb	r3, [r3, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10a      	bne.n	8007f72 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8007f94 <USBD_CDC_Init+0x1e8>)
 8007f5e:	7819      	ldrb	r1, [r3, #0]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f002 fb9e 	bl	800a6ac <USBD_LL_PrepareReceive>
 8007f70:	e008      	b.n	8007f84 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f72:	4b08      	ldr	r3, [pc, #32]	@ (8007f94 <USBD_CDC_Init+0x1e8>)
 8007f74:	7819      	ldrb	r1, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f7c:	2340      	movs	r3, #64	@ 0x40
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f002 fb94 	bl	800a6ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	2000009f 	.word	0x2000009f
 8007f94:	200000a0 	.word	0x200000a0
 8007f98:	200000a1 	.word	0x200000a1

08007f9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8008094 <USBD_CDC_DeInit+0xf8>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f002 fab3 	bl	800a51a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007fb4:	4b37      	ldr	r3, [pc, #220]	@ (8008094 <USBD_CDC_DeInit+0xf8>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	f003 020f 	and.w	r2, r3, #15
 8007fbc:	6879      	ldr	r1, [r7, #4]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	440b      	add	r3, r1
 8007fc8:	3324      	adds	r3, #36	@ 0x24
 8007fca:	2200      	movs	r2, #0
 8007fcc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007fce:	4b32      	ldr	r3, [pc, #200]	@ (8008098 <USBD_CDC_DeInit+0xfc>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f002 faa0 	bl	800a51a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007fda:	4b2f      	ldr	r3, [pc, #188]	@ (8008098 <USBD_CDC_DeInit+0xfc>)
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	f003 020f 	and.w	r2, r3, #15
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	440b      	add	r3, r1
 8007fee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007ff6:	4b29      	ldr	r3, [pc, #164]	@ (800809c <USBD_CDC_DeInit+0x100>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f002 fa8c 	bl	800a51a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008002:	4b26      	ldr	r3, [pc, #152]	@ (800809c <USBD_CDC_DeInit+0x100>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	f003 020f 	and.w	r2, r3, #15
 800800a:	6879      	ldr	r1, [r7, #4]
 800800c:	4613      	mov	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	440b      	add	r3, r1
 8008016:	3324      	adds	r3, #36	@ 0x24
 8008018:	2200      	movs	r2, #0
 800801a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800801c:	4b1f      	ldr	r3, [pc, #124]	@ (800809c <USBD_CDC_DeInit+0x100>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	f003 020f 	and.w	r2, r3, #15
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	3326      	adds	r3, #38	@ 0x26
 8008032:	2200      	movs	r2, #0
 8008034:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	32b0      	adds	r2, #176	@ 0xb0
 8008040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01f      	beq.n	8008088 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	33b0      	adds	r3, #176	@ 0xb0
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	32b0      	adds	r2, #176	@ 0xb0
 8008066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806a:	4618      	mov	r0, r3
 800806c:	f002 fb60 	bl	800a730 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	32b0      	adds	r2, #176	@ 0xb0
 800807a:	2100      	movs	r1, #0
 800807c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	2000009f 	.word	0x2000009f
 8008098:	200000a0 	.word	0x200000a0
 800809c:	200000a1 	.word	0x200000a1

080080a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	32b0      	adds	r2, #176	@ 0xb0
 80080b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e0bf      	b.n	8008250 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d050      	beq.n	800817e <USBD_CDC_Setup+0xde>
 80080dc:	2b20      	cmp	r3, #32
 80080de:	f040 80af 	bne.w	8008240 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	88db      	ldrh	r3, [r3, #6]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d03a      	beq.n	8008160 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	b25b      	sxtb	r3, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	da1b      	bge.n	800812c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	33b0      	adds	r3, #176	@ 0xb0
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800810a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	88d2      	ldrh	r2, [r2, #6]
 8008110:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	88db      	ldrh	r3, [r3, #6]
 8008116:	2b07      	cmp	r3, #7
 8008118:	bf28      	it	cs
 800811a:	2307      	movcs	r3, #7
 800811c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	89fa      	ldrh	r2, [r7, #14]
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f001 fd93 	bl	8009c50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800812a:	e090      	b.n	800824e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	785a      	ldrb	r2, [r3, #1]
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	88db      	ldrh	r3, [r3, #6]
 800813a:	2b3f      	cmp	r3, #63	@ 0x3f
 800813c:	d803      	bhi.n	8008146 <USBD_CDC_Setup+0xa6>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	88db      	ldrh	r3, [r3, #6]
 8008142:	b2da      	uxtb	r2, r3
 8008144:	e000      	b.n	8008148 <USBD_CDC_Setup+0xa8>
 8008146:	2240      	movs	r2, #64	@ 0x40
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800814e:	6939      	ldr	r1, [r7, #16]
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008156:	461a      	mov	r2, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 fda5 	bl	8009ca8 <USBD_CtlPrepareRx>
      break;
 800815e:	e076      	b.n	800824e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	33b0      	adds	r3, #176	@ 0xb0
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	7850      	ldrb	r0, [r2, #1]
 8008176:	2200      	movs	r2, #0
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	4798      	blx	r3
      break;
 800817c:	e067      	b.n	800824e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	785b      	ldrb	r3, [r3, #1]
 8008182:	2b0b      	cmp	r3, #11
 8008184:	d851      	bhi.n	800822a <USBD_CDC_Setup+0x18a>
 8008186:	a201      	add	r2, pc, #4	@ (adr r2, 800818c <USBD_CDC_Setup+0xec>)
 8008188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818c:	080081bd 	.word	0x080081bd
 8008190:	08008239 	.word	0x08008239
 8008194:	0800822b 	.word	0x0800822b
 8008198:	0800822b 	.word	0x0800822b
 800819c:	0800822b 	.word	0x0800822b
 80081a0:	0800822b 	.word	0x0800822b
 80081a4:	0800822b 	.word	0x0800822b
 80081a8:	0800822b 	.word	0x0800822b
 80081ac:	0800822b 	.word	0x0800822b
 80081b0:	0800822b 	.word	0x0800822b
 80081b4:	080081e7 	.word	0x080081e7
 80081b8:	08008211 	.word	0x08008211
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d107      	bne.n	80081d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80081c8:	f107 030a 	add.w	r3, r7, #10
 80081cc:	2202      	movs	r2, #2
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f001 fd3d 	bl	8009c50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081d6:	e032      	b.n	800823e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 fcbb 	bl	8009b56 <USBD_CtlError>
            ret = USBD_FAIL;
 80081e0:	2303      	movs	r3, #3
 80081e2:	75fb      	strb	r3, [r7, #23]
          break;
 80081e4:	e02b      	b.n	800823e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d107      	bne.n	8008202 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80081f2:	f107 030d 	add.w	r3, r7, #13
 80081f6:	2201      	movs	r2, #1
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f001 fd28 	bl	8009c50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008200:	e01d      	b.n	800823e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 fca6 	bl	8009b56 <USBD_CtlError>
            ret = USBD_FAIL;
 800820a:	2303      	movs	r3, #3
 800820c:	75fb      	strb	r3, [r7, #23]
          break;
 800820e:	e016      	b.n	800823e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b03      	cmp	r3, #3
 800821a:	d00f      	beq.n	800823c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f001 fc99 	bl	8009b56 <USBD_CtlError>
            ret = USBD_FAIL;
 8008224:	2303      	movs	r3, #3
 8008226:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008228:	e008      	b.n	800823c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800822a:	6839      	ldr	r1, [r7, #0]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f001 fc92 	bl	8009b56 <USBD_CtlError>
          ret = USBD_FAIL;
 8008232:	2303      	movs	r3, #3
 8008234:	75fb      	strb	r3, [r7, #23]
          break;
 8008236:	e002      	b.n	800823e <USBD_CDC_Setup+0x19e>
          break;
 8008238:	bf00      	nop
 800823a:	e008      	b.n	800824e <USBD_CDC_Setup+0x1ae>
          break;
 800823c:	bf00      	nop
      }
      break;
 800823e:	e006      	b.n	800824e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f001 fc87 	bl	8009b56 <USBD_CtlError>
      ret = USBD_FAIL;
 8008248:	2303      	movs	r3, #3
 800824a:	75fb      	strb	r3, [r7, #23]
      break;
 800824c:	bf00      	nop
  }

  return (uint8_t)ret;
 800824e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800826a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	32b0      	adds	r2, #176	@ 0xb0
 8008276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800827e:	2303      	movs	r3, #3
 8008280:	e065      	b.n	800834e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	32b0      	adds	r2, #176	@ 0xb0
 800828c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008290:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008292:	78fb      	ldrb	r3, [r7, #3]
 8008294:	f003 020f 	and.w	r2, r3, #15
 8008298:	6879      	ldr	r1, [r7, #4]
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	440b      	add	r3, r1
 80082a4:	3318      	adds	r3, #24
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d02f      	beq.n	800830c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80082ac:	78fb      	ldrb	r3, [r7, #3]
 80082ae:	f003 020f 	and.w	r2, r3, #15
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	4613      	mov	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	3318      	adds	r3, #24
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	78fb      	ldrb	r3, [r7, #3]
 80082c4:	f003 010f 	and.w	r1, r3, #15
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	460b      	mov	r3, r1
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	440b      	add	r3, r1
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4403      	add	r3, r0
 80082d4:	331c      	adds	r3, #28
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80082dc:	fb01 f303 	mul.w	r3, r1, r3
 80082e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d112      	bne.n	800830c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	f003 020f 	and.w	r2, r3, #15
 80082ec:	6879      	ldr	r1, [r7, #4]
 80082ee:	4613      	mov	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	440b      	add	r3, r1
 80082f8:	3318      	adds	r3, #24
 80082fa:	2200      	movs	r2, #0
 80082fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80082fe:	78f9      	ldrb	r1, [r7, #3]
 8008300:	2300      	movs	r3, #0
 8008302:	2200      	movs	r2, #0
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f002 f9b0 	bl	800a66a <USBD_LL_Transmit>
 800830a:	e01f      	b.n	800834c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2200      	movs	r2, #0
 8008310:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	33b0      	adds	r3, #176	@ 0xb0
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d010      	beq.n	800834c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	33b0      	adds	r3, #176	@ 0xb0
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008348:	78fa      	ldrb	r2, [r7, #3]
 800834a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b084      	sub	sp, #16
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	460b      	mov	r3, r1
 8008360:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	32b0      	adds	r2, #176	@ 0xb0
 800836c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008370:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	32b0      	adds	r2, #176	@ 0xb0
 800837c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008384:	2303      	movs	r3, #3
 8008386:	e01a      	b.n	80083be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f002 f9ae 	bl	800a6ee <USBD_LL_GetRxDataSize>
 8008392:	4602      	mov	r2, r0
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	33b0      	adds	r3, #176	@ 0xb0
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80083b8:	4611      	mov	r1, r2
 80083ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	32b0      	adds	r2, #176	@ 0xb0
 80083d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e024      	b.n	8008432 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	33b0      	adds	r3, #176	@ 0xb0
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d019      	beq.n	8008430 <USBD_CDC_EP0_RxReady+0x6a>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008402:	2bff      	cmp	r3, #255	@ 0xff
 8008404:	d014      	beq.n	8008430 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	33b0      	adds	r3, #176	@ 0xb0
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800841e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008426:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	22ff      	movs	r2, #255	@ 0xff
 800842c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008444:	2182      	movs	r1, #130	@ 0x82
 8008446:	4818      	ldr	r0, [pc, #96]	@ (80084a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008448:	f000 fd4f 	bl	8008eea <USBD_GetEpDesc>
 800844c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800844e:	2101      	movs	r1, #1
 8008450:	4815      	ldr	r0, [pc, #84]	@ (80084a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008452:	f000 fd4a 	bl	8008eea <USBD_GetEpDesc>
 8008456:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008458:	2181      	movs	r1, #129	@ 0x81
 800845a:	4813      	ldr	r0, [pc, #76]	@ (80084a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800845c:	f000 fd45 	bl	8008eea <USBD_GetEpDesc>
 8008460:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2210      	movs	r2, #16
 800846c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d006      	beq.n	8008482 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2200      	movs	r2, #0
 8008478:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800847c:	711a      	strb	r2, [r3, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d006      	beq.n	8008496 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008490:	711a      	strb	r2, [r3, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2243      	movs	r2, #67	@ 0x43
 800849a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800849c:	4b02      	ldr	r3, [pc, #8]	@ (80084a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	2000005c 	.word	0x2000005c

080084ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80084b4:	2182      	movs	r1, #130	@ 0x82
 80084b6:	4818      	ldr	r0, [pc, #96]	@ (8008518 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084b8:	f000 fd17 	bl	8008eea <USBD_GetEpDesc>
 80084bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80084be:	2101      	movs	r1, #1
 80084c0:	4815      	ldr	r0, [pc, #84]	@ (8008518 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084c2:	f000 fd12 	bl	8008eea <USBD_GetEpDesc>
 80084c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80084c8:	2181      	movs	r1, #129	@ 0x81
 80084ca:	4813      	ldr	r0, [pc, #76]	@ (8008518 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084cc:	f000 fd0d 	bl	8008eea <USBD_GetEpDesc>
 80084d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	2210      	movs	r2, #16
 80084dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d006      	beq.n	80084f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	2200      	movs	r2, #0
 80084e8:	711a      	strb	r2, [r3, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f042 0202 	orr.w	r2, r2, #2
 80084f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d006      	beq.n	8008506 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	711a      	strb	r2, [r3, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f042 0202 	orr.w	r2, r2, #2
 8008504:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2243      	movs	r2, #67	@ 0x43
 800850a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800850c:	4b02      	ldr	r3, [pc, #8]	@ (8008518 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800850e:	4618      	mov	r0, r3
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	2000005c 	.word	0x2000005c

0800851c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008524:	2182      	movs	r1, #130	@ 0x82
 8008526:	4818      	ldr	r0, [pc, #96]	@ (8008588 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008528:	f000 fcdf 	bl	8008eea <USBD_GetEpDesc>
 800852c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800852e:	2101      	movs	r1, #1
 8008530:	4815      	ldr	r0, [pc, #84]	@ (8008588 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008532:	f000 fcda 	bl	8008eea <USBD_GetEpDesc>
 8008536:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008538:	2181      	movs	r1, #129	@ 0x81
 800853a:	4813      	ldr	r0, [pc, #76]	@ (8008588 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800853c:	f000 fcd5 	bl	8008eea <USBD_GetEpDesc>
 8008540:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2210      	movs	r2, #16
 800854c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d006      	beq.n	8008562 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	2200      	movs	r2, #0
 8008558:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800855c:	711a      	strb	r2, [r3, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d006      	beq.n	8008576 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008570:	711a      	strb	r2, [r3, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2243      	movs	r2, #67	@ 0x43
 800857a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800857c:	4b02      	ldr	r3, [pc, #8]	@ (8008588 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800857e:	4618      	mov	r0, r3
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	2000005c 	.word	0x2000005c

0800858c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	220a      	movs	r2, #10
 8008598:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800859a:	4b03      	ldr	r3, [pc, #12]	@ (80085a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800859c:	4618      	mov	r0, r3
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	20000018 	.word	0x20000018

080085ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80085bc:	2303      	movs	r3, #3
 80085be:	e009      	b.n	80085d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	33b0      	adds	r3, #176	@ 0xb0
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	32b0      	adds	r2, #176	@ 0xb0
 80085f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d101      	bne.n	8008606 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008602:	2303      	movs	r3, #3
 8008604:	e008      	b.n	8008618 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	371c      	adds	r7, #28
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	32b0      	adds	r2, #176	@ 0xb0
 8008638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d101      	bne.n	8008648 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008644:	2303      	movs	r3, #3
 8008646:	e004      	b.n	8008652 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
	...

08008660 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	32b0      	adds	r2, #176	@ 0xb0
 8008672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008676:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008678:	2301      	movs	r3, #1
 800867a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d101      	bne.n	8008686 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008682:	2303      	movs	r3, #3
 8008684:	e025      	b.n	80086d2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800868c:	2b00      	cmp	r3, #0
 800868e:	d11f      	bne.n	80086d0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2201      	movs	r2, #1
 8008694:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008698:	4b10      	ldr	r3, [pc, #64]	@ (80086dc <USBD_CDC_TransmitPacket+0x7c>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	f003 020f 	and.w	r2, r3, #15
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4403      	add	r3, r0
 80086b2:	3318      	adds	r3, #24
 80086b4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80086b6:	4b09      	ldr	r3, [pc, #36]	@ (80086dc <USBD_CDC_TransmitPacket+0x7c>)
 80086b8:	7819      	ldrb	r1, [r3, #0]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f001 ffcf 	bl	800a66a <USBD_LL_Transmit>

    ret = USBD_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	2000009f 	.word	0x2000009f

080086e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	32b0      	adds	r2, #176	@ 0xb0
 80086f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	32b0      	adds	r2, #176	@ 0xb0
 8008702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800870a:	2303      	movs	r3, #3
 800870c:	e018      	b.n	8008740 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	7c1b      	ldrb	r3, [r3, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10a      	bne.n	800872c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008716:	4b0c      	ldr	r3, [pc, #48]	@ (8008748 <USBD_CDC_ReceivePacket+0x68>)
 8008718:	7819      	ldrb	r1, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f001 ffc1 	bl	800a6ac <USBD_LL_PrepareReceive>
 800872a:	e008      	b.n	800873e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800872c:	4b06      	ldr	r3, [pc, #24]	@ (8008748 <USBD_CDC_ReceivePacket+0x68>)
 800872e:	7819      	ldrb	r1, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008736:	2340      	movs	r3, #64	@ 0x40
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 ffb7 	bl	800a6ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	200000a0 	.word	0x200000a0

0800874c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	4613      	mov	r3, r2
 8008758:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008760:	2303      	movs	r3, #3
 8008762:	e01f      	b.n	80087a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2200      	movs	r2, #0
 8008770:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d003      	beq.n	800878a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	79fa      	ldrb	r2, [r7, #7]
 8008796:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f001 fe31 	bl	800a400 <USBD_LL_Init>
 800879e:	4603      	mov	r3, r0
 80087a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80087a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e025      	b.n	8008810 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	32ae      	adds	r2, #174	@ 0xae
 80087d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00f      	beq.n	8008800 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	32ae      	adds	r2, #174	@ 0xae
 80087ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f0:	f107 020e 	add.w	r2, r7, #14
 80087f4:	4610      	mov	r0, r2
 80087f6:	4798      	blx	r3
 80087f8:	4602      	mov	r2, r0
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 fe39 	bl	800a498 <USBD_LL_Start>
 8008826:	4603      	mov	r3, r0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008838:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800883a:	4618      	mov	r0, r3
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b084      	sub	sp, #16
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	460b      	mov	r3, r1
 8008850:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800885c:	2b00      	cmp	r3, #0
 800885e:	d009      	beq.n	8008874 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	78fa      	ldrb	r2, [r7, #3]
 800886a:	4611      	mov	r1, r2
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	4798      	blx	r3
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008874:	7bfb      	ldrb	r3, [r7, #15]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	460b      	mov	r3, r1
 8008888:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	78fa      	ldrb	r2, [r7, #3]
 8008898:	4611      	mov	r1, r2
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	4798      	blx	r3
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80088a4:	2303      	movs	r3, #3
 80088a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f001 f90c 	bl	8009ae2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80088d8:	461a      	mov	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80088e6:	f003 031f 	and.w	r3, r3, #31
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d01a      	beq.n	8008924 <USBD_LL_SetupStage+0x72>
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d822      	bhi.n	8008938 <USBD_LL_SetupStage+0x86>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <USBD_LL_SetupStage+0x4a>
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d00a      	beq.n	8008910 <USBD_LL_SetupStage+0x5e>
 80088fa:	e01d      	b.n	8008938 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fb63 	bl	8008fd0 <USBD_StdDevReq>
 800890a:	4603      	mov	r3, r0
 800890c:	73fb      	strb	r3, [r7, #15]
      break;
 800890e:	e020      	b.n	8008952 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fbcb 	bl	80090b4 <USBD_StdItfReq>
 800891e:	4603      	mov	r3, r0
 8008920:	73fb      	strb	r3, [r7, #15]
      break;
 8008922:	e016      	b.n	8008952 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fc2d 	bl	800918c <USBD_StdEPReq>
 8008932:	4603      	mov	r3, r0
 8008934:	73fb      	strb	r3, [r7, #15]
      break;
 8008936:	e00c      	b.n	8008952 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800893e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008942:	b2db      	uxtb	r3, r3
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f001 fe06 	bl	800a558 <USBD_LL_StallEP>
 800894c:	4603      	mov	r3, r0
 800894e:	73fb      	strb	r3, [r7, #15]
      break;
 8008950:	bf00      	nop
  }

  return ret;
 8008952:	7bfb      	ldrb	r3, [r7, #15]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	460b      	mov	r3, r1
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800896e:	7afb      	ldrb	r3, [r7, #11]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d16e      	bne.n	8008a52 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800897a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008982:	2b03      	cmp	r3, #3
 8008984:	f040 8098 	bne.w	8008ab8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	429a      	cmp	r2, r3
 8008992:	d913      	bls.n	80089bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	1ad2      	subs	r2, r2, r3
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	68da      	ldr	r2, [r3, #12]
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	4293      	cmp	r3, r2
 80089ac:	bf28      	it	cs
 80089ae:	4613      	movcs	r3, r2
 80089b0:	461a      	mov	r2, r3
 80089b2:	6879      	ldr	r1, [r7, #4]
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f001 f994 	bl	8009ce2 <USBD_CtlContinueRx>
 80089ba:	e07d      	b.n	8008ab8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80089c2:	f003 031f 	and.w	r3, r3, #31
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d014      	beq.n	80089f4 <USBD_LL_DataOutStage+0x98>
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d81d      	bhi.n	8008a0a <USBD_LL_DataOutStage+0xae>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d002      	beq.n	80089d8 <USBD_LL_DataOutStage+0x7c>
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d003      	beq.n	80089de <USBD_LL_DataOutStage+0x82>
 80089d6:	e018      	b.n	8008a0a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	75bb      	strb	r3, [r7, #22]
            break;
 80089dc:	e018      	b.n	8008a10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	4619      	mov	r1, r3
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 fa64 	bl	8008eb6 <USBD_CoreFindIF>
 80089ee:	4603      	mov	r3, r0
 80089f0:	75bb      	strb	r3, [r7, #22]
            break;
 80089f2:	e00d      	b.n	8008a10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	4619      	mov	r1, r3
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 fa66 	bl	8008ed0 <USBD_CoreFindEP>
 8008a04:	4603      	mov	r3, r0
 8008a06:	75bb      	strb	r3, [r7, #22]
            break;
 8008a08:	e002      	b.n	8008a10 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	75bb      	strb	r3, [r7, #22]
            break;
 8008a0e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008a10:	7dbb      	ldrb	r3, [r7, #22]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d119      	bne.n	8008a4a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d113      	bne.n	8008a4a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008a22:	7dba      	ldrb	r2, [r7, #22]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	32ae      	adds	r2, #174	@ 0xae
 8008a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00b      	beq.n	8008a4a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008a32:	7dba      	ldrb	r2, [r7, #22]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008a3a:	7dba      	ldrb	r2, [r7, #22]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	32ae      	adds	r2, #174	@ 0xae
 8008a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f001 f95a 	bl	8009d04 <USBD_CtlSendStatus>
 8008a50:	e032      	b.n	8008ab8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008a52:	7afb      	ldrb	r3, [r7, #11]
 8008a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 fa37 	bl	8008ed0 <USBD_CoreFindEP>
 8008a62:	4603      	mov	r3, r0
 8008a64:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a66:	7dbb      	ldrb	r3, [r7, #22]
 8008a68:	2bff      	cmp	r3, #255	@ 0xff
 8008a6a:	d025      	beq.n	8008ab8 <USBD_LL_DataOutStage+0x15c>
 8008a6c:	7dbb      	ldrb	r3, [r7, #22]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d122      	bne.n	8008ab8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d117      	bne.n	8008aae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008a7e:	7dba      	ldrb	r2, [r7, #22]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	32ae      	adds	r2, #174	@ 0xae
 8008a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00f      	beq.n	8008aae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008a8e:	7dba      	ldrb	r2, [r7, #22]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008a96:	7dba      	ldrb	r2, [r7, #22]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	32ae      	adds	r2, #174	@ 0xae
 8008a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	7afa      	ldrb	r2, [r7, #11]
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	4798      	blx	r3
 8008aaa:	4603      	mov	r3, r0
 8008aac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008aae:	7dfb      	ldrb	r3, [r7, #23]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
 8008ab6:	e000      	b.n	8008aba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b086      	sub	sp, #24
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	60f8      	str	r0, [r7, #12]
 8008aca:	460b      	mov	r3, r1
 8008acc:	607a      	str	r2, [r7, #4]
 8008ace:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008ad0:	7afb      	ldrb	r3, [r7, #11]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d16f      	bne.n	8008bb6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3314      	adds	r3, #20
 8008ada:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d15a      	bne.n	8008b9c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d914      	bls.n	8008b1c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	689a      	ldr	r2, [r3, #8]
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	1ad2      	subs	r2, r2, r3
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	461a      	mov	r2, r3
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f001 f8bc 	bl	8009c86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2200      	movs	r2, #0
 8008b12:	2100      	movs	r1, #0
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f001 fdc9 	bl	800a6ac <USBD_LL_PrepareReceive>
 8008b1a:	e03f      	b.n	8008b9c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	68da      	ldr	r2, [r3, #12]
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d11c      	bne.n	8008b62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d316      	bcc.n	8008b62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d20f      	bcs.n	8008b62 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b42:	2200      	movs	r2, #0
 8008b44:	2100      	movs	r1, #0
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f001 f89d 	bl	8009c86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b54:	2300      	movs	r3, #0
 8008b56:	2200      	movs	r2, #0
 8008b58:	2100      	movs	r1, #0
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f001 fda6 	bl	800a6ac <USBD_LL_PrepareReceive>
 8008b60:	e01c      	b.n	8008b9c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d10f      	bne.n	8008b8e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d009      	beq.n	8008b8e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b8e:	2180      	movs	r1, #128	@ 0x80
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f001 fce1 	bl	800a558 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f001 f8c7 	bl	8009d2a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d03a      	beq.n	8008c1c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f7ff fe42 	bl	8008830 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008bb4:	e032      	b.n	8008c1c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008bb6:	7afb      	ldrb	r3, [r7, #11]
 8008bb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f000 f985 	bl	8008ed0 <USBD_CoreFindEP>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	2bff      	cmp	r3, #255	@ 0xff
 8008bce:	d025      	beq.n	8008c1c <USBD_LL_DataInStage+0x15a>
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d122      	bne.n	8008c1c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d11c      	bne.n	8008c1c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008be2:	7dfa      	ldrb	r2, [r7, #23]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	32ae      	adds	r2, #174	@ 0xae
 8008be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d014      	beq.n	8008c1c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008bf2:	7dfa      	ldrb	r2, [r7, #23]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008bfa:	7dfa      	ldrb	r2, [r7, #23]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	32ae      	adds	r2, #174	@ 0xae
 8008c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	7afa      	ldrb	r2, [r7, #11]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	4798      	blx	r3
 8008c0e:	4603      	mov	r3, r0
 8008c10:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008c12:	7dbb      	ldrb	r3, [r7, #22]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008c18:	7dbb      	ldrb	r3, [r7, #22]
 8008c1a:	e000      	b.n	8008c1e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d014      	beq.n	8008c8c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00e      	beq.n	8008c8c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	6852      	ldr	r2, [r2, #4]
 8008c7a:	b2d2      	uxtb	r2, r2
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	4798      	blx	r3
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c8c:	2340      	movs	r3, #64	@ 0x40
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2100      	movs	r1, #0
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f001 fc1b 	bl	800a4ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2240      	movs	r2, #64	@ 0x40
 8008ca4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ca8:	2340      	movs	r3, #64	@ 0x40
 8008caa:	2200      	movs	r2, #0
 8008cac:	2180      	movs	r1, #128	@ 0x80
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f001 fc0d 	bl	800a4ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2240      	movs	r2, #64	@ 0x40
 8008cbe:	621a      	str	r2, [r3, #32]

  return ret;
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b083      	sub	sp, #12
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	78fa      	ldrb	r2, [r7, #3]
 8008cda:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b04      	cmp	r3, #4
 8008cfc:	d006      	beq.n	8008d0c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2204      	movs	r2, #4
 8008d10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b04      	cmp	r3, #4
 8008d34:	d106      	bne.n	8008d44 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008d3c:	b2da      	uxtb	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d110      	bne.n	8008d88 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00b      	beq.n	8008d88 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d76:	69db      	ldr	r3, [r3, #28]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d005      	beq.n	8008d88 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b082      	sub	sp, #8
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	32ae      	adds	r2, #174	@ 0xae
 8008da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e01c      	b.n	8008dee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b03      	cmp	r3, #3
 8008dbe:	d115      	bne.n	8008dec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	32ae      	adds	r2, #174	@ 0xae
 8008dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00b      	beq.n	8008dec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	32ae      	adds	r2, #174	@ 0xae
 8008dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	78fa      	ldrb	r2, [r7, #3]
 8008de6:	4611      	mov	r1, r2
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b082      	sub	sp, #8
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	32ae      	adds	r2, #174	@ 0xae
 8008e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e01c      	b.n	8008e52 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d115      	bne.n	8008e50 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	32ae      	adds	r2, #174	@ 0xae
 8008e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00b      	beq.n	8008e50 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	32ae      	adds	r2, #174	@ 0xae
 8008e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e48:	78fa      	ldrb	r2, [r7, #3]
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b083      	sub	sp, #12
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00e      	beq.n	8008eac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	6852      	ldr	r2, [r2, #4]
 8008e9a:	b2d2      	uxtb	r2, r2
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	4798      	blx	r3
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d001      	beq.n	8008eac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ec2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008edc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b086      	sub	sp, #24
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	885b      	ldrh	r3, [r3, #2]
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	7812      	ldrb	r2, [r2, #0]
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d91f      	bls.n	8008f50 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008f16:	e013      	b.n	8008f40 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008f18:	f107 030a 	add.w	r3, r7, #10
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6978      	ldr	r0, [r7, #20]
 8008f20:	f000 f81b 	bl	8008f5a <USBD_GetNextDesc>
 8008f24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	785b      	ldrb	r3, [r3, #1]
 8008f2a:	2b05      	cmp	r3, #5
 8008f2c:	d108      	bne.n	8008f40 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	789b      	ldrb	r3, [r3, #2]
 8008f36:	78fa      	ldrb	r2, [r7, #3]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d008      	beq.n	8008f4e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	885b      	ldrh	r3, [r3, #2]
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	897b      	ldrh	r3, [r7, #10]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d8e5      	bhi.n	8008f18 <USBD_GetEpDesc+0x2e>
 8008f4c:	e000      	b.n	8008f50 <USBD_GetEpDesc+0x66>
          break;
 8008f4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008f50:	693b      	ldr	r3, [r7, #16]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b085      	sub	sp, #20
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	7812      	ldrb	r2, [r2, #0]
 8008f70:	4413      	add	r3, r2
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4413      	add	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008f84:	68fb      	ldr	r3, [r7, #12]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008f92:	b480      	push	{r7}
 8008f94:	b087      	sub	sp, #28
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008fb0:	8a3b      	ldrh	r3, [r7, #16]
 8008fb2:	021b      	lsls	r3, r3, #8
 8008fb4:	b21a      	sxth	r2, r3
 8008fb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	b21b      	sxth	r3, r3
 8008fbe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008fc0:	89fb      	ldrh	r3, [r7, #14]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	371c      	adds	r7, #28
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
	...

08008fd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008fe6:	2b40      	cmp	r3, #64	@ 0x40
 8008fe8:	d005      	beq.n	8008ff6 <USBD_StdDevReq+0x26>
 8008fea:	2b40      	cmp	r3, #64	@ 0x40
 8008fec:	d857      	bhi.n	800909e <USBD_StdDevReq+0xce>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00f      	beq.n	8009012 <USBD_StdDevReq+0x42>
 8008ff2:	2b20      	cmp	r3, #32
 8008ff4:	d153      	bne.n	800909e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	32ae      	adds	r2, #174	@ 0xae
 8009000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	4798      	blx	r3
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]
      break;
 8009010:	e04a      	b.n	80090a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	785b      	ldrb	r3, [r3, #1]
 8009016:	2b09      	cmp	r3, #9
 8009018:	d83b      	bhi.n	8009092 <USBD_StdDevReq+0xc2>
 800901a:	a201      	add	r2, pc, #4	@ (adr r2, 8009020 <USBD_StdDevReq+0x50>)
 800901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009020:	08009075 	.word	0x08009075
 8009024:	08009089 	.word	0x08009089
 8009028:	08009093 	.word	0x08009093
 800902c:	0800907f 	.word	0x0800907f
 8009030:	08009093 	.word	0x08009093
 8009034:	08009053 	.word	0x08009053
 8009038:	08009049 	.word	0x08009049
 800903c:	08009093 	.word	0x08009093
 8009040:	0800906b 	.word	0x0800906b
 8009044:	0800905d 	.word	0x0800905d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fa3c 	bl	80094c8 <USBD_GetDescriptor>
          break;
 8009050:	e024      	b.n	800909c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fba1 	bl	800979c <USBD_SetAddress>
          break;
 800905a:	e01f      	b.n	800909c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fbe0 	bl	8009824 <USBD_SetConfig>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]
          break;
 8009068:	e018      	b.n	800909c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fc83 	bl	8009978 <USBD_GetConfig>
          break;
 8009072:	e013      	b.n	800909c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fcb4 	bl	80099e4 <USBD_GetStatus>
          break;
 800907c:	e00e      	b.n	800909c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fce3 	bl	8009a4c <USBD_SetFeature>
          break;
 8009086:	e009      	b.n	800909c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fd07 	bl	8009a9e <USBD_ClrFeature>
          break;
 8009090:	e004      	b.n	800909c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fd5e 	bl	8009b56 <USBD_CtlError>
          break;
 800909a:	bf00      	nop
      }
      break;
 800909c:	e004      	b.n	80090a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fd58 	bl	8009b56 <USBD_CtlError>
      break;
 80090a6:	bf00      	nop
  }

  return ret;
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop

080090b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090ca:	2b40      	cmp	r3, #64	@ 0x40
 80090cc:	d005      	beq.n	80090da <USBD_StdItfReq+0x26>
 80090ce:	2b40      	cmp	r3, #64	@ 0x40
 80090d0:	d852      	bhi.n	8009178 <USBD_StdItfReq+0xc4>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <USBD_StdItfReq+0x26>
 80090d6:	2b20      	cmp	r3, #32
 80090d8:	d14e      	bne.n	8009178 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	3b01      	subs	r3, #1
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d840      	bhi.n	800916a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	889b      	ldrh	r3, [r3, #4]
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d836      	bhi.n	8009160 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	889b      	ldrh	r3, [r3, #4]
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff fedb 	bl	8008eb6 <USBD_CoreFindIF>
 8009100:	4603      	mov	r3, r0
 8009102:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	2bff      	cmp	r3, #255	@ 0xff
 8009108:	d01d      	beq.n	8009146 <USBD_StdItfReq+0x92>
 800910a:	7bbb      	ldrb	r3, [r7, #14]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d11a      	bne.n	8009146 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009110:	7bba      	ldrb	r2, [r7, #14]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	32ae      	adds	r2, #174	@ 0xae
 8009116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00f      	beq.n	8009140 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009120:	7bba      	ldrb	r2, [r7, #14]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009128:	7bba      	ldrb	r2, [r7, #14]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	32ae      	adds	r2, #174	@ 0xae
 800912e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	4798      	blx	r3
 800913a:	4603      	mov	r3, r0
 800913c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800913e:	e004      	b.n	800914a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009140:	2303      	movs	r3, #3
 8009142:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009144:	e001      	b.n	800914a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009146:	2303      	movs	r3, #3
 8009148:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	88db      	ldrh	r3, [r3, #6]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d110      	bne.n	8009174 <USBD_StdItfReq+0xc0>
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10d      	bne.n	8009174 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fdd3 	bl	8009d04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800915e:	e009      	b.n	8009174 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fcf7 	bl	8009b56 <USBD_CtlError>
          break;
 8009168:	e004      	b.n	8009174 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fcf2 	bl	8009b56 <USBD_CtlError>
          break;
 8009172:	e000      	b.n	8009176 <USBD_StdItfReq+0xc2>
          break;
 8009174:	bf00      	nop
      }
      break;
 8009176:	e004      	b.n	8009182 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fceb 	bl	8009b56 <USBD_CtlError>
      break;
 8009180:	bf00      	nop
  }

  return ret;
 8009182:	7bfb      	ldrb	r3, [r7, #15]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	889b      	ldrh	r3, [r3, #4]
 800919e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091a8:	2b40      	cmp	r3, #64	@ 0x40
 80091aa:	d007      	beq.n	80091bc <USBD_StdEPReq+0x30>
 80091ac:	2b40      	cmp	r3, #64	@ 0x40
 80091ae:	f200 817f 	bhi.w	80094b0 <USBD_StdEPReq+0x324>
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d02a      	beq.n	800920c <USBD_StdEPReq+0x80>
 80091b6:	2b20      	cmp	r3, #32
 80091b8:	f040 817a 	bne.w	80094b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7ff fe85 	bl	8008ed0 <USBD_CoreFindEP>
 80091c6:	4603      	mov	r3, r0
 80091c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091ca:	7b7b      	ldrb	r3, [r7, #13]
 80091cc:	2bff      	cmp	r3, #255	@ 0xff
 80091ce:	f000 8174 	beq.w	80094ba <USBD_StdEPReq+0x32e>
 80091d2:	7b7b      	ldrb	r3, [r7, #13]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f040 8170 	bne.w	80094ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80091da:	7b7a      	ldrb	r2, [r7, #13]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80091e2:	7b7a      	ldrb	r2, [r7, #13]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	32ae      	adds	r2, #174	@ 0xae
 80091e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 8163 	beq.w	80094ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80091f4:	7b7a      	ldrb	r2, [r7, #13]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	32ae      	adds	r2, #174	@ 0xae
 80091fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	4798      	blx	r3
 8009206:	4603      	mov	r3, r0
 8009208:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800920a:	e156      	b.n	80094ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	785b      	ldrb	r3, [r3, #1]
 8009210:	2b03      	cmp	r3, #3
 8009212:	d008      	beq.n	8009226 <USBD_StdEPReq+0x9a>
 8009214:	2b03      	cmp	r3, #3
 8009216:	f300 8145 	bgt.w	80094a4 <USBD_StdEPReq+0x318>
 800921a:	2b00      	cmp	r3, #0
 800921c:	f000 809b 	beq.w	8009356 <USBD_StdEPReq+0x1ca>
 8009220:	2b01      	cmp	r3, #1
 8009222:	d03c      	beq.n	800929e <USBD_StdEPReq+0x112>
 8009224:	e13e      	b.n	80094a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b02      	cmp	r3, #2
 8009230:	d002      	beq.n	8009238 <USBD_StdEPReq+0xac>
 8009232:	2b03      	cmp	r3, #3
 8009234:	d016      	beq.n	8009264 <USBD_StdEPReq+0xd8>
 8009236:	e02c      	b.n	8009292 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00d      	beq.n	800925a <USBD_StdEPReq+0xce>
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	2b80      	cmp	r3, #128	@ 0x80
 8009242:	d00a      	beq.n	800925a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009244:	7bbb      	ldrb	r3, [r7, #14]
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 f985 	bl	800a558 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800924e:	2180      	movs	r1, #128	@ 0x80
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f001 f981 	bl	800a558 <USBD_LL_StallEP>
 8009256:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009258:	e020      	b.n	800929c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fc7a 	bl	8009b56 <USBD_CtlError>
              break;
 8009262:	e01b      	b.n	800929c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	885b      	ldrh	r3, [r3, #2]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10e      	bne.n	800928a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00b      	beq.n	800928a <USBD_StdEPReq+0xfe>
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	2b80      	cmp	r3, #128	@ 0x80
 8009276:	d008      	beq.n	800928a <USBD_StdEPReq+0xfe>
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	88db      	ldrh	r3, [r3, #6]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d104      	bne.n	800928a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009280:	7bbb      	ldrb	r3, [r7, #14]
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f001 f967 	bl	800a558 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fd3a 	bl	8009d04 <USBD_CtlSendStatus>

              break;
 8009290:	e004      	b.n	800929c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fc5e 	bl	8009b56 <USBD_CtlError>
              break;
 800929a:	bf00      	nop
          }
          break;
 800929c:	e107      	b.n	80094ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d002      	beq.n	80092b0 <USBD_StdEPReq+0x124>
 80092aa:	2b03      	cmp	r3, #3
 80092ac:	d016      	beq.n	80092dc <USBD_StdEPReq+0x150>
 80092ae:	e04b      	b.n	8009348 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092b0:	7bbb      	ldrb	r3, [r7, #14]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00d      	beq.n	80092d2 <USBD_StdEPReq+0x146>
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	2b80      	cmp	r3, #128	@ 0x80
 80092ba:	d00a      	beq.n	80092d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	4619      	mov	r1, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f001 f949 	bl	800a558 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092c6:	2180      	movs	r1, #128	@ 0x80
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 f945 	bl	800a558 <USBD_LL_StallEP>
 80092ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092d0:	e040      	b.n	8009354 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fc3e 	bl	8009b56 <USBD_CtlError>
              break;
 80092da:	e03b      	b.n	8009354 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	885b      	ldrh	r3, [r3, #2]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d136      	bne.n	8009352 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d004      	beq.n	80092f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 f94f 	bl	800a596 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fd03 	bl	8009d04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff fde4 	bl	8008ed0 <USBD_CoreFindEP>
 8009308:	4603      	mov	r3, r0
 800930a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800930c:	7b7b      	ldrb	r3, [r7, #13]
 800930e:	2bff      	cmp	r3, #255	@ 0xff
 8009310:	d01f      	beq.n	8009352 <USBD_StdEPReq+0x1c6>
 8009312:	7b7b      	ldrb	r3, [r7, #13]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d11c      	bne.n	8009352 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009318:	7b7a      	ldrb	r2, [r7, #13]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009320:	7b7a      	ldrb	r2, [r7, #13]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	32ae      	adds	r2, #174	@ 0xae
 8009326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d010      	beq.n	8009352 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009330:	7b7a      	ldrb	r2, [r7, #13]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	32ae      	adds	r2, #174	@ 0xae
 8009336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	4798      	blx	r3
 8009342:	4603      	mov	r3, r0
 8009344:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009346:	e004      	b.n	8009352 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fc03 	bl	8009b56 <USBD_CtlError>
              break;
 8009350:	e000      	b.n	8009354 <USBD_StdEPReq+0x1c8>
              break;
 8009352:	bf00      	nop
          }
          break;
 8009354:	e0ab      	b.n	80094ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b02      	cmp	r3, #2
 8009360:	d002      	beq.n	8009368 <USBD_StdEPReq+0x1dc>
 8009362:	2b03      	cmp	r3, #3
 8009364:	d032      	beq.n	80093cc <USBD_StdEPReq+0x240>
 8009366:	e097      	b.n	8009498 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009368:	7bbb      	ldrb	r3, [r7, #14]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d007      	beq.n	800937e <USBD_StdEPReq+0x1f2>
 800936e:	7bbb      	ldrb	r3, [r7, #14]
 8009370:	2b80      	cmp	r3, #128	@ 0x80
 8009372:	d004      	beq.n	800937e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fbed 	bl	8009b56 <USBD_CtlError>
                break;
 800937c:	e091      	b.n	80094a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800937e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009382:	2b00      	cmp	r3, #0
 8009384:	da0b      	bge.n	800939e <USBD_StdEPReq+0x212>
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800938c:	4613      	mov	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	3310      	adds	r3, #16
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	4413      	add	r3, r2
 800939a:	3304      	adds	r3, #4
 800939c:	e00b      	b.n	80093b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093a4:	4613      	mov	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	4413      	add	r3, r2
 80093b4:	3304      	adds	r3, #4
 80093b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	2200      	movs	r2, #0
 80093bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	2202      	movs	r2, #2
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fc43 	bl	8009c50 <USBD_CtlSendData>
              break;
 80093ca:	e06a      	b.n	80094a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80093cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	da11      	bge.n	80093f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80093d4:	7bbb      	ldrb	r3, [r7, #14]
 80093d6:	f003 020f 	and.w	r2, r3, #15
 80093da:	6879      	ldr	r1, [r7, #4]
 80093dc:	4613      	mov	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	440b      	add	r3, r1
 80093e6:	3324      	adds	r3, #36	@ 0x24
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d117      	bne.n	800941e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fbb0 	bl	8009b56 <USBD_CtlError>
                  break;
 80093f6:	e054      	b.n	80094a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	f003 020f 	and.w	r2, r3, #15
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	4613      	mov	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	440b      	add	r3, r1
 800940a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800940e:	881b      	ldrh	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d104      	bne.n	800941e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fb9d 	bl	8009b56 <USBD_CtlError>
                  break;
 800941c:	e041      	b.n	80094a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800941e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009422:	2b00      	cmp	r3, #0
 8009424:	da0b      	bge.n	800943e <USBD_StdEPReq+0x2b2>
 8009426:	7bbb      	ldrb	r3, [r7, #14]
 8009428:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	3310      	adds	r3, #16
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	4413      	add	r3, r2
 800943a:	3304      	adds	r3, #4
 800943c:	e00b      	b.n	8009456 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009444:	4613      	mov	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	4413      	add	r3, r2
 8009454:	3304      	adds	r3, #4
 8009456:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009458:	7bbb      	ldrb	r3, [r7, #14]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <USBD_StdEPReq+0x2d8>
 800945e:	7bbb      	ldrb	r3, [r7, #14]
 8009460:	2b80      	cmp	r3, #128	@ 0x80
 8009462:	d103      	bne.n	800946c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	e00e      	b.n	800948a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f001 f8af 	bl	800a5d4 <USBD_LL_IsStallEP>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d003      	beq.n	8009484 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	2201      	movs	r2, #1
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	e002      	b.n	800948a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2200      	movs	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2202      	movs	r2, #2
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fbdd 	bl	8009c50 <USBD_CtlSendData>
              break;
 8009496:	e004      	b.n	80094a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fb5b 	bl	8009b56 <USBD_CtlError>
              break;
 80094a0:	bf00      	nop
          }
          break;
 80094a2:	e004      	b.n	80094ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fb55 	bl	8009b56 <USBD_CtlError>
          break;
 80094ac:	bf00      	nop
      }
      break;
 80094ae:	e005      	b.n	80094bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fb4f 	bl	8009b56 <USBD_CtlError>
      break;
 80094b8:	e000      	b.n	80094bc <USBD_StdEPReq+0x330>
      break;
 80094ba:	bf00      	nop
  }

  return ret;
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094d2:	2300      	movs	r3, #0
 80094d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80094da:	2300      	movs	r3, #0
 80094dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	885b      	ldrh	r3, [r3, #2]
 80094e2:	0a1b      	lsrs	r3, r3, #8
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	3b01      	subs	r3, #1
 80094e8:	2b06      	cmp	r3, #6
 80094ea:	f200 8128 	bhi.w	800973e <USBD_GetDescriptor+0x276>
 80094ee:	a201      	add	r2, pc, #4	@ (adr r2, 80094f4 <USBD_GetDescriptor+0x2c>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	08009511 	.word	0x08009511
 80094f8:	08009529 	.word	0x08009529
 80094fc:	08009569 	.word	0x08009569
 8009500:	0800973f 	.word	0x0800973f
 8009504:	0800973f 	.word	0x0800973f
 8009508:	080096df 	.word	0x080096df
 800950c:	0800970b 	.word	0x0800970b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	7c12      	ldrb	r2, [r2, #16]
 800951c:	f107 0108 	add.w	r1, r7, #8
 8009520:	4610      	mov	r0, r2
 8009522:	4798      	blx	r3
 8009524:	60f8      	str	r0, [r7, #12]
      break;
 8009526:	e112      	b.n	800974e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	7c1b      	ldrb	r3, [r3, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10d      	bne.n	800954c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009538:	f107 0208 	add.w	r2, r7, #8
 800953c:	4610      	mov	r0, r2
 800953e:	4798      	blx	r3
 8009540:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3301      	adds	r3, #1
 8009546:	2202      	movs	r2, #2
 8009548:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800954a:	e100      	b.n	800974e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009554:	f107 0208 	add.w	r2, r7, #8
 8009558:	4610      	mov	r0, r2
 800955a:	4798      	blx	r3
 800955c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	3301      	adds	r3, #1
 8009562:	2202      	movs	r2, #2
 8009564:	701a      	strb	r2, [r3, #0]
      break;
 8009566:	e0f2      	b.n	800974e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	885b      	ldrh	r3, [r3, #2]
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b05      	cmp	r3, #5
 8009570:	f200 80ac 	bhi.w	80096cc <USBD_GetDescriptor+0x204>
 8009574:	a201      	add	r2, pc, #4	@ (adr r2, 800957c <USBD_GetDescriptor+0xb4>)
 8009576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957a:	bf00      	nop
 800957c:	08009595 	.word	0x08009595
 8009580:	080095c9 	.word	0x080095c9
 8009584:	080095fd 	.word	0x080095fd
 8009588:	08009631 	.word	0x08009631
 800958c:	08009665 	.word	0x08009665
 8009590:	08009699 	.word	0x08009699
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00b      	beq.n	80095b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	7c12      	ldrb	r2, [r2, #16]
 80095ac:	f107 0108 	add.w	r1, r7, #8
 80095b0:	4610      	mov	r0, r2
 80095b2:	4798      	blx	r3
 80095b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095b6:	e091      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 facb 	bl	8009b56 <USBD_CtlError>
            err++;
 80095c0:	7afb      	ldrb	r3, [r7, #11]
 80095c2:	3301      	adds	r3, #1
 80095c4:	72fb      	strb	r3, [r7, #11]
          break;
 80095c6:	e089      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00b      	beq.n	80095ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	7c12      	ldrb	r2, [r2, #16]
 80095e0:	f107 0108 	add.w	r1, r7, #8
 80095e4:	4610      	mov	r0, r2
 80095e6:	4798      	blx	r3
 80095e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095ea:	e077      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fab1 	bl	8009b56 <USBD_CtlError>
            err++;
 80095f4:	7afb      	ldrb	r3, [r7, #11]
 80095f6:	3301      	adds	r3, #1
 80095f8:	72fb      	strb	r3, [r7, #11]
          break;
 80095fa:	e06f      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00b      	beq.n	8009620 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	7c12      	ldrb	r2, [r2, #16]
 8009614:	f107 0108 	add.w	r1, r7, #8
 8009618:	4610      	mov	r0, r2
 800961a:	4798      	blx	r3
 800961c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800961e:	e05d      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fa97 	bl	8009b56 <USBD_CtlError>
            err++;
 8009628:	7afb      	ldrb	r3, [r7, #11]
 800962a:	3301      	adds	r3, #1
 800962c:	72fb      	strb	r3, [r7, #11]
          break;
 800962e:	e055      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00b      	beq.n	8009654 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	7c12      	ldrb	r2, [r2, #16]
 8009648:	f107 0108 	add.w	r1, r7, #8
 800964c:	4610      	mov	r0, r2
 800964e:	4798      	blx	r3
 8009650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009652:	e043      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fa7d 	bl	8009b56 <USBD_CtlError>
            err++;
 800965c:	7afb      	ldrb	r3, [r7, #11]
 800965e:	3301      	adds	r3, #1
 8009660:	72fb      	strb	r3, [r7, #11]
          break;
 8009662:	e03b      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00b      	beq.n	8009688 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	7c12      	ldrb	r2, [r2, #16]
 800967c:	f107 0108 	add.w	r1, r7, #8
 8009680:	4610      	mov	r0, r2
 8009682:	4798      	blx	r3
 8009684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009686:	e029      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fa63 	bl	8009b56 <USBD_CtlError>
            err++;
 8009690:	7afb      	ldrb	r3, [r7, #11]
 8009692:	3301      	adds	r3, #1
 8009694:	72fb      	strb	r3, [r7, #11]
          break;
 8009696:	e021      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00b      	beq.n	80096bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	7c12      	ldrb	r2, [r2, #16]
 80096b0:	f107 0108 	add.w	r1, r7, #8
 80096b4:	4610      	mov	r0, r2
 80096b6:	4798      	blx	r3
 80096b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ba:	e00f      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fa49 	bl	8009b56 <USBD_CtlError>
            err++;
 80096c4:	7afb      	ldrb	r3, [r7, #11]
 80096c6:	3301      	adds	r3, #1
 80096c8:	72fb      	strb	r3, [r7, #11]
          break;
 80096ca:	e007      	b.n	80096dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fa41 	bl	8009b56 <USBD_CtlError>
          err++;
 80096d4:	7afb      	ldrb	r3, [r7, #11]
 80096d6:	3301      	adds	r3, #1
 80096d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80096da:	bf00      	nop
      }
      break;
 80096dc:	e037      	b.n	800974e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	7c1b      	ldrb	r3, [r3, #16]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d109      	bne.n	80096fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096ee:	f107 0208 	add.w	r2, r7, #8
 80096f2:	4610      	mov	r0, r2
 80096f4:	4798      	blx	r3
 80096f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096f8:	e029      	b.n	800974e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fa2a 	bl	8009b56 <USBD_CtlError>
        err++;
 8009702:	7afb      	ldrb	r3, [r7, #11]
 8009704:	3301      	adds	r3, #1
 8009706:	72fb      	strb	r3, [r7, #11]
      break;
 8009708:	e021      	b.n	800974e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	7c1b      	ldrb	r3, [r3, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10d      	bne.n	800972e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800971a:	f107 0208 	add.w	r2, r7, #8
 800971e:	4610      	mov	r0, r2
 8009720:	4798      	blx	r3
 8009722:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3301      	adds	r3, #1
 8009728:	2207      	movs	r2, #7
 800972a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800972c:	e00f      	b.n	800974e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fa10 	bl	8009b56 <USBD_CtlError>
        err++;
 8009736:	7afb      	ldrb	r3, [r7, #11]
 8009738:	3301      	adds	r3, #1
 800973a:	72fb      	strb	r3, [r7, #11]
      break;
 800973c:	e007      	b.n	800974e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 fa08 	bl	8009b56 <USBD_CtlError>
      err++;
 8009746:	7afb      	ldrb	r3, [r7, #11]
 8009748:	3301      	adds	r3, #1
 800974a:	72fb      	strb	r3, [r7, #11]
      break;
 800974c:	bf00      	nop
  }

  if (err != 0U)
 800974e:	7afb      	ldrb	r3, [r7, #11]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d11e      	bne.n	8009792 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	88db      	ldrh	r3, [r3, #6]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d016      	beq.n	800978a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800975c:	893b      	ldrh	r3, [r7, #8]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00e      	beq.n	8009780 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	88da      	ldrh	r2, [r3, #6]
 8009766:	893b      	ldrh	r3, [r7, #8]
 8009768:	4293      	cmp	r3, r2
 800976a:	bf28      	it	cs
 800976c:	4613      	movcs	r3, r2
 800976e:	b29b      	uxth	r3, r3
 8009770:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009772:	893b      	ldrh	r3, [r7, #8]
 8009774:	461a      	mov	r2, r3
 8009776:	68f9      	ldr	r1, [r7, #12]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fa69 	bl	8009c50 <USBD_CtlSendData>
 800977e:	e009      	b.n	8009794 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009780:	6839      	ldr	r1, [r7, #0]
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f9e7 	bl	8009b56 <USBD_CtlError>
 8009788:	e004      	b.n	8009794 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 faba 	bl	8009d04 <USBD_CtlSendStatus>
 8009790:	e000      	b.n	8009794 <USBD_GetDescriptor+0x2cc>
    return;
 8009792:	bf00      	nop
  }
}
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop

0800979c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	889b      	ldrh	r3, [r3, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d131      	bne.n	8009812 <USBD_SetAddress+0x76>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	88db      	ldrh	r3, [r3, #6]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d12d      	bne.n	8009812 <USBD_SetAddress+0x76>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	885b      	ldrh	r3, [r3, #2]
 80097ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80097bc:	d829      	bhi.n	8009812 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	885b      	ldrh	r3, [r3, #2]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d104      	bne.n	80097e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f9bc 	bl	8009b56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097de:	e01d      	b.n	800981c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	7bfa      	ldrb	r2, [r7, #15]
 80097e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 ff1d 	bl	800a62c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fa86 	bl	8009d04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d004      	beq.n	8009808 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2202      	movs	r2, #2
 8009802:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009806:	e009      	b.n	800981c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009810:	e004      	b.n	800981c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f99e 	bl	8009b56 <USBD_CtlError>
  }
}
 800981a:	bf00      	nop
 800981c:	bf00      	nop
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	885b      	ldrh	r3, [r3, #2]
 8009836:	b2da      	uxtb	r2, r3
 8009838:	4b4e      	ldr	r3, [pc, #312]	@ (8009974 <USBD_SetConfig+0x150>)
 800983a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800983c:	4b4d      	ldr	r3, [pc, #308]	@ (8009974 <USBD_SetConfig+0x150>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d905      	bls.n	8009850 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f985 	bl	8009b56 <USBD_CtlError>
    return USBD_FAIL;
 800984c:	2303      	movs	r3, #3
 800984e:	e08c      	b.n	800996a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2b02      	cmp	r3, #2
 800985a:	d002      	beq.n	8009862 <USBD_SetConfig+0x3e>
 800985c:	2b03      	cmp	r3, #3
 800985e:	d029      	beq.n	80098b4 <USBD_SetConfig+0x90>
 8009860:	e075      	b.n	800994e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009862:	4b44      	ldr	r3, [pc, #272]	@ (8009974 <USBD_SetConfig+0x150>)
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d020      	beq.n	80098ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800986a:	4b42      	ldr	r3, [pc, #264]	@ (8009974 <USBD_SetConfig+0x150>)
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	461a      	mov	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009874:	4b3f      	ldr	r3, [pc, #252]	@ (8009974 <USBD_SetConfig+0x150>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	4619      	mov	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7fe ffe3 	bl	8008846 <USBD_SetClassConfig>
 8009880:	4603      	mov	r3, r0
 8009882:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009884:	7bfb      	ldrb	r3, [r7, #15]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d008      	beq.n	800989c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f962 	bl	8009b56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2202      	movs	r2, #2
 8009896:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800989a:	e065      	b.n	8009968 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fa31 	bl	8009d04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2203      	movs	r2, #3
 80098a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80098aa:	e05d      	b.n	8009968 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fa29 	bl	8009d04 <USBD_CtlSendStatus>
      break;
 80098b2:	e059      	b.n	8009968 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80098b4:	4b2f      	ldr	r3, [pc, #188]	@ (8009974 <USBD_SetConfig+0x150>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d112      	bne.n	80098e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2202      	movs	r2, #2
 80098c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80098c4:	4b2b      	ldr	r3, [pc, #172]	@ (8009974 <USBD_SetConfig+0x150>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098ce:	4b29      	ldr	r3, [pc, #164]	@ (8009974 <USBD_SetConfig+0x150>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fe ffd2 	bl	800887e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa12 	bl	8009d04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098e0:	e042      	b.n	8009968 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80098e2:	4b24      	ldr	r3, [pc, #144]	@ (8009974 <USBD_SetConfig+0x150>)
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	461a      	mov	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d02a      	beq.n	8009946 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7fe ffc0 	bl	800887e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80098fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009974 <USBD_SetConfig+0x150>)
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009908:	4b1a      	ldr	r3, [pc, #104]	@ (8009974 <USBD_SetConfig+0x150>)
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7fe ff99 	bl	8008846 <USBD_SetClassConfig>
 8009914:	4603      	mov	r3, r0
 8009916:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00f      	beq.n	800993e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f918 	bl	8009b56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7fe ffa5 	bl	800887e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2202      	movs	r2, #2
 8009938:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800993c:	e014      	b.n	8009968 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f9e0 	bl	8009d04 <USBD_CtlSendStatus>
      break;
 8009944:	e010      	b.n	8009968 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f9dc 	bl	8009d04 <USBD_CtlSendStatus>
      break;
 800994c:	e00c      	b.n	8009968 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f900 	bl	8009b56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009956:	4b07      	ldr	r3, [pc, #28]	@ (8009974 <USBD_SetConfig+0x150>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f7fe ff8e 	bl	800887e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009962:	2303      	movs	r3, #3
 8009964:	73fb      	strb	r3, [r7, #15]
      break;
 8009966:	bf00      	nop
  }

  return ret;
 8009968:	7bfb      	ldrb	r3, [r7, #15]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	20000c1c 	.word	0x20000c1c

08009978 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	88db      	ldrh	r3, [r3, #6]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d004      	beq.n	8009994 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f8e2 	bl	8009b56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009992:	e023      	b.n	80099dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b02      	cmp	r3, #2
 800999e:	dc02      	bgt.n	80099a6 <USBD_GetConfig+0x2e>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	dc03      	bgt.n	80099ac <USBD_GetConfig+0x34>
 80099a4:	e015      	b.n	80099d2 <USBD_GetConfig+0x5a>
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d00b      	beq.n	80099c2 <USBD_GetConfig+0x4a>
 80099aa:	e012      	b.n	80099d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	3308      	adds	r3, #8
 80099b6:	2201      	movs	r2, #1
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f948 	bl	8009c50 <USBD_CtlSendData>
        break;
 80099c0:	e00c      	b.n	80099dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3304      	adds	r3, #4
 80099c6:	2201      	movs	r2, #1
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f940 	bl	8009c50 <USBD_CtlSendData>
        break;
 80099d0:	e004      	b.n	80099dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f8be 	bl	8009b56 <USBD_CtlError>
        break;
 80099da:	bf00      	nop
}
 80099dc:	bf00      	nop
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	3b01      	subs	r3, #1
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d81e      	bhi.n	8009a3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	88db      	ldrh	r3, [r3, #6]
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d004      	beq.n	8009a0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f8a5 	bl	8009b56 <USBD_CtlError>
        break;
 8009a0c:	e01a      	b.n	8009a44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d005      	beq.n	8009a2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f043 0202 	orr.w	r2, r3, #2
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	330c      	adds	r3, #12
 8009a2e:	2202      	movs	r2, #2
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f90c 	bl	8009c50 <USBD_CtlSendData>
      break;
 8009a38:	e004      	b.n	8009a44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f88a 	bl	8009b56 <USBD_CtlError>
      break;
 8009a42:	bf00      	nop
  }
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	885b      	ldrh	r3, [r3, #2]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d107      	bne.n	8009a6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f94c 	bl	8009d04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009a6c:	e013      	b.n	8009a96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	885b      	ldrh	r3, [r3, #2]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d10b      	bne.n	8009a8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	889b      	ldrh	r3, [r3, #4]
 8009a7a:	0a1b      	lsrs	r3, r3, #8
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f93c 	bl	8009d04 <USBD_CtlSendStatus>
}
 8009a8c:	e003      	b.n	8009a96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f860 	bl	8009b56 <USBD_CtlError>
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d80b      	bhi.n	8009ace <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	885b      	ldrh	r3, [r3, #2]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d10c      	bne.n	8009ad8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f91c 	bl	8009d04 <USBD_CtlSendStatus>
      }
      break;
 8009acc:	e004      	b.n	8009ad8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f840 	bl	8009b56 <USBD_CtlError>
      break;
 8009ad6:	e000      	b.n	8009ada <USBD_ClrFeature+0x3c>
      break;
 8009ad8:	bf00      	nop
  }
}
 8009ada:	bf00      	nop
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	781a      	ldrb	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	3301      	adds	r3, #1
 8009afc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	781a      	ldrb	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f7ff fa40 	bl	8008f92 <SWAPBYTE>
 8009b12:	4603      	mov	r3, r0
 8009b14:	461a      	mov	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7ff fa33 	bl	8008f92 <SWAPBYTE>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	461a      	mov	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3301      	adds	r3, #1
 8009b38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7ff fa26 	bl	8008f92 <SWAPBYTE>
 8009b46:	4603      	mov	r3, r0
 8009b48:	461a      	mov	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	80da      	strh	r2, [r3, #6]
}
 8009b4e:	bf00      	nop
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b082      	sub	sp, #8
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b60:	2180      	movs	r1, #128	@ 0x80
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fcf8 	bl	800a558 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b68:	2100      	movs	r1, #0
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fcf4 	bl	800a558 <USBD_LL_StallEP>
}
 8009b70:	bf00      	nop
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d042      	beq.n	8009c14 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009b92:	6938      	ldr	r0, [r7, #16]
 8009b94:	f000 f842 	bl	8009c1c <USBD_GetLen>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	005b      	lsls	r3, r3, #1
 8009b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ba2:	d808      	bhi.n	8009bb6 <USBD_GetString+0x3e>
 8009ba4:	6938      	ldr	r0, [r7, #16]
 8009ba6:	f000 f839 	bl	8009c1c <USBD_GetLen>
 8009baa:	4603      	mov	r3, r0
 8009bac:	3301      	adds	r3, #1
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	005b      	lsls	r3, r3, #1
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	e001      	b.n	8009bba <USBD_GetString+0x42>
 8009bb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	7812      	ldrb	r2, [r2, #0]
 8009bc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bca:	7dfb      	ldrb	r3, [r7, #23]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	2203      	movs	r2, #3
 8009bd8:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009be0:	e013      	b.n	8009c0a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	4413      	add	r3, r2
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	7812      	ldrb	r2, [r2, #0]
 8009bec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	613b      	str	r3, [r7, #16]
    idx++;
 8009bf4:	7dfb      	ldrb	r3, [r7, #23]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009bfa:	7dfb      	ldrb	r3, [r7, #23]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	4413      	add	r3, r2
 8009c00:	2200      	movs	r2, #0
 8009c02:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c04:	7dfb      	ldrb	r3, [r7, #23]
 8009c06:	3301      	adds	r3, #1
 8009c08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1e7      	bne.n	8009be2 <USBD_GetString+0x6a>
 8009c12:	e000      	b.n	8009c16 <USBD_GetString+0x9e>
    return;
 8009c14:	bf00      	nop
  }
}
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c2c:	e005      	b.n	8009c3a <USBD_GetLen+0x1e>
  {
    len++;
 8009c2e:	7bfb      	ldrb	r3, [r7, #15]
 8009c30:	3301      	adds	r3, #1
 8009c32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	3301      	adds	r3, #1
 8009c38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1f5      	bne.n	8009c2e <USBD_GetLen+0x12>
  }

  return len;
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2202      	movs	r2, #2
 8009c60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	2100      	movs	r1, #0
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f000 fcf7 	bl	800a66a <USBD_LL_Transmit>

  return USBD_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b084      	sub	sp, #16
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	60f8      	str	r0, [r7, #12]
 8009c8e:	60b9      	str	r1, [r7, #8]
 8009c90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	2100      	movs	r1, #0
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 fce6 	bl	800a66a <USBD_LL_Transmit>

  return USBD_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2203      	movs	r2, #3
 8009cb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f000 fcea 	bl	800a6ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	60f8      	str	r0, [r7, #12]
 8009cea:	60b9      	str	r1, [r7, #8]
 8009cec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f000 fcd9 	bl	800a6ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2204      	movs	r2, #4
 8009d10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d14:	2300      	movs	r3, #0
 8009d16:	2200      	movs	r2, #0
 8009d18:	2100      	movs	r1, #0
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fca5 	bl	800a66a <USBD_LL_Transmit>

  return USBD_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b082      	sub	sp, #8
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2205      	movs	r2, #5
 8009d36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2100      	movs	r1, #0
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fcb3 	bl	800a6ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d54:	2200      	movs	r2, #0
 8009d56:	4912      	ldr	r1, [pc, #72]	@ (8009da0 <MX_USB_DEVICE_Init+0x50>)
 8009d58:	4812      	ldr	r0, [pc, #72]	@ (8009da4 <MX_USB_DEVICE_Init+0x54>)
 8009d5a:	f7fe fcf7 	bl	800874c <USBD_Init>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d64:	f7f8 ffa6 	bl	8002cb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d68:	490f      	ldr	r1, [pc, #60]	@ (8009da8 <MX_USB_DEVICE_Init+0x58>)
 8009d6a:	480e      	ldr	r0, [pc, #56]	@ (8009da4 <MX_USB_DEVICE_Init+0x54>)
 8009d6c:	f7fe fd1e 	bl	80087ac <USBD_RegisterClass>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d76:	f7f8 ff9d 	bl	8002cb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d7a:	490c      	ldr	r1, [pc, #48]	@ (8009dac <MX_USB_DEVICE_Init+0x5c>)
 8009d7c:	4809      	ldr	r0, [pc, #36]	@ (8009da4 <MX_USB_DEVICE_Init+0x54>)
 8009d7e:	f7fe fc15 	bl	80085ac <USBD_CDC_RegisterInterface>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d88:	f7f8 ff94 	bl	8002cb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d8c:	4805      	ldr	r0, [pc, #20]	@ (8009da4 <MX_USB_DEVICE_Init+0x54>)
 8009d8e:	f7fe fd43 	bl	8008818 <USBD_Start>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d001      	beq.n	8009d9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d98:	f7f8 ff8c 	bl	8002cb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d9c:	bf00      	nop
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	200000b8 	.word	0x200000b8
 8009da4:	20000c20 	.word	0x20000c20
 8009da8:	20000024 	.word	0x20000024
 8009dac:	200000a4 	.word	0x200000a4

08009db0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009db4:	2200      	movs	r2, #0
 8009db6:	4905      	ldr	r1, [pc, #20]	@ (8009dcc <CDC_Init_FS+0x1c>)
 8009db8:	4805      	ldr	r0, [pc, #20]	@ (8009dd0 <CDC_Init_FS+0x20>)
 8009dba:	f7fe fc11 	bl	80085e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009dbe:	4905      	ldr	r1, [pc, #20]	@ (8009dd4 <CDC_Init_FS+0x24>)
 8009dc0:	4803      	ldr	r0, [pc, #12]	@ (8009dd0 <CDC_Init_FS+0x20>)
 8009dc2:	f7fe fc2f 	bl	8008624 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009dc6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	200016fc 	.word	0x200016fc
 8009dd0:	20000c20 	.word	0x20000c20
 8009dd4:	20000efc 	.word	0x20000efc

08009dd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ddc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	4603      	mov	r3, r0
 8009df0:	6039      	str	r1, [r7, #0]
 8009df2:	71fb      	strb	r3, [r7, #7]
 8009df4:	4613      	mov	r3, r2
 8009df6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	2b23      	cmp	r3, #35	@ 0x23
 8009dfc:	d84a      	bhi.n	8009e94 <CDC_Control_FS+0xac>
 8009dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8009e04 <CDC_Control_FS+0x1c>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009e95 	.word	0x08009e95
 8009e08:	08009e95 	.word	0x08009e95
 8009e0c:	08009e95 	.word	0x08009e95
 8009e10:	08009e95 	.word	0x08009e95
 8009e14:	08009e95 	.word	0x08009e95
 8009e18:	08009e95 	.word	0x08009e95
 8009e1c:	08009e95 	.word	0x08009e95
 8009e20:	08009e95 	.word	0x08009e95
 8009e24:	08009e95 	.word	0x08009e95
 8009e28:	08009e95 	.word	0x08009e95
 8009e2c:	08009e95 	.word	0x08009e95
 8009e30:	08009e95 	.word	0x08009e95
 8009e34:	08009e95 	.word	0x08009e95
 8009e38:	08009e95 	.word	0x08009e95
 8009e3c:	08009e95 	.word	0x08009e95
 8009e40:	08009e95 	.word	0x08009e95
 8009e44:	08009e95 	.word	0x08009e95
 8009e48:	08009e95 	.word	0x08009e95
 8009e4c:	08009e95 	.word	0x08009e95
 8009e50:	08009e95 	.word	0x08009e95
 8009e54:	08009e95 	.word	0x08009e95
 8009e58:	08009e95 	.word	0x08009e95
 8009e5c:	08009e95 	.word	0x08009e95
 8009e60:	08009e95 	.word	0x08009e95
 8009e64:	08009e95 	.word	0x08009e95
 8009e68:	08009e95 	.word	0x08009e95
 8009e6c:	08009e95 	.word	0x08009e95
 8009e70:	08009e95 	.word	0x08009e95
 8009e74:	08009e95 	.word	0x08009e95
 8009e78:	08009e95 	.word	0x08009e95
 8009e7c:	08009e95 	.word	0x08009e95
 8009e80:	08009e95 	.word	0x08009e95
 8009e84:	08009e95 	.word	0x08009e95
 8009e88:	08009e95 	.word	0x08009e95
 8009e8c:	08009e95 	.word	0x08009e95
 8009e90:	08009e95 	.word	0x08009e95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e94:	bf00      	nop
  }

  return (USBD_OK);
 8009e96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009eae:	6879      	ldr	r1, [r7, #4]
 8009eb0:	480f      	ldr	r0, [pc, #60]	@ (8009ef0 <CDC_Receive_FS+0x4c>)
 8009eb2:	f7fe fbb7 	bl	8008624 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009eb6:	480e      	ldr	r0, [pc, #56]	@ (8009ef0 <CDC_Receive_FS+0x4c>)
 8009eb8:	f7fe fc12 	bl	80086e0 <USBD_CDC_ReceivePacket>

	memset(USB_RX_Buffer, '\0', 512);  // clear the buffer
 8009ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	480c      	ldr	r0, [pc, #48]	@ (8009ef4 <CDC_Receive_FS+0x50>)
 8009ec4:	f001 fcb7 	bl	800b836 <memset>
	uint8_t len = (uint8_t) *Len;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	73fb      	strb	r3, [r7, #15]
	memcpy(USB_RX_Buffer, Buf, len);  // copy the data to the buffer
 8009ece:	7bfb      	ldrb	r3, [r7, #15]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	4807      	ldr	r0, [pc, #28]	@ (8009ef4 <CDC_Receive_FS+0x50>)
 8009ed6:	f001 fd4c 	bl	800b972 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8009eda:	7bfb      	ldrb	r3, [r7, #15]
 8009edc:	461a      	mov	r2, r3
 8009ede:	2100      	movs	r1, #0
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f001 fca8 	bl	800b836 <memset>

  return (USBD_OK);
 8009ee6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	20000c20 	.word	0x20000c20
 8009ef4:	20000814 	.word	0x20000814

08009ef8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	460b      	mov	r3, r1
 8009f02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009f04:	2300      	movs	r3, #0
 8009f06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009f08:	4b0d      	ldr	r3, [pc, #52]	@ (8009f40 <CDC_Transmit_FS+0x48>)
 8009f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e00b      	b.n	8009f36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009f1e:	887b      	ldrh	r3, [r7, #2]
 8009f20:	461a      	mov	r2, r3
 8009f22:	6879      	ldr	r1, [r7, #4]
 8009f24:	4806      	ldr	r0, [pc, #24]	@ (8009f40 <CDC_Transmit_FS+0x48>)
 8009f26:	f7fe fb5b 	bl	80085e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009f2a:	4805      	ldr	r0, [pc, #20]	@ (8009f40 <CDC_Transmit_FS+0x48>)
 8009f2c:	f7fe fb98 	bl	8008660 <USBD_CDC_TransmitPacket>
 8009f30:	4603      	mov	r3, r0
 8009f32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	20000c20 	.word	0x20000c20

08009f44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009f52:	2300      	movs	r3, #0
 8009f54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	371c      	adds	r7, #28
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
	...

08009f68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	6039      	str	r1, [r7, #0]
 8009f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2212      	movs	r2, #18
 8009f78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f7a:	4b03      	ldr	r3, [pc, #12]	@ (8009f88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr
 8009f88:	200000d4 	.word	0x200000d4

08009f8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	4603      	mov	r3, r0
 8009f94:	6039      	str	r1, [r7, #0]
 8009f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	2204      	movs	r2, #4
 8009f9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f9e:	4b03      	ldr	r3, [pc, #12]	@ (8009fac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	200000e8 	.word	0x200000e8

08009fb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	6039      	str	r1, [r7, #0]
 8009fba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fbc:	79fb      	ldrb	r3, [r7, #7]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d105      	bne.n	8009fce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	4907      	ldr	r1, [pc, #28]	@ (8009fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009fc6:	4808      	ldr	r0, [pc, #32]	@ (8009fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009fc8:	f7ff fdd6 	bl	8009b78 <USBD_GetString>
 8009fcc:	e004      	b.n	8009fd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	4904      	ldr	r1, [pc, #16]	@ (8009fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009fd2:	4805      	ldr	r0, [pc, #20]	@ (8009fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009fd4:	f7ff fdd0 	bl	8009b78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fd8:	4b02      	ldr	r3, [pc, #8]	@ (8009fe4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20001efc 	.word	0x20001efc
 8009fe8:	0800d8c0 	.word	0x0800d8c0

08009fec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	6039      	str	r1, [r7, #0]
 8009ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	4904      	ldr	r1, [pc, #16]	@ (800a00c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ffc:	4804      	ldr	r0, [pc, #16]	@ (800a010 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ffe:	f7ff fdbb 	bl	8009b78 <USBD_GetString>
  return USBD_StrDesc;
 800a002:	4b02      	ldr	r3, [pc, #8]	@ (800a00c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a004:	4618      	mov	r0, r3
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	20001efc 	.word	0x20001efc
 800a010:	0800d8d8 	.word	0x0800d8d8

0800a014 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	6039      	str	r1, [r7, #0]
 800a01e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	221a      	movs	r2, #26
 800a024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a026:	f000 f843 	bl	800a0b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a02a:	4b02      	ldr	r3, [pc, #8]	@ (800a034 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	200000ec 	.word	0x200000ec

0800a038 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	4603      	mov	r3, r0
 800a040:	6039      	str	r1, [r7, #0]
 800a042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a044:	79fb      	ldrb	r3, [r7, #7]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d105      	bne.n	800a056 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	4907      	ldr	r1, [pc, #28]	@ (800a06c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a04e:	4808      	ldr	r0, [pc, #32]	@ (800a070 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a050:	f7ff fd92 	bl	8009b78 <USBD_GetString>
 800a054:	e004      	b.n	800a060 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	4904      	ldr	r1, [pc, #16]	@ (800a06c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a05a:	4805      	ldr	r0, [pc, #20]	@ (800a070 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a05c:	f7ff fd8c 	bl	8009b78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a060:	4b02      	ldr	r3, [pc, #8]	@ (800a06c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a062:	4618      	mov	r0, r3
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20001efc 	.word	0x20001efc
 800a070:	0800d8ec 	.word	0x0800d8ec

0800a074 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	4603      	mov	r3, r0
 800a07c:	6039      	str	r1, [r7, #0]
 800a07e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a080:	79fb      	ldrb	r3, [r7, #7]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d105      	bne.n	800a092 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	4907      	ldr	r1, [pc, #28]	@ (800a0a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a08a:	4808      	ldr	r0, [pc, #32]	@ (800a0ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a08c:	f7ff fd74 	bl	8009b78 <USBD_GetString>
 800a090:	e004      	b.n	800a09c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	4904      	ldr	r1, [pc, #16]	@ (800a0a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a096:	4805      	ldr	r0, [pc, #20]	@ (800a0ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a098:	f7ff fd6e 	bl	8009b78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a09c:	4b02      	ldr	r3, [pc, #8]	@ (800a0a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	20001efc 	.word	0x20001efc
 800a0ac:	0800d8f8 	.word	0x0800d8f8

0800a0b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a0f4 <Get_SerialNum+0x44>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a0bc:	4b0e      	ldr	r3, [pc, #56]	@ (800a0f8 <Get_SerialNum+0x48>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a0fc <Get_SerialNum+0x4c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d009      	beq.n	800a0ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a0d6:	2208      	movs	r2, #8
 800a0d8:	4909      	ldr	r1, [pc, #36]	@ (800a100 <Get_SerialNum+0x50>)
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f000 f814 	bl	800a108 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a0e0:	2204      	movs	r2, #4
 800a0e2:	4908      	ldr	r1, [pc, #32]	@ (800a104 <Get_SerialNum+0x54>)
 800a0e4:	68b8      	ldr	r0, [r7, #8]
 800a0e6:	f000 f80f 	bl	800a108 <IntToUnicode>
  }
}
 800a0ea:	bf00      	nop
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	1fff7a10 	.word	0x1fff7a10
 800a0f8:	1fff7a14 	.word	0x1fff7a14
 800a0fc:	1fff7a18 	.word	0x1fff7a18
 800a100:	200000ee 	.word	0x200000ee
 800a104:	200000fe 	.word	0x200000fe

0800a108 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a108:	b480      	push	{r7}
 800a10a:	b087      	sub	sp, #28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	4613      	mov	r3, r2
 800a114:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a116:	2300      	movs	r3, #0
 800a118:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a11a:	2300      	movs	r3, #0
 800a11c:	75fb      	strb	r3, [r7, #23]
 800a11e:	e027      	b.n	800a170 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	0f1b      	lsrs	r3, r3, #28
 800a124:	2b09      	cmp	r3, #9
 800a126:	d80b      	bhi.n	800a140 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	0f1b      	lsrs	r3, r3, #28
 800a12c:	b2da      	uxtb	r2, r3
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
 800a130:	005b      	lsls	r3, r3, #1
 800a132:	4619      	mov	r1, r3
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	440b      	add	r3, r1
 800a138:	3230      	adds	r2, #48	@ 0x30
 800a13a:	b2d2      	uxtb	r2, r2
 800a13c:	701a      	strb	r2, [r3, #0]
 800a13e:	e00a      	b.n	800a156 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	0f1b      	lsrs	r3, r3, #28
 800a144:	b2da      	uxtb	r2, r3
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	005b      	lsls	r3, r3, #1
 800a14a:	4619      	mov	r1, r3
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	440b      	add	r3, r1
 800a150:	3237      	adds	r2, #55	@ 0x37
 800a152:	b2d2      	uxtb	r2, r2
 800a154:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	011b      	lsls	r3, r3, #4
 800a15a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	3301      	adds	r3, #1
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	4413      	add	r3, r2
 800a166:	2200      	movs	r2, #0
 800a168:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
 800a16c:	3301      	adds	r3, #1
 800a16e:	75fb      	strb	r3, [r7, #23]
 800a170:	7dfa      	ldrb	r2, [r7, #23]
 800a172:	79fb      	ldrb	r3, [r7, #7]
 800a174:	429a      	cmp	r2, r3
 800a176:	d3d3      	bcc.n	800a120 <IntToUnicode+0x18>
  }
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	371c      	adds	r7, #28
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr
	...

0800a188 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b08a      	sub	sp, #40	@ 0x28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a190:	f107 0314 	add.w	r3, r7, #20
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	605a      	str	r2, [r3, #4]
 800a19a:	609a      	str	r2, [r3, #8]
 800a19c:	60da      	str	r2, [r3, #12]
 800a19e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1a8:	d13a      	bne.n	800a220 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	613b      	str	r3, [r7, #16]
 800a1ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a228 <HAL_PCD_MspInit+0xa0>)
 800a1b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1b2:	4a1d      	ldr	r2, [pc, #116]	@ (800a228 <HAL_PCD_MspInit+0xa0>)
 800a1b4:	f043 0301 	orr.w	r3, r3, #1
 800a1b8:	6313      	str	r3, [r2, #48]	@ 0x30
 800a1ba:	4b1b      	ldr	r3, [pc, #108]	@ (800a228 <HAL_PCD_MspInit+0xa0>)
 800a1bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	613b      	str	r3, [r7, #16]
 800a1c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a1c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a1ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a1d8:	230a      	movs	r3, #10
 800a1da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1dc:	f107 0314 	add.w	r3, r7, #20
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	4812      	ldr	r0, [pc, #72]	@ (800a22c <HAL_PCD_MspInit+0xa4>)
 800a1e4:	f7f9 f97c 	bl	80034e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a1e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a228 <HAL_PCD_MspInit+0xa0>)
 800a1ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1ec:	4a0e      	ldr	r2, [pc, #56]	@ (800a228 <HAL_PCD_MspInit+0xa0>)
 800a1ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1f2:	6353      	str	r3, [r2, #52]	@ 0x34
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	60fb      	str	r3, [r7, #12]
 800a1f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a228 <HAL_PCD_MspInit+0xa0>)
 800a1fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1fc:	4a0a      	ldr	r2, [pc, #40]	@ (800a228 <HAL_PCD_MspInit+0xa0>)
 800a1fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a202:	6453      	str	r3, [r2, #68]	@ 0x44
 800a204:	4b08      	ldr	r3, [pc, #32]	@ (800a228 <HAL_PCD_MspInit+0xa0>)
 800a206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a20c:	60fb      	str	r3, [r7, #12]
 800a20e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a210:	2200      	movs	r2, #0
 800a212:	2100      	movs	r1, #0
 800a214:	2043      	movs	r0, #67	@ 0x43
 800a216:	f7f9 f89a 	bl	800334e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a21a:	2043      	movs	r0, #67	@ 0x43
 800a21c:	f7f9 f8b3 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a220:	bf00      	nop
 800a222:	3728      	adds	r7, #40	@ 0x28
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	40023800 	.word	0x40023800
 800a22c:	40020000 	.word	0x40020000

0800a230 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a244:	4619      	mov	r1, r3
 800a246:	4610      	mov	r0, r2
 800a248:	f7fe fb33 	bl	80088b2 <USBD_LL_SetupStage>
}
 800a24c:	bf00      	nop
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a266:	78fa      	ldrb	r2, [r7, #3]
 800a268:	6879      	ldr	r1, [r7, #4]
 800a26a:	4613      	mov	r3, r2
 800a26c:	00db      	lsls	r3, r3, #3
 800a26e:	4413      	add	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	440b      	add	r3, r1
 800a274:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	78fb      	ldrb	r3, [r7, #3]
 800a27c:	4619      	mov	r1, r3
 800a27e:	f7fe fb6d 	bl	800895c <USBD_LL_DataOutStage>
}
 800a282:	bf00      	nop
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	460b      	mov	r3, r1
 800a294:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a29c:	78fa      	ldrb	r2, [r7, #3]
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	00db      	lsls	r3, r3, #3
 800a2a4:	4413      	add	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	440b      	add	r3, r1
 800a2aa:	3320      	adds	r3, #32
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	78fb      	ldrb	r3, [r7, #3]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	f7fe fc06 	bl	8008ac2 <USBD_LL_DataInStage>
}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fe fd40 	bl	8008d52 <USBD_LL_SOF>
}
 800a2d2:	bf00      	nop
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b084      	sub	sp, #16
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	79db      	ldrb	r3, [r3, #7]
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d001      	beq.n	800a2f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a2ee:	f7f8 fce1 	bl	8002cb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a2f8:	7bfa      	ldrb	r2, [r7, #15]
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe fce4 	bl	8008cca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fe fc8c 	bl	8008c26 <USBD_LL_Reset>
}
 800a30e:	bf00      	nop
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a326:	4618      	mov	r0, r3
 800a328:	f7fe fcdf 	bl	8008cea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	6812      	ldr	r2, [r2, #0]
 800a33a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a33e:	f043 0301 	orr.w	r3, r3, #1
 800a342:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	7adb      	ldrb	r3, [r3, #11]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d005      	beq.n	800a358 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a34c:	4b04      	ldr	r3, [pc, #16]	@ (800a360 <HAL_PCD_SuspendCallback+0x48>)
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	4a03      	ldr	r2, [pc, #12]	@ (800a360 <HAL_PCD_SuspendCallback+0x48>)
 800a352:	f043 0306 	orr.w	r3, r3, #6
 800a356:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a358:	bf00      	nop
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	e000ed00 	.word	0xe000ed00

0800a364 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a372:	4618      	mov	r0, r3
 800a374:	f7fe fcd5 	bl	8008d22 <USBD_LL_Resume>
}
 800a378:	bf00      	nop
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a392:	78fa      	ldrb	r2, [r7, #3]
 800a394:	4611      	mov	r1, r2
 800a396:	4618      	mov	r0, r3
 800a398:	f7fe fd2d 	bl	8008df6 <USBD_LL_IsoOUTIncomplete>
}
 800a39c:	bf00      	nop
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3b6:	78fa      	ldrb	r2, [r7, #3]
 800a3b8:	4611      	mov	r1, r2
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fe fce9 	bl	8008d92 <USBD_LL_IsoINIncomplete>
}
 800a3c0:	bf00      	nop
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fe fd3f 	bl	8008e5a <USBD_LL_DevConnected>
}
 800a3dc:	bf00      	nop
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fd3c 	bl	8008e70 <USBD_LL_DevDisconnected>
}
 800a3f8:	bf00      	nop
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d13c      	bne.n	800a48a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a410:	4a20      	ldr	r2, [pc, #128]	@ (800a494 <USBD_LL_Init+0x94>)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a1e      	ldr	r2, [pc, #120]	@ (800a494 <USBD_LL_Init+0x94>)
 800a41c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a420:	4b1c      	ldr	r3, [pc, #112]	@ (800a494 <USBD_LL_Init+0x94>)
 800a422:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a426:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a428:	4b1a      	ldr	r3, [pc, #104]	@ (800a494 <USBD_LL_Init+0x94>)
 800a42a:	2204      	movs	r2, #4
 800a42c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a42e:	4b19      	ldr	r3, [pc, #100]	@ (800a494 <USBD_LL_Init+0x94>)
 800a430:	2202      	movs	r2, #2
 800a432:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a434:	4b17      	ldr	r3, [pc, #92]	@ (800a494 <USBD_LL_Init+0x94>)
 800a436:	2200      	movs	r2, #0
 800a438:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a43a:	4b16      	ldr	r3, [pc, #88]	@ (800a494 <USBD_LL_Init+0x94>)
 800a43c:	2202      	movs	r2, #2
 800a43e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a440:	4b14      	ldr	r3, [pc, #80]	@ (800a494 <USBD_LL_Init+0x94>)
 800a442:	2200      	movs	r2, #0
 800a444:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a446:	4b13      	ldr	r3, [pc, #76]	@ (800a494 <USBD_LL_Init+0x94>)
 800a448:	2200      	movs	r2, #0
 800a44a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a44c:	4b11      	ldr	r3, [pc, #68]	@ (800a494 <USBD_LL_Init+0x94>)
 800a44e:	2200      	movs	r2, #0
 800a450:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a452:	4b10      	ldr	r3, [pc, #64]	@ (800a494 <USBD_LL_Init+0x94>)
 800a454:	2200      	movs	r2, #0
 800a456:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a458:	4b0e      	ldr	r3, [pc, #56]	@ (800a494 <USBD_LL_Init+0x94>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a45e:	480d      	ldr	r0, [pc, #52]	@ (800a494 <USBD_LL_Init+0x94>)
 800a460:	f7f9 f9c2 	bl	80037e8 <HAL_PCD_Init>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d001      	beq.n	800a46e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a46a:	f7f8 fc23 	bl	8002cb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a46e:	2180      	movs	r1, #128	@ 0x80
 800a470:	4808      	ldr	r0, [pc, #32]	@ (800a494 <USBD_LL_Init+0x94>)
 800a472:	f7fa fbee 	bl	8004c52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a476:	2240      	movs	r2, #64	@ 0x40
 800a478:	2100      	movs	r1, #0
 800a47a:	4806      	ldr	r0, [pc, #24]	@ (800a494 <USBD_LL_Init+0x94>)
 800a47c:	f7fa fba2 	bl	8004bc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a480:	2280      	movs	r2, #128	@ 0x80
 800a482:	2101      	movs	r1, #1
 800a484:	4803      	ldr	r0, [pc, #12]	@ (800a494 <USBD_LL_Init+0x94>)
 800a486:	f7fa fb9d 	bl	8004bc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	200020fc 	.word	0x200020fc

0800a498 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7f9 faa9 	bl	8003a06 <HAL_PCD_Start>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 f942 	bl	800a744 <USBD_Get_USB_Status>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	4608      	mov	r0, r1
 800a4d8:	4611      	mov	r1, r2
 800a4da:	461a      	mov	r2, r3
 800a4dc:	4603      	mov	r3, r0
 800a4de:	70fb      	strb	r3, [r7, #3]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	70bb      	strb	r3, [r7, #2]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a4f6:	78bb      	ldrb	r3, [r7, #2]
 800a4f8:	883a      	ldrh	r2, [r7, #0]
 800a4fa:	78f9      	ldrb	r1, [r7, #3]
 800a4fc:	f7f9 ff7d 	bl	80043fa <HAL_PCD_EP_Open>
 800a500:	4603      	mov	r3, r0
 800a502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	4618      	mov	r0, r3
 800a508:	f000 f91c 	bl	800a744 <USBD_Get_USB_Status>
 800a50c:	4603      	mov	r3, r0
 800a50e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a510:	7bbb      	ldrb	r3, [r7, #14]
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b084      	sub	sp, #16
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	460b      	mov	r3, r1
 800a524:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a52a:	2300      	movs	r3, #0
 800a52c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a534:	78fa      	ldrb	r2, [r7, #3]
 800a536:	4611      	mov	r1, r2
 800a538:	4618      	mov	r0, r3
 800a53a:	f7f9 ffc8 	bl	80044ce <HAL_PCD_EP_Close>
 800a53e:	4603      	mov	r3, r0
 800a540:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a542:	7bfb      	ldrb	r3, [r7, #15]
 800a544:	4618      	mov	r0, r3
 800a546:	f000 f8fd 	bl	800a744 <USBD_Get_USB_Status>
 800a54a:	4603      	mov	r3, r0
 800a54c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a54e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a572:	78fa      	ldrb	r2, [r7, #3]
 800a574:	4611      	mov	r1, r2
 800a576:	4618      	mov	r0, r3
 800a578:	f7fa f880 	bl	800467c <HAL_PCD_EP_SetStall>
 800a57c:	4603      	mov	r3, r0
 800a57e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a580:	7bfb      	ldrb	r3, [r7, #15]
 800a582:	4618      	mov	r0, r3
 800a584:	f000 f8de 	bl	800a744 <USBD_Get_USB_Status>
 800a588:	4603      	mov	r3, r0
 800a58a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a58c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	460b      	mov	r3, r1
 800a5a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5b0:	78fa      	ldrb	r2, [r7, #3]
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fa f8c4 	bl	8004742 <HAL_PCD_EP_ClrStall>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 f8bf 	bl	800a744 <USBD_Get_USB_Status>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a5e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	da0b      	bge.n	800a608 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a5f0:	78fb      	ldrb	r3, [r7, #3]
 800a5f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5f6:	68f9      	ldr	r1, [r7, #12]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	00db      	lsls	r3, r3, #3
 800a5fc:	4413      	add	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	440b      	add	r3, r1
 800a602:	3316      	adds	r3, #22
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	e00b      	b.n	800a620 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a60e:	68f9      	ldr	r1, [r7, #12]
 800a610:	4613      	mov	r3, r2
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	4413      	add	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	440b      	add	r3, r1
 800a61a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a61e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a620:	4618      	mov	r0, r3
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	460b      	mov	r3, r1
 800a636:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a646:	78fa      	ldrb	r2, [r7, #3]
 800a648:	4611      	mov	r1, r2
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7f9 feb1 	bl	80043b2 <HAL_PCD_SetAddress>
 800a650:	4603      	mov	r3, r0
 800a652:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a654:	7bfb      	ldrb	r3, [r7, #15]
 800a656:	4618      	mov	r0, r3
 800a658:	f000 f874 	bl	800a744 <USBD_Get_USB_Status>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a660:	7bbb      	ldrb	r3, [r7, #14]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b086      	sub	sp, #24
 800a66e:	af00      	add	r7, sp, #0
 800a670:	60f8      	str	r0, [r7, #12]
 800a672:	607a      	str	r2, [r7, #4]
 800a674:	603b      	str	r3, [r7, #0]
 800a676:	460b      	mov	r3, r1
 800a678:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a688:	7af9      	ldrb	r1, [r7, #11]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	f7f9 ffbb 	bl	8004608 <HAL_PCD_EP_Transmit>
 800a692:	4603      	mov	r3, r0
 800a694:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a696:	7dfb      	ldrb	r3, [r7, #23]
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 f853 	bl	800a744 <USBD_Get_USB_Status>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3718      	adds	r7, #24
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	607a      	str	r2, [r7, #4]
 800a6b6:	603b      	str	r3, [r7, #0]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a6ca:	7af9      	ldrb	r1, [r7, #11]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	f7f9 ff47 	bl	8004562 <HAL_PCD_EP_Receive>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 f832 	bl	800a744 <USBD_Get_USB_Status>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b082      	sub	sp, #8
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a700:	78fa      	ldrb	r2, [r7, #3]
 800a702:	4611      	mov	r1, r2
 800a704:	4618      	mov	r0, r3
 800a706:	f7f9 ff67 	bl	80045d8 <HAL_PCD_EP_GetRxCount>
 800a70a:	4603      	mov	r3, r0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a71c:	4b03      	ldr	r3, [pc, #12]	@ (800a72c <USBD_static_malloc+0x18>)
}
 800a71e:	4618      	mov	r0, r3
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	200025e0 	.word	0x200025e0

0800a730 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]

}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	4603      	mov	r3, r0
 800a74c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a752:	79fb      	ldrb	r3, [r7, #7]
 800a754:	2b03      	cmp	r3, #3
 800a756:	d817      	bhi.n	800a788 <USBD_Get_USB_Status+0x44>
 800a758:	a201      	add	r2, pc, #4	@ (adr r2, 800a760 <USBD_Get_USB_Status+0x1c>)
 800a75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75e:	bf00      	nop
 800a760:	0800a771 	.word	0x0800a771
 800a764:	0800a777 	.word	0x0800a777
 800a768:	0800a77d 	.word	0x0800a77d
 800a76c:	0800a783 	.word	0x0800a783
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	73fb      	strb	r3, [r7, #15]
    break;
 800a774:	e00b      	b.n	800a78e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a776:	2303      	movs	r3, #3
 800a778:	73fb      	strb	r3, [r7, #15]
    break;
 800a77a:	e008      	b.n	800a78e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a77c:	2301      	movs	r3, #1
 800a77e:	73fb      	strb	r3, [r7, #15]
    break;
 800a780:	e005      	b.n	800a78e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a782:	2303      	movs	r3, #3
 800a784:	73fb      	strb	r3, [r7, #15]
    break;
 800a786:	e002      	b.n	800a78e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a788:	2303      	movs	r3, #3
 800a78a:	73fb      	strb	r3, [r7, #15]
    break;
 800a78c:	bf00      	nop
  }
  return usb_status;
 800a78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <malloc>:
 800a79c:	4b02      	ldr	r3, [pc, #8]	@ (800a7a8 <malloc+0xc>)
 800a79e:	4601      	mov	r1, r0
 800a7a0:	6818      	ldr	r0, [r3, #0]
 800a7a2:	f000 b82d 	b.w	800a800 <_malloc_r>
 800a7a6:	bf00      	nop
 800a7a8:	20000280 	.word	0x20000280

0800a7ac <free>:
 800a7ac:	4b02      	ldr	r3, [pc, #8]	@ (800a7b8 <free+0xc>)
 800a7ae:	4601      	mov	r1, r0
 800a7b0:	6818      	ldr	r0, [r3, #0]
 800a7b2:	f001 b8f5 	b.w	800b9a0 <_free_r>
 800a7b6:	bf00      	nop
 800a7b8:	20000280 	.word	0x20000280

0800a7bc <sbrk_aligned>:
 800a7bc:	b570      	push	{r4, r5, r6, lr}
 800a7be:	4e0f      	ldr	r6, [pc, #60]	@ (800a7fc <sbrk_aligned+0x40>)
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	6831      	ldr	r1, [r6, #0]
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	b911      	cbnz	r1, 800a7ce <sbrk_aligned+0x12>
 800a7c8:	f001 f884 	bl	800b8d4 <_sbrk_r>
 800a7cc:	6030      	str	r0, [r6, #0]
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	f001 f87f 	bl	800b8d4 <_sbrk_r>
 800a7d6:	1c43      	adds	r3, r0, #1
 800a7d8:	d103      	bne.n	800a7e2 <sbrk_aligned+0x26>
 800a7da:	f04f 34ff 	mov.w	r4, #4294967295
 800a7de:	4620      	mov	r0, r4
 800a7e0:	bd70      	pop	{r4, r5, r6, pc}
 800a7e2:	1cc4      	adds	r4, r0, #3
 800a7e4:	f024 0403 	bic.w	r4, r4, #3
 800a7e8:	42a0      	cmp	r0, r4
 800a7ea:	d0f8      	beq.n	800a7de <sbrk_aligned+0x22>
 800a7ec:	1a21      	subs	r1, r4, r0
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f001 f870 	bl	800b8d4 <_sbrk_r>
 800a7f4:	3001      	adds	r0, #1
 800a7f6:	d1f2      	bne.n	800a7de <sbrk_aligned+0x22>
 800a7f8:	e7ef      	b.n	800a7da <sbrk_aligned+0x1e>
 800a7fa:	bf00      	nop
 800a7fc:	20002800 	.word	0x20002800

0800a800 <_malloc_r>:
 800a800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a804:	1ccd      	adds	r5, r1, #3
 800a806:	f025 0503 	bic.w	r5, r5, #3
 800a80a:	3508      	adds	r5, #8
 800a80c:	2d0c      	cmp	r5, #12
 800a80e:	bf38      	it	cc
 800a810:	250c      	movcc	r5, #12
 800a812:	2d00      	cmp	r5, #0
 800a814:	4606      	mov	r6, r0
 800a816:	db01      	blt.n	800a81c <_malloc_r+0x1c>
 800a818:	42a9      	cmp	r1, r5
 800a81a:	d904      	bls.n	800a826 <_malloc_r+0x26>
 800a81c:	230c      	movs	r3, #12
 800a81e:	6033      	str	r3, [r6, #0]
 800a820:	2000      	movs	r0, #0
 800a822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8fc <_malloc_r+0xfc>
 800a82a:	f000 f869 	bl	800a900 <__malloc_lock>
 800a82e:	f8d8 3000 	ldr.w	r3, [r8]
 800a832:	461c      	mov	r4, r3
 800a834:	bb44      	cbnz	r4, 800a888 <_malloc_r+0x88>
 800a836:	4629      	mov	r1, r5
 800a838:	4630      	mov	r0, r6
 800a83a:	f7ff ffbf 	bl	800a7bc <sbrk_aligned>
 800a83e:	1c43      	adds	r3, r0, #1
 800a840:	4604      	mov	r4, r0
 800a842:	d158      	bne.n	800a8f6 <_malloc_r+0xf6>
 800a844:	f8d8 4000 	ldr.w	r4, [r8]
 800a848:	4627      	mov	r7, r4
 800a84a:	2f00      	cmp	r7, #0
 800a84c:	d143      	bne.n	800a8d6 <_malloc_r+0xd6>
 800a84e:	2c00      	cmp	r4, #0
 800a850:	d04b      	beq.n	800a8ea <_malloc_r+0xea>
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	4639      	mov	r1, r7
 800a856:	4630      	mov	r0, r6
 800a858:	eb04 0903 	add.w	r9, r4, r3
 800a85c:	f001 f83a 	bl	800b8d4 <_sbrk_r>
 800a860:	4581      	cmp	r9, r0
 800a862:	d142      	bne.n	800a8ea <_malloc_r+0xea>
 800a864:	6821      	ldr	r1, [r4, #0]
 800a866:	1a6d      	subs	r5, r5, r1
 800a868:	4629      	mov	r1, r5
 800a86a:	4630      	mov	r0, r6
 800a86c:	f7ff ffa6 	bl	800a7bc <sbrk_aligned>
 800a870:	3001      	adds	r0, #1
 800a872:	d03a      	beq.n	800a8ea <_malloc_r+0xea>
 800a874:	6823      	ldr	r3, [r4, #0]
 800a876:	442b      	add	r3, r5
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	f8d8 3000 	ldr.w	r3, [r8]
 800a87e:	685a      	ldr	r2, [r3, #4]
 800a880:	bb62      	cbnz	r2, 800a8dc <_malloc_r+0xdc>
 800a882:	f8c8 7000 	str.w	r7, [r8]
 800a886:	e00f      	b.n	800a8a8 <_malloc_r+0xa8>
 800a888:	6822      	ldr	r2, [r4, #0]
 800a88a:	1b52      	subs	r2, r2, r5
 800a88c:	d420      	bmi.n	800a8d0 <_malloc_r+0xd0>
 800a88e:	2a0b      	cmp	r2, #11
 800a890:	d917      	bls.n	800a8c2 <_malloc_r+0xc2>
 800a892:	1961      	adds	r1, r4, r5
 800a894:	42a3      	cmp	r3, r4
 800a896:	6025      	str	r5, [r4, #0]
 800a898:	bf18      	it	ne
 800a89a:	6059      	strne	r1, [r3, #4]
 800a89c:	6863      	ldr	r3, [r4, #4]
 800a89e:	bf08      	it	eq
 800a8a0:	f8c8 1000 	streq.w	r1, [r8]
 800a8a4:	5162      	str	r2, [r4, r5]
 800a8a6:	604b      	str	r3, [r1, #4]
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	f000 f82f 	bl	800a90c <__malloc_unlock>
 800a8ae:	f104 000b 	add.w	r0, r4, #11
 800a8b2:	1d23      	adds	r3, r4, #4
 800a8b4:	f020 0007 	bic.w	r0, r0, #7
 800a8b8:	1ac2      	subs	r2, r0, r3
 800a8ba:	bf1c      	itt	ne
 800a8bc:	1a1b      	subne	r3, r3, r0
 800a8be:	50a3      	strne	r3, [r4, r2]
 800a8c0:	e7af      	b.n	800a822 <_malloc_r+0x22>
 800a8c2:	6862      	ldr	r2, [r4, #4]
 800a8c4:	42a3      	cmp	r3, r4
 800a8c6:	bf0c      	ite	eq
 800a8c8:	f8c8 2000 	streq.w	r2, [r8]
 800a8cc:	605a      	strne	r2, [r3, #4]
 800a8ce:	e7eb      	b.n	800a8a8 <_malloc_r+0xa8>
 800a8d0:	4623      	mov	r3, r4
 800a8d2:	6864      	ldr	r4, [r4, #4]
 800a8d4:	e7ae      	b.n	800a834 <_malloc_r+0x34>
 800a8d6:	463c      	mov	r4, r7
 800a8d8:	687f      	ldr	r7, [r7, #4]
 800a8da:	e7b6      	b.n	800a84a <_malloc_r+0x4a>
 800a8dc:	461a      	mov	r2, r3
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	42a3      	cmp	r3, r4
 800a8e2:	d1fb      	bne.n	800a8dc <_malloc_r+0xdc>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	6053      	str	r3, [r2, #4]
 800a8e8:	e7de      	b.n	800a8a8 <_malloc_r+0xa8>
 800a8ea:	230c      	movs	r3, #12
 800a8ec:	6033      	str	r3, [r6, #0]
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f000 f80c 	bl	800a90c <__malloc_unlock>
 800a8f4:	e794      	b.n	800a820 <_malloc_r+0x20>
 800a8f6:	6005      	str	r5, [r0, #0]
 800a8f8:	e7d6      	b.n	800a8a8 <_malloc_r+0xa8>
 800a8fa:	bf00      	nop
 800a8fc:	20002804 	.word	0x20002804

0800a900 <__malloc_lock>:
 800a900:	4801      	ldr	r0, [pc, #4]	@ (800a908 <__malloc_lock+0x8>)
 800a902:	f001 b834 	b.w	800b96e <__retarget_lock_acquire_recursive>
 800a906:	bf00      	nop
 800a908:	20002948 	.word	0x20002948

0800a90c <__malloc_unlock>:
 800a90c:	4801      	ldr	r0, [pc, #4]	@ (800a914 <__malloc_unlock+0x8>)
 800a90e:	f001 b82f 	b.w	800b970 <__retarget_lock_release_recursive>
 800a912:	bf00      	nop
 800a914:	20002948 	.word	0x20002948

0800a918 <realloc>:
 800a918:	4b02      	ldr	r3, [pc, #8]	@ (800a924 <realloc+0xc>)
 800a91a:	460a      	mov	r2, r1
 800a91c:	4601      	mov	r1, r0
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	f000 b802 	b.w	800a928 <_realloc_r>
 800a924:	20000280 	.word	0x20000280

0800a928 <_realloc_r>:
 800a928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a92c:	4680      	mov	r8, r0
 800a92e:	4615      	mov	r5, r2
 800a930:	460c      	mov	r4, r1
 800a932:	b921      	cbnz	r1, 800a93e <_realloc_r+0x16>
 800a934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a938:	4611      	mov	r1, r2
 800a93a:	f7ff bf61 	b.w	800a800 <_malloc_r>
 800a93e:	b92a      	cbnz	r2, 800a94c <_realloc_r+0x24>
 800a940:	f001 f82e 	bl	800b9a0 <_free_r>
 800a944:	2400      	movs	r4, #0
 800a946:	4620      	mov	r0, r4
 800a948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a94c:	f002 f870 	bl	800ca30 <_malloc_usable_size_r>
 800a950:	4285      	cmp	r5, r0
 800a952:	4606      	mov	r6, r0
 800a954:	d802      	bhi.n	800a95c <_realloc_r+0x34>
 800a956:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a95a:	d8f4      	bhi.n	800a946 <_realloc_r+0x1e>
 800a95c:	4629      	mov	r1, r5
 800a95e:	4640      	mov	r0, r8
 800a960:	f7ff ff4e 	bl	800a800 <_malloc_r>
 800a964:	4607      	mov	r7, r0
 800a966:	2800      	cmp	r0, #0
 800a968:	d0ec      	beq.n	800a944 <_realloc_r+0x1c>
 800a96a:	42b5      	cmp	r5, r6
 800a96c:	462a      	mov	r2, r5
 800a96e:	4621      	mov	r1, r4
 800a970:	bf28      	it	cs
 800a972:	4632      	movcs	r2, r6
 800a974:	f000 fffd 	bl	800b972 <memcpy>
 800a978:	4621      	mov	r1, r4
 800a97a:	4640      	mov	r0, r8
 800a97c:	f001 f810 	bl	800b9a0 <_free_r>
 800a980:	463c      	mov	r4, r7
 800a982:	e7e0      	b.n	800a946 <_realloc_r+0x1e>

0800a984 <sulp>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	4604      	mov	r4, r0
 800a988:	460d      	mov	r5, r1
 800a98a:	ec45 4b10 	vmov	d0, r4, r5
 800a98e:	4616      	mov	r6, r2
 800a990:	f001 ff10 	bl	800c7b4 <__ulp>
 800a994:	ec51 0b10 	vmov	r0, r1, d0
 800a998:	b17e      	cbz	r6, 800a9ba <sulp+0x36>
 800a99a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a99e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	dd09      	ble.n	800a9ba <sulp+0x36>
 800a9a6:	051b      	lsls	r3, r3, #20
 800a9a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a9ac:	2400      	movs	r4, #0
 800a9ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	462b      	mov	r3, r5
 800a9b6:	f7f5 fe37 	bl	8000628 <__aeabi_dmul>
 800a9ba:	ec41 0b10 	vmov	d0, r0, r1
 800a9be:	bd70      	pop	{r4, r5, r6, pc}

0800a9c0 <_strtod_l>:
 800a9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c4:	b09f      	sub	sp, #124	@ 0x7c
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	921a      	str	r2, [sp, #104]	@ 0x68
 800a9ce:	9005      	str	r0, [sp, #20]
 800a9d0:	f04f 0a00 	mov.w	sl, #0
 800a9d4:	f04f 0b00 	mov.w	fp, #0
 800a9d8:	460a      	mov	r2, r1
 800a9da:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9dc:	7811      	ldrb	r1, [r2, #0]
 800a9de:	292b      	cmp	r1, #43	@ 0x2b
 800a9e0:	d04a      	beq.n	800aa78 <_strtod_l+0xb8>
 800a9e2:	d838      	bhi.n	800aa56 <_strtod_l+0x96>
 800a9e4:	290d      	cmp	r1, #13
 800a9e6:	d832      	bhi.n	800aa4e <_strtod_l+0x8e>
 800a9e8:	2908      	cmp	r1, #8
 800a9ea:	d832      	bhi.n	800aa52 <_strtod_l+0x92>
 800a9ec:	2900      	cmp	r1, #0
 800a9ee:	d03b      	beq.n	800aa68 <_strtod_l+0xa8>
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a9f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a9f6:	782a      	ldrb	r2, [r5, #0]
 800a9f8:	2a30      	cmp	r2, #48	@ 0x30
 800a9fa:	f040 80b3 	bne.w	800ab64 <_strtod_l+0x1a4>
 800a9fe:	786a      	ldrb	r2, [r5, #1]
 800aa00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aa04:	2a58      	cmp	r2, #88	@ 0x58
 800aa06:	d16e      	bne.n	800aae6 <_strtod_l+0x126>
 800aa08:	9302      	str	r3, [sp, #8]
 800aa0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa0c:	9301      	str	r3, [sp, #4]
 800aa0e:	ab1a      	add	r3, sp, #104	@ 0x68
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	4a8e      	ldr	r2, [pc, #568]	@ (800ac4c <_strtod_l+0x28c>)
 800aa14:	9805      	ldr	r0, [sp, #20]
 800aa16:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aa18:	a919      	add	r1, sp, #100	@ 0x64
 800aa1a:	f001 f873 	bl	800bb04 <__gethex>
 800aa1e:	f010 060f 	ands.w	r6, r0, #15
 800aa22:	4604      	mov	r4, r0
 800aa24:	d005      	beq.n	800aa32 <_strtod_l+0x72>
 800aa26:	2e06      	cmp	r6, #6
 800aa28:	d128      	bne.n	800aa7c <_strtod_l+0xbc>
 800aa2a:	3501      	adds	r5, #1
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	9519      	str	r5, [sp, #100]	@ 0x64
 800aa30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f040 858e 	bne.w	800b556 <_strtod_l+0xb96>
 800aa3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa3c:	b1cb      	cbz	r3, 800aa72 <_strtod_l+0xb2>
 800aa3e:	4652      	mov	r2, sl
 800aa40:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aa44:	ec43 2b10 	vmov	d0, r2, r3
 800aa48:	b01f      	add	sp, #124	@ 0x7c
 800aa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa4e:	2920      	cmp	r1, #32
 800aa50:	d1ce      	bne.n	800a9f0 <_strtod_l+0x30>
 800aa52:	3201      	adds	r2, #1
 800aa54:	e7c1      	b.n	800a9da <_strtod_l+0x1a>
 800aa56:	292d      	cmp	r1, #45	@ 0x2d
 800aa58:	d1ca      	bne.n	800a9f0 <_strtod_l+0x30>
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa5e:	1c51      	adds	r1, r2, #1
 800aa60:	9119      	str	r1, [sp, #100]	@ 0x64
 800aa62:	7852      	ldrb	r2, [r2, #1]
 800aa64:	2a00      	cmp	r2, #0
 800aa66:	d1c5      	bne.n	800a9f4 <_strtod_l+0x34>
 800aa68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa6a:	9419      	str	r4, [sp, #100]	@ 0x64
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f040 8570 	bne.w	800b552 <_strtod_l+0xb92>
 800aa72:	4652      	mov	r2, sl
 800aa74:	465b      	mov	r3, fp
 800aa76:	e7e5      	b.n	800aa44 <_strtod_l+0x84>
 800aa78:	2100      	movs	r1, #0
 800aa7a:	e7ef      	b.n	800aa5c <_strtod_l+0x9c>
 800aa7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa7e:	b13a      	cbz	r2, 800aa90 <_strtod_l+0xd0>
 800aa80:	2135      	movs	r1, #53	@ 0x35
 800aa82:	a81c      	add	r0, sp, #112	@ 0x70
 800aa84:	f001 ff90 	bl	800c9a8 <__copybits>
 800aa88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa8a:	9805      	ldr	r0, [sp, #20]
 800aa8c:	f001 fb5e 	bl	800c14c <_Bfree>
 800aa90:	3e01      	subs	r6, #1
 800aa92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aa94:	2e04      	cmp	r6, #4
 800aa96:	d806      	bhi.n	800aaa6 <_strtod_l+0xe6>
 800aa98:	e8df f006 	tbb	[pc, r6]
 800aa9c:	201d0314 	.word	0x201d0314
 800aaa0:	14          	.byte	0x14
 800aaa1:	00          	.byte	0x00
 800aaa2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aaa6:	05e1      	lsls	r1, r4, #23
 800aaa8:	bf48      	it	mi
 800aaaa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aaae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aab2:	0d1b      	lsrs	r3, r3, #20
 800aab4:	051b      	lsls	r3, r3, #20
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1bb      	bne.n	800aa32 <_strtod_l+0x72>
 800aaba:	f000 ff2d 	bl	800b918 <__errno>
 800aabe:	2322      	movs	r3, #34	@ 0x22
 800aac0:	6003      	str	r3, [r0, #0]
 800aac2:	e7b6      	b.n	800aa32 <_strtod_l+0x72>
 800aac4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aac8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aacc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aad0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aad4:	e7e7      	b.n	800aaa6 <_strtod_l+0xe6>
 800aad6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ac54 <_strtod_l+0x294>
 800aada:	e7e4      	b.n	800aaa6 <_strtod_l+0xe6>
 800aadc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aae0:	f04f 3aff 	mov.w	sl, #4294967295
 800aae4:	e7df      	b.n	800aaa6 <_strtod_l+0xe6>
 800aae6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	9219      	str	r2, [sp, #100]	@ 0x64
 800aaec:	785b      	ldrb	r3, [r3, #1]
 800aaee:	2b30      	cmp	r3, #48	@ 0x30
 800aaf0:	d0f9      	beq.n	800aae6 <_strtod_l+0x126>
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d09d      	beq.n	800aa32 <_strtod_l+0x72>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800aafa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aafc:	930c      	str	r3, [sp, #48]	@ 0x30
 800aafe:	2300      	movs	r3, #0
 800ab00:	9308      	str	r3, [sp, #32]
 800ab02:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab04:	461f      	mov	r7, r3
 800ab06:	220a      	movs	r2, #10
 800ab08:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ab0a:	7805      	ldrb	r5, [r0, #0]
 800ab0c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ab10:	b2d9      	uxtb	r1, r3
 800ab12:	2909      	cmp	r1, #9
 800ab14:	d928      	bls.n	800ab68 <_strtod_l+0x1a8>
 800ab16:	494e      	ldr	r1, [pc, #312]	@ (800ac50 <_strtod_l+0x290>)
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f000 fe94 	bl	800b846 <strncmp>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d032      	beq.n	800ab88 <_strtod_l+0x1c8>
 800ab22:	2000      	movs	r0, #0
 800ab24:	462a      	mov	r2, r5
 800ab26:	4681      	mov	r9, r0
 800ab28:	463d      	mov	r5, r7
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2a65      	cmp	r2, #101	@ 0x65
 800ab2e:	d001      	beq.n	800ab34 <_strtod_l+0x174>
 800ab30:	2a45      	cmp	r2, #69	@ 0x45
 800ab32:	d114      	bne.n	800ab5e <_strtod_l+0x19e>
 800ab34:	b91d      	cbnz	r5, 800ab3e <_strtod_l+0x17e>
 800ab36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab38:	4302      	orrs	r2, r0
 800ab3a:	d095      	beq.n	800aa68 <_strtod_l+0xa8>
 800ab3c:	2500      	movs	r5, #0
 800ab3e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ab40:	1c62      	adds	r2, r4, #1
 800ab42:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab44:	7862      	ldrb	r2, [r4, #1]
 800ab46:	2a2b      	cmp	r2, #43	@ 0x2b
 800ab48:	d077      	beq.n	800ac3a <_strtod_l+0x27a>
 800ab4a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ab4c:	d07b      	beq.n	800ac46 <_strtod_l+0x286>
 800ab4e:	f04f 0c00 	mov.w	ip, #0
 800ab52:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ab56:	2909      	cmp	r1, #9
 800ab58:	f240 8082 	bls.w	800ac60 <_strtod_l+0x2a0>
 800ab5c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab5e:	f04f 0800 	mov.w	r8, #0
 800ab62:	e0a2      	b.n	800acaa <_strtod_l+0x2ea>
 800ab64:	2300      	movs	r3, #0
 800ab66:	e7c7      	b.n	800aaf8 <_strtod_l+0x138>
 800ab68:	2f08      	cmp	r7, #8
 800ab6a:	bfd5      	itete	le
 800ab6c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ab6e:	9908      	ldrgt	r1, [sp, #32]
 800ab70:	fb02 3301 	mlale	r3, r2, r1, r3
 800ab74:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ab78:	f100 0001 	add.w	r0, r0, #1
 800ab7c:	bfd4      	ite	le
 800ab7e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ab80:	9308      	strgt	r3, [sp, #32]
 800ab82:	3701      	adds	r7, #1
 800ab84:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab86:	e7bf      	b.n	800ab08 <_strtod_l+0x148>
 800ab88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab8a:	1c5a      	adds	r2, r3, #1
 800ab8c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab8e:	785a      	ldrb	r2, [r3, #1]
 800ab90:	b37f      	cbz	r7, 800abf2 <_strtod_l+0x232>
 800ab92:	4681      	mov	r9, r0
 800ab94:	463d      	mov	r5, r7
 800ab96:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ab9a:	2b09      	cmp	r3, #9
 800ab9c:	d912      	bls.n	800abc4 <_strtod_l+0x204>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e7c4      	b.n	800ab2c <_strtod_l+0x16c>
 800aba2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aba4:	1c5a      	adds	r2, r3, #1
 800aba6:	9219      	str	r2, [sp, #100]	@ 0x64
 800aba8:	785a      	ldrb	r2, [r3, #1]
 800abaa:	3001      	adds	r0, #1
 800abac:	2a30      	cmp	r2, #48	@ 0x30
 800abae:	d0f8      	beq.n	800aba2 <_strtod_l+0x1e2>
 800abb0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800abb4:	2b08      	cmp	r3, #8
 800abb6:	f200 84d3 	bhi.w	800b560 <_strtod_l+0xba0>
 800abba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abbc:	930c      	str	r3, [sp, #48]	@ 0x30
 800abbe:	4681      	mov	r9, r0
 800abc0:	2000      	movs	r0, #0
 800abc2:	4605      	mov	r5, r0
 800abc4:	3a30      	subs	r2, #48	@ 0x30
 800abc6:	f100 0301 	add.w	r3, r0, #1
 800abca:	d02a      	beq.n	800ac22 <_strtod_l+0x262>
 800abcc:	4499      	add	r9, r3
 800abce:	eb00 0c05 	add.w	ip, r0, r5
 800abd2:	462b      	mov	r3, r5
 800abd4:	210a      	movs	r1, #10
 800abd6:	4563      	cmp	r3, ip
 800abd8:	d10d      	bne.n	800abf6 <_strtod_l+0x236>
 800abda:	1c69      	adds	r1, r5, #1
 800abdc:	4401      	add	r1, r0
 800abde:	4428      	add	r0, r5
 800abe0:	2808      	cmp	r0, #8
 800abe2:	dc16      	bgt.n	800ac12 <_strtod_l+0x252>
 800abe4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800abe6:	230a      	movs	r3, #10
 800abe8:	fb03 2300 	mla	r3, r3, r0, r2
 800abec:	930a      	str	r3, [sp, #40]	@ 0x28
 800abee:	2300      	movs	r3, #0
 800abf0:	e018      	b.n	800ac24 <_strtod_l+0x264>
 800abf2:	4638      	mov	r0, r7
 800abf4:	e7da      	b.n	800abac <_strtod_l+0x1ec>
 800abf6:	2b08      	cmp	r3, #8
 800abf8:	f103 0301 	add.w	r3, r3, #1
 800abfc:	dc03      	bgt.n	800ac06 <_strtod_l+0x246>
 800abfe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ac00:	434e      	muls	r6, r1
 800ac02:	960a      	str	r6, [sp, #40]	@ 0x28
 800ac04:	e7e7      	b.n	800abd6 <_strtod_l+0x216>
 800ac06:	2b10      	cmp	r3, #16
 800ac08:	bfde      	ittt	le
 800ac0a:	9e08      	ldrle	r6, [sp, #32]
 800ac0c:	434e      	mulle	r6, r1
 800ac0e:	9608      	strle	r6, [sp, #32]
 800ac10:	e7e1      	b.n	800abd6 <_strtod_l+0x216>
 800ac12:	280f      	cmp	r0, #15
 800ac14:	dceb      	bgt.n	800abee <_strtod_l+0x22e>
 800ac16:	9808      	ldr	r0, [sp, #32]
 800ac18:	230a      	movs	r3, #10
 800ac1a:	fb03 2300 	mla	r3, r3, r0, r2
 800ac1e:	9308      	str	r3, [sp, #32]
 800ac20:	e7e5      	b.n	800abee <_strtod_l+0x22e>
 800ac22:	4629      	mov	r1, r5
 800ac24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac26:	1c50      	adds	r0, r2, #1
 800ac28:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac2a:	7852      	ldrb	r2, [r2, #1]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	460d      	mov	r5, r1
 800ac30:	e7b1      	b.n	800ab96 <_strtod_l+0x1d6>
 800ac32:	f04f 0900 	mov.w	r9, #0
 800ac36:	2301      	movs	r3, #1
 800ac38:	e77d      	b.n	800ab36 <_strtod_l+0x176>
 800ac3a:	f04f 0c00 	mov.w	ip, #0
 800ac3e:	1ca2      	adds	r2, r4, #2
 800ac40:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac42:	78a2      	ldrb	r2, [r4, #2]
 800ac44:	e785      	b.n	800ab52 <_strtod_l+0x192>
 800ac46:	f04f 0c01 	mov.w	ip, #1
 800ac4a:	e7f8      	b.n	800ac3e <_strtod_l+0x27e>
 800ac4c:	0800d944 	.word	0x0800d944
 800ac50:	0800d920 	.word	0x0800d920
 800ac54:	7ff00000 	.word	0x7ff00000
 800ac58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac5a:	1c51      	adds	r1, r2, #1
 800ac5c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac5e:	7852      	ldrb	r2, [r2, #1]
 800ac60:	2a30      	cmp	r2, #48	@ 0x30
 800ac62:	d0f9      	beq.n	800ac58 <_strtod_l+0x298>
 800ac64:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ac68:	2908      	cmp	r1, #8
 800ac6a:	f63f af78 	bhi.w	800ab5e <_strtod_l+0x19e>
 800ac6e:	3a30      	subs	r2, #48	@ 0x30
 800ac70:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac74:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ac76:	f04f 080a 	mov.w	r8, #10
 800ac7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac7c:	1c56      	adds	r6, r2, #1
 800ac7e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ac80:	7852      	ldrb	r2, [r2, #1]
 800ac82:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ac86:	f1be 0f09 	cmp.w	lr, #9
 800ac8a:	d939      	bls.n	800ad00 <_strtod_l+0x340>
 800ac8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac8e:	1a76      	subs	r6, r6, r1
 800ac90:	2e08      	cmp	r6, #8
 800ac92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ac96:	dc03      	bgt.n	800aca0 <_strtod_l+0x2e0>
 800ac98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ac9a:	4588      	cmp	r8, r1
 800ac9c:	bfa8      	it	ge
 800ac9e:	4688      	movge	r8, r1
 800aca0:	f1bc 0f00 	cmp.w	ip, #0
 800aca4:	d001      	beq.n	800acaa <_strtod_l+0x2ea>
 800aca6:	f1c8 0800 	rsb	r8, r8, #0
 800acaa:	2d00      	cmp	r5, #0
 800acac:	d14e      	bne.n	800ad4c <_strtod_l+0x38c>
 800acae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800acb0:	4308      	orrs	r0, r1
 800acb2:	f47f aebe 	bne.w	800aa32 <_strtod_l+0x72>
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f47f aed6 	bne.w	800aa68 <_strtod_l+0xa8>
 800acbc:	2a69      	cmp	r2, #105	@ 0x69
 800acbe:	d028      	beq.n	800ad12 <_strtod_l+0x352>
 800acc0:	dc25      	bgt.n	800ad0e <_strtod_l+0x34e>
 800acc2:	2a49      	cmp	r2, #73	@ 0x49
 800acc4:	d025      	beq.n	800ad12 <_strtod_l+0x352>
 800acc6:	2a4e      	cmp	r2, #78	@ 0x4e
 800acc8:	f47f aece 	bne.w	800aa68 <_strtod_l+0xa8>
 800accc:	499b      	ldr	r1, [pc, #620]	@ (800af3c <_strtod_l+0x57c>)
 800acce:	a819      	add	r0, sp, #100	@ 0x64
 800acd0:	f001 f93a 	bl	800bf48 <__match>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	f43f aec7 	beq.w	800aa68 <_strtod_l+0xa8>
 800acda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b28      	cmp	r3, #40	@ 0x28
 800ace0:	d12e      	bne.n	800ad40 <_strtod_l+0x380>
 800ace2:	4997      	ldr	r1, [pc, #604]	@ (800af40 <_strtod_l+0x580>)
 800ace4:	aa1c      	add	r2, sp, #112	@ 0x70
 800ace6:	a819      	add	r0, sp, #100	@ 0x64
 800ace8:	f001 f942 	bl	800bf70 <__hexnan>
 800acec:	2805      	cmp	r0, #5
 800acee:	d127      	bne.n	800ad40 <_strtod_l+0x380>
 800acf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800acf2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800acf6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800acfa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800acfe:	e698      	b.n	800aa32 <_strtod_l+0x72>
 800ad00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ad02:	fb08 2101 	mla	r1, r8, r1, r2
 800ad06:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ad0a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad0c:	e7b5      	b.n	800ac7a <_strtod_l+0x2ba>
 800ad0e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ad10:	e7da      	b.n	800acc8 <_strtod_l+0x308>
 800ad12:	498c      	ldr	r1, [pc, #560]	@ (800af44 <_strtod_l+0x584>)
 800ad14:	a819      	add	r0, sp, #100	@ 0x64
 800ad16:	f001 f917 	bl	800bf48 <__match>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	f43f aea4 	beq.w	800aa68 <_strtod_l+0xa8>
 800ad20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad22:	4989      	ldr	r1, [pc, #548]	@ (800af48 <_strtod_l+0x588>)
 800ad24:	3b01      	subs	r3, #1
 800ad26:	a819      	add	r0, sp, #100	@ 0x64
 800ad28:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad2a:	f001 f90d 	bl	800bf48 <__match>
 800ad2e:	b910      	cbnz	r0, 800ad36 <_strtod_l+0x376>
 800ad30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad32:	3301      	adds	r3, #1
 800ad34:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad36:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800af58 <_strtod_l+0x598>
 800ad3a:	f04f 0a00 	mov.w	sl, #0
 800ad3e:	e678      	b.n	800aa32 <_strtod_l+0x72>
 800ad40:	4882      	ldr	r0, [pc, #520]	@ (800af4c <_strtod_l+0x58c>)
 800ad42:	f000 fe25 	bl	800b990 <nan>
 800ad46:	ec5b ab10 	vmov	sl, fp, d0
 800ad4a:	e672      	b.n	800aa32 <_strtod_l+0x72>
 800ad4c:	eba8 0309 	sub.w	r3, r8, r9
 800ad50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad54:	2f00      	cmp	r7, #0
 800ad56:	bf08      	it	eq
 800ad58:	462f      	moveq	r7, r5
 800ad5a:	2d10      	cmp	r5, #16
 800ad5c:	462c      	mov	r4, r5
 800ad5e:	bfa8      	it	ge
 800ad60:	2410      	movge	r4, #16
 800ad62:	f7f5 fbe7 	bl	8000534 <__aeabi_ui2d>
 800ad66:	2d09      	cmp	r5, #9
 800ad68:	4682      	mov	sl, r0
 800ad6a:	468b      	mov	fp, r1
 800ad6c:	dc13      	bgt.n	800ad96 <_strtod_l+0x3d6>
 800ad6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f43f ae5e 	beq.w	800aa32 <_strtod_l+0x72>
 800ad76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad78:	dd78      	ble.n	800ae6c <_strtod_l+0x4ac>
 800ad7a:	2b16      	cmp	r3, #22
 800ad7c:	dc5f      	bgt.n	800ae3e <_strtod_l+0x47e>
 800ad7e:	4974      	ldr	r1, [pc, #464]	@ (800af50 <_strtod_l+0x590>)
 800ad80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad88:	4652      	mov	r2, sl
 800ad8a:	465b      	mov	r3, fp
 800ad8c:	f7f5 fc4c 	bl	8000628 <__aeabi_dmul>
 800ad90:	4682      	mov	sl, r0
 800ad92:	468b      	mov	fp, r1
 800ad94:	e64d      	b.n	800aa32 <_strtod_l+0x72>
 800ad96:	4b6e      	ldr	r3, [pc, #440]	@ (800af50 <_strtod_l+0x590>)
 800ad98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ada0:	f7f5 fc42 	bl	8000628 <__aeabi_dmul>
 800ada4:	4682      	mov	sl, r0
 800ada6:	9808      	ldr	r0, [sp, #32]
 800ada8:	468b      	mov	fp, r1
 800adaa:	f7f5 fbc3 	bl	8000534 <__aeabi_ui2d>
 800adae:	4602      	mov	r2, r0
 800adb0:	460b      	mov	r3, r1
 800adb2:	4650      	mov	r0, sl
 800adb4:	4659      	mov	r1, fp
 800adb6:	f7f5 fa81 	bl	80002bc <__adddf3>
 800adba:	2d0f      	cmp	r5, #15
 800adbc:	4682      	mov	sl, r0
 800adbe:	468b      	mov	fp, r1
 800adc0:	ddd5      	ble.n	800ad6e <_strtod_l+0x3ae>
 800adc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adc4:	1b2c      	subs	r4, r5, r4
 800adc6:	441c      	add	r4, r3
 800adc8:	2c00      	cmp	r4, #0
 800adca:	f340 8096 	ble.w	800aefa <_strtod_l+0x53a>
 800adce:	f014 030f 	ands.w	r3, r4, #15
 800add2:	d00a      	beq.n	800adea <_strtod_l+0x42a>
 800add4:	495e      	ldr	r1, [pc, #376]	@ (800af50 <_strtod_l+0x590>)
 800add6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800adda:	4652      	mov	r2, sl
 800addc:	465b      	mov	r3, fp
 800adde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ade2:	f7f5 fc21 	bl	8000628 <__aeabi_dmul>
 800ade6:	4682      	mov	sl, r0
 800ade8:	468b      	mov	fp, r1
 800adea:	f034 040f 	bics.w	r4, r4, #15
 800adee:	d073      	beq.n	800aed8 <_strtod_l+0x518>
 800adf0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800adf4:	dd48      	ble.n	800ae88 <_strtod_l+0x4c8>
 800adf6:	2400      	movs	r4, #0
 800adf8:	46a0      	mov	r8, r4
 800adfa:	940a      	str	r4, [sp, #40]	@ 0x28
 800adfc:	46a1      	mov	r9, r4
 800adfe:	9a05      	ldr	r2, [sp, #20]
 800ae00:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800af58 <_strtod_l+0x598>
 800ae04:	2322      	movs	r3, #34	@ 0x22
 800ae06:	6013      	str	r3, [r2, #0]
 800ae08:	f04f 0a00 	mov.w	sl, #0
 800ae0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f43f ae0f 	beq.w	800aa32 <_strtod_l+0x72>
 800ae14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae16:	9805      	ldr	r0, [sp, #20]
 800ae18:	f001 f998 	bl	800c14c <_Bfree>
 800ae1c:	9805      	ldr	r0, [sp, #20]
 800ae1e:	4649      	mov	r1, r9
 800ae20:	f001 f994 	bl	800c14c <_Bfree>
 800ae24:	9805      	ldr	r0, [sp, #20]
 800ae26:	4641      	mov	r1, r8
 800ae28:	f001 f990 	bl	800c14c <_Bfree>
 800ae2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae2e:	9805      	ldr	r0, [sp, #20]
 800ae30:	f001 f98c 	bl	800c14c <_Bfree>
 800ae34:	9805      	ldr	r0, [sp, #20]
 800ae36:	4621      	mov	r1, r4
 800ae38:	f001 f988 	bl	800c14c <_Bfree>
 800ae3c:	e5f9      	b.n	800aa32 <_strtod_l+0x72>
 800ae3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ae44:	4293      	cmp	r3, r2
 800ae46:	dbbc      	blt.n	800adc2 <_strtod_l+0x402>
 800ae48:	4c41      	ldr	r4, [pc, #260]	@ (800af50 <_strtod_l+0x590>)
 800ae4a:	f1c5 050f 	rsb	r5, r5, #15
 800ae4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ae52:	4652      	mov	r2, sl
 800ae54:	465b      	mov	r3, fp
 800ae56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae5a:	f7f5 fbe5 	bl	8000628 <__aeabi_dmul>
 800ae5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae60:	1b5d      	subs	r5, r3, r5
 800ae62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ae66:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ae6a:	e78f      	b.n	800ad8c <_strtod_l+0x3cc>
 800ae6c:	3316      	adds	r3, #22
 800ae6e:	dba8      	blt.n	800adc2 <_strtod_l+0x402>
 800ae70:	4b37      	ldr	r3, [pc, #220]	@ (800af50 <_strtod_l+0x590>)
 800ae72:	eba9 0808 	sub.w	r8, r9, r8
 800ae76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ae7a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ae7e:	4650      	mov	r0, sl
 800ae80:	4659      	mov	r1, fp
 800ae82:	f7f5 fcfb 	bl	800087c <__aeabi_ddiv>
 800ae86:	e783      	b.n	800ad90 <_strtod_l+0x3d0>
 800ae88:	4b32      	ldr	r3, [pc, #200]	@ (800af54 <_strtod_l+0x594>)
 800ae8a:	9308      	str	r3, [sp, #32]
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	1124      	asrs	r4, r4, #4
 800ae90:	4650      	mov	r0, sl
 800ae92:	4659      	mov	r1, fp
 800ae94:	461e      	mov	r6, r3
 800ae96:	2c01      	cmp	r4, #1
 800ae98:	dc21      	bgt.n	800aede <_strtod_l+0x51e>
 800ae9a:	b10b      	cbz	r3, 800aea0 <_strtod_l+0x4e0>
 800ae9c:	4682      	mov	sl, r0
 800ae9e:	468b      	mov	fp, r1
 800aea0:	492c      	ldr	r1, [pc, #176]	@ (800af54 <_strtod_l+0x594>)
 800aea2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800aea6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800aeaa:	4652      	mov	r2, sl
 800aeac:	465b      	mov	r3, fp
 800aeae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeb2:	f7f5 fbb9 	bl	8000628 <__aeabi_dmul>
 800aeb6:	4b28      	ldr	r3, [pc, #160]	@ (800af58 <_strtod_l+0x598>)
 800aeb8:	460a      	mov	r2, r1
 800aeba:	400b      	ands	r3, r1
 800aebc:	4927      	ldr	r1, [pc, #156]	@ (800af5c <_strtod_l+0x59c>)
 800aebe:	428b      	cmp	r3, r1
 800aec0:	4682      	mov	sl, r0
 800aec2:	d898      	bhi.n	800adf6 <_strtod_l+0x436>
 800aec4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800aec8:	428b      	cmp	r3, r1
 800aeca:	bf86      	itte	hi
 800aecc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800af60 <_strtod_l+0x5a0>
 800aed0:	f04f 3aff 	movhi.w	sl, #4294967295
 800aed4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800aed8:	2300      	movs	r3, #0
 800aeda:	9308      	str	r3, [sp, #32]
 800aedc:	e07a      	b.n	800afd4 <_strtod_l+0x614>
 800aede:	07e2      	lsls	r2, r4, #31
 800aee0:	d505      	bpl.n	800aeee <_strtod_l+0x52e>
 800aee2:	9b08      	ldr	r3, [sp, #32]
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	f7f5 fb9e 	bl	8000628 <__aeabi_dmul>
 800aeec:	2301      	movs	r3, #1
 800aeee:	9a08      	ldr	r2, [sp, #32]
 800aef0:	3208      	adds	r2, #8
 800aef2:	3601      	adds	r6, #1
 800aef4:	1064      	asrs	r4, r4, #1
 800aef6:	9208      	str	r2, [sp, #32]
 800aef8:	e7cd      	b.n	800ae96 <_strtod_l+0x4d6>
 800aefa:	d0ed      	beq.n	800aed8 <_strtod_l+0x518>
 800aefc:	4264      	negs	r4, r4
 800aefe:	f014 020f 	ands.w	r2, r4, #15
 800af02:	d00a      	beq.n	800af1a <_strtod_l+0x55a>
 800af04:	4b12      	ldr	r3, [pc, #72]	@ (800af50 <_strtod_l+0x590>)
 800af06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af0a:	4650      	mov	r0, sl
 800af0c:	4659      	mov	r1, fp
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	f7f5 fcb3 	bl	800087c <__aeabi_ddiv>
 800af16:	4682      	mov	sl, r0
 800af18:	468b      	mov	fp, r1
 800af1a:	1124      	asrs	r4, r4, #4
 800af1c:	d0dc      	beq.n	800aed8 <_strtod_l+0x518>
 800af1e:	2c1f      	cmp	r4, #31
 800af20:	dd20      	ble.n	800af64 <_strtod_l+0x5a4>
 800af22:	2400      	movs	r4, #0
 800af24:	46a0      	mov	r8, r4
 800af26:	940a      	str	r4, [sp, #40]	@ 0x28
 800af28:	46a1      	mov	r9, r4
 800af2a:	9a05      	ldr	r2, [sp, #20]
 800af2c:	2322      	movs	r3, #34	@ 0x22
 800af2e:	f04f 0a00 	mov.w	sl, #0
 800af32:	f04f 0b00 	mov.w	fp, #0
 800af36:	6013      	str	r3, [r2, #0]
 800af38:	e768      	b.n	800ae0c <_strtod_l+0x44c>
 800af3a:	bf00      	nop
 800af3c:	0800d92b 	.word	0x0800d92b
 800af40:	0800d930 	.word	0x0800d930
 800af44:	0800d922 	.word	0x0800d922
 800af48:	0800d925 	.word	0x0800d925
 800af4c:	0800dcd6 	.word	0x0800dcd6
 800af50:	0800dba0 	.word	0x0800dba0
 800af54:	0800db78 	.word	0x0800db78
 800af58:	7ff00000 	.word	0x7ff00000
 800af5c:	7ca00000 	.word	0x7ca00000
 800af60:	7fefffff 	.word	0x7fefffff
 800af64:	f014 0310 	ands.w	r3, r4, #16
 800af68:	bf18      	it	ne
 800af6a:	236a      	movne	r3, #106	@ 0x6a
 800af6c:	4ea9      	ldr	r6, [pc, #676]	@ (800b214 <_strtod_l+0x854>)
 800af6e:	9308      	str	r3, [sp, #32]
 800af70:	4650      	mov	r0, sl
 800af72:	4659      	mov	r1, fp
 800af74:	2300      	movs	r3, #0
 800af76:	07e2      	lsls	r2, r4, #31
 800af78:	d504      	bpl.n	800af84 <_strtod_l+0x5c4>
 800af7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af7e:	f7f5 fb53 	bl	8000628 <__aeabi_dmul>
 800af82:	2301      	movs	r3, #1
 800af84:	1064      	asrs	r4, r4, #1
 800af86:	f106 0608 	add.w	r6, r6, #8
 800af8a:	d1f4      	bne.n	800af76 <_strtod_l+0x5b6>
 800af8c:	b10b      	cbz	r3, 800af92 <_strtod_l+0x5d2>
 800af8e:	4682      	mov	sl, r0
 800af90:	468b      	mov	fp, r1
 800af92:	9b08      	ldr	r3, [sp, #32]
 800af94:	b1b3      	cbz	r3, 800afc4 <_strtod_l+0x604>
 800af96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800af9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	4659      	mov	r1, fp
 800afa2:	dd0f      	ble.n	800afc4 <_strtod_l+0x604>
 800afa4:	2b1f      	cmp	r3, #31
 800afa6:	dd55      	ble.n	800b054 <_strtod_l+0x694>
 800afa8:	2b34      	cmp	r3, #52	@ 0x34
 800afaa:	bfde      	ittt	le
 800afac:	f04f 33ff 	movle.w	r3, #4294967295
 800afb0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800afb4:	4093      	lslle	r3, r2
 800afb6:	f04f 0a00 	mov.w	sl, #0
 800afba:	bfcc      	ite	gt
 800afbc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800afc0:	ea03 0b01 	andle.w	fp, r3, r1
 800afc4:	2200      	movs	r2, #0
 800afc6:	2300      	movs	r3, #0
 800afc8:	4650      	mov	r0, sl
 800afca:	4659      	mov	r1, fp
 800afcc:	f7f5 fd94 	bl	8000af8 <__aeabi_dcmpeq>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d1a6      	bne.n	800af22 <_strtod_l+0x562>
 800afd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800afda:	9805      	ldr	r0, [sp, #20]
 800afdc:	462b      	mov	r3, r5
 800afde:	463a      	mov	r2, r7
 800afe0:	f001 f91c 	bl	800c21c <__s2b>
 800afe4:	900a      	str	r0, [sp, #40]	@ 0x28
 800afe6:	2800      	cmp	r0, #0
 800afe8:	f43f af05 	beq.w	800adf6 <_strtod_l+0x436>
 800afec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afee:	2a00      	cmp	r2, #0
 800aff0:	eba9 0308 	sub.w	r3, r9, r8
 800aff4:	bfa8      	it	ge
 800aff6:	2300      	movge	r3, #0
 800aff8:	9312      	str	r3, [sp, #72]	@ 0x48
 800affa:	2400      	movs	r4, #0
 800affc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b000:	9316      	str	r3, [sp, #88]	@ 0x58
 800b002:	46a0      	mov	r8, r4
 800b004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b006:	9805      	ldr	r0, [sp, #20]
 800b008:	6859      	ldr	r1, [r3, #4]
 800b00a:	f001 f85f 	bl	800c0cc <_Balloc>
 800b00e:	4681      	mov	r9, r0
 800b010:	2800      	cmp	r0, #0
 800b012:	f43f aef4 	beq.w	800adfe <_strtod_l+0x43e>
 800b016:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b018:	691a      	ldr	r2, [r3, #16]
 800b01a:	3202      	adds	r2, #2
 800b01c:	f103 010c 	add.w	r1, r3, #12
 800b020:	0092      	lsls	r2, r2, #2
 800b022:	300c      	adds	r0, #12
 800b024:	f000 fca5 	bl	800b972 <memcpy>
 800b028:	ec4b ab10 	vmov	d0, sl, fp
 800b02c:	9805      	ldr	r0, [sp, #20]
 800b02e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b030:	a91b      	add	r1, sp, #108	@ 0x6c
 800b032:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b036:	f001 fc2d 	bl	800c894 <__d2b>
 800b03a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b03c:	2800      	cmp	r0, #0
 800b03e:	f43f aede 	beq.w	800adfe <_strtod_l+0x43e>
 800b042:	9805      	ldr	r0, [sp, #20]
 800b044:	2101      	movs	r1, #1
 800b046:	f001 f97f 	bl	800c348 <__i2b>
 800b04a:	4680      	mov	r8, r0
 800b04c:	b948      	cbnz	r0, 800b062 <_strtod_l+0x6a2>
 800b04e:	f04f 0800 	mov.w	r8, #0
 800b052:	e6d4      	b.n	800adfe <_strtod_l+0x43e>
 800b054:	f04f 32ff 	mov.w	r2, #4294967295
 800b058:	fa02 f303 	lsl.w	r3, r2, r3
 800b05c:	ea03 0a0a 	and.w	sl, r3, sl
 800b060:	e7b0      	b.n	800afc4 <_strtod_l+0x604>
 800b062:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b064:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b066:	2d00      	cmp	r5, #0
 800b068:	bfab      	itete	ge
 800b06a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b06c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b06e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b070:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b072:	bfac      	ite	ge
 800b074:	18ef      	addge	r7, r5, r3
 800b076:	1b5e      	sublt	r6, r3, r5
 800b078:	9b08      	ldr	r3, [sp, #32]
 800b07a:	1aed      	subs	r5, r5, r3
 800b07c:	4415      	add	r5, r2
 800b07e:	4b66      	ldr	r3, [pc, #408]	@ (800b218 <_strtod_l+0x858>)
 800b080:	3d01      	subs	r5, #1
 800b082:	429d      	cmp	r5, r3
 800b084:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b088:	da50      	bge.n	800b12c <_strtod_l+0x76c>
 800b08a:	1b5b      	subs	r3, r3, r5
 800b08c:	2b1f      	cmp	r3, #31
 800b08e:	eba2 0203 	sub.w	r2, r2, r3
 800b092:	f04f 0101 	mov.w	r1, #1
 800b096:	dc3d      	bgt.n	800b114 <_strtod_l+0x754>
 800b098:	fa01 f303 	lsl.w	r3, r1, r3
 800b09c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b09e:	2300      	movs	r3, #0
 800b0a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0a2:	18bd      	adds	r5, r7, r2
 800b0a4:	9b08      	ldr	r3, [sp, #32]
 800b0a6:	42af      	cmp	r7, r5
 800b0a8:	4416      	add	r6, r2
 800b0aa:	441e      	add	r6, r3
 800b0ac:	463b      	mov	r3, r7
 800b0ae:	bfa8      	it	ge
 800b0b0:	462b      	movge	r3, r5
 800b0b2:	42b3      	cmp	r3, r6
 800b0b4:	bfa8      	it	ge
 800b0b6:	4633      	movge	r3, r6
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	bfc2      	ittt	gt
 800b0bc:	1aed      	subgt	r5, r5, r3
 800b0be:	1af6      	subgt	r6, r6, r3
 800b0c0:	1aff      	subgt	r7, r7, r3
 800b0c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	dd16      	ble.n	800b0f6 <_strtod_l+0x736>
 800b0c8:	4641      	mov	r1, r8
 800b0ca:	9805      	ldr	r0, [sp, #20]
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	f001 f9fb 	bl	800c4c8 <__pow5mult>
 800b0d2:	4680      	mov	r8, r0
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d0ba      	beq.n	800b04e <_strtod_l+0x68e>
 800b0d8:	4601      	mov	r1, r0
 800b0da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b0dc:	9805      	ldr	r0, [sp, #20]
 800b0de:	f001 f949 	bl	800c374 <__multiply>
 800b0e2:	900e      	str	r0, [sp, #56]	@ 0x38
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	f43f ae8a 	beq.w	800adfe <_strtod_l+0x43e>
 800b0ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0ec:	9805      	ldr	r0, [sp, #20]
 800b0ee:	f001 f82d 	bl	800c14c <_Bfree>
 800b0f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0f6:	2d00      	cmp	r5, #0
 800b0f8:	dc1d      	bgt.n	800b136 <_strtod_l+0x776>
 800b0fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	dd23      	ble.n	800b148 <_strtod_l+0x788>
 800b100:	4649      	mov	r1, r9
 800b102:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b104:	9805      	ldr	r0, [sp, #20]
 800b106:	f001 f9df 	bl	800c4c8 <__pow5mult>
 800b10a:	4681      	mov	r9, r0
 800b10c:	b9e0      	cbnz	r0, 800b148 <_strtod_l+0x788>
 800b10e:	f04f 0900 	mov.w	r9, #0
 800b112:	e674      	b.n	800adfe <_strtod_l+0x43e>
 800b114:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b118:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b11c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b120:	35e2      	adds	r5, #226	@ 0xe2
 800b122:	fa01 f305 	lsl.w	r3, r1, r5
 800b126:	9310      	str	r3, [sp, #64]	@ 0x40
 800b128:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b12a:	e7ba      	b.n	800b0a2 <_strtod_l+0x6e2>
 800b12c:	2300      	movs	r3, #0
 800b12e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b130:	2301      	movs	r3, #1
 800b132:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b134:	e7b5      	b.n	800b0a2 <_strtod_l+0x6e2>
 800b136:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b138:	9805      	ldr	r0, [sp, #20]
 800b13a:	462a      	mov	r2, r5
 800b13c:	f001 fa1e 	bl	800c57c <__lshift>
 800b140:	901a      	str	r0, [sp, #104]	@ 0x68
 800b142:	2800      	cmp	r0, #0
 800b144:	d1d9      	bne.n	800b0fa <_strtod_l+0x73a>
 800b146:	e65a      	b.n	800adfe <_strtod_l+0x43e>
 800b148:	2e00      	cmp	r6, #0
 800b14a:	dd07      	ble.n	800b15c <_strtod_l+0x79c>
 800b14c:	4649      	mov	r1, r9
 800b14e:	9805      	ldr	r0, [sp, #20]
 800b150:	4632      	mov	r2, r6
 800b152:	f001 fa13 	bl	800c57c <__lshift>
 800b156:	4681      	mov	r9, r0
 800b158:	2800      	cmp	r0, #0
 800b15a:	d0d8      	beq.n	800b10e <_strtod_l+0x74e>
 800b15c:	2f00      	cmp	r7, #0
 800b15e:	dd08      	ble.n	800b172 <_strtod_l+0x7b2>
 800b160:	4641      	mov	r1, r8
 800b162:	9805      	ldr	r0, [sp, #20]
 800b164:	463a      	mov	r2, r7
 800b166:	f001 fa09 	bl	800c57c <__lshift>
 800b16a:	4680      	mov	r8, r0
 800b16c:	2800      	cmp	r0, #0
 800b16e:	f43f ae46 	beq.w	800adfe <_strtod_l+0x43e>
 800b172:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b174:	9805      	ldr	r0, [sp, #20]
 800b176:	464a      	mov	r2, r9
 800b178:	f001 fa88 	bl	800c68c <__mdiff>
 800b17c:	4604      	mov	r4, r0
 800b17e:	2800      	cmp	r0, #0
 800b180:	f43f ae3d 	beq.w	800adfe <_strtod_l+0x43e>
 800b184:	68c3      	ldr	r3, [r0, #12]
 800b186:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b188:	2300      	movs	r3, #0
 800b18a:	60c3      	str	r3, [r0, #12]
 800b18c:	4641      	mov	r1, r8
 800b18e:	f001 fa61 	bl	800c654 <__mcmp>
 800b192:	2800      	cmp	r0, #0
 800b194:	da46      	bge.n	800b224 <_strtod_l+0x864>
 800b196:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b198:	ea53 030a 	orrs.w	r3, r3, sl
 800b19c:	d16c      	bne.n	800b278 <_strtod_l+0x8b8>
 800b19e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d168      	bne.n	800b278 <_strtod_l+0x8b8>
 800b1a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b1aa:	0d1b      	lsrs	r3, r3, #20
 800b1ac:	051b      	lsls	r3, r3, #20
 800b1ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b1b2:	d961      	bls.n	800b278 <_strtod_l+0x8b8>
 800b1b4:	6963      	ldr	r3, [r4, #20]
 800b1b6:	b913      	cbnz	r3, 800b1be <_strtod_l+0x7fe>
 800b1b8:	6923      	ldr	r3, [r4, #16]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	dd5c      	ble.n	800b278 <_strtod_l+0x8b8>
 800b1be:	4621      	mov	r1, r4
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	9805      	ldr	r0, [sp, #20]
 800b1c4:	f001 f9da 	bl	800c57c <__lshift>
 800b1c8:	4641      	mov	r1, r8
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	f001 fa42 	bl	800c654 <__mcmp>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	dd51      	ble.n	800b278 <_strtod_l+0x8b8>
 800b1d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b1d8:	9a08      	ldr	r2, [sp, #32]
 800b1da:	0d1b      	lsrs	r3, r3, #20
 800b1dc:	051b      	lsls	r3, r3, #20
 800b1de:	2a00      	cmp	r2, #0
 800b1e0:	d06b      	beq.n	800b2ba <_strtod_l+0x8fa>
 800b1e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b1e6:	d868      	bhi.n	800b2ba <_strtod_l+0x8fa>
 800b1e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b1ec:	f67f ae9d 	bls.w	800af2a <_strtod_l+0x56a>
 800b1f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b21c <_strtod_l+0x85c>)
 800b1f2:	4650      	mov	r0, sl
 800b1f4:	4659      	mov	r1, fp
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f7f5 fa16 	bl	8000628 <__aeabi_dmul>
 800b1fc:	4b08      	ldr	r3, [pc, #32]	@ (800b220 <_strtod_l+0x860>)
 800b1fe:	400b      	ands	r3, r1
 800b200:	4682      	mov	sl, r0
 800b202:	468b      	mov	fp, r1
 800b204:	2b00      	cmp	r3, #0
 800b206:	f47f ae05 	bne.w	800ae14 <_strtod_l+0x454>
 800b20a:	9a05      	ldr	r2, [sp, #20]
 800b20c:	2322      	movs	r3, #34	@ 0x22
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	e600      	b.n	800ae14 <_strtod_l+0x454>
 800b212:	bf00      	nop
 800b214:	0800d958 	.word	0x0800d958
 800b218:	fffffc02 	.word	0xfffffc02
 800b21c:	39500000 	.word	0x39500000
 800b220:	7ff00000 	.word	0x7ff00000
 800b224:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b228:	d165      	bne.n	800b2f6 <_strtod_l+0x936>
 800b22a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b22c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b230:	b35a      	cbz	r2, 800b28a <_strtod_l+0x8ca>
 800b232:	4a9f      	ldr	r2, [pc, #636]	@ (800b4b0 <_strtod_l+0xaf0>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d12b      	bne.n	800b290 <_strtod_l+0x8d0>
 800b238:	9b08      	ldr	r3, [sp, #32]
 800b23a:	4651      	mov	r1, sl
 800b23c:	b303      	cbz	r3, 800b280 <_strtod_l+0x8c0>
 800b23e:	4b9d      	ldr	r3, [pc, #628]	@ (800b4b4 <_strtod_l+0xaf4>)
 800b240:	465a      	mov	r2, fp
 800b242:	4013      	ands	r3, r2
 800b244:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b248:	f04f 32ff 	mov.w	r2, #4294967295
 800b24c:	d81b      	bhi.n	800b286 <_strtod_l+0x8c6>
 800b24e:	0d1b      	lsrs	r3, r3, #20
 800b250:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b254:	fa02 f303 	lsl.w	r3, r2, r3
 800b258:	4299      	cmp	r1, r3
 800b25a:	d119      	bne.n	800b290 <_strtod_l+0x8d0>
 800b25c:	4b96      	ldr	r3, [pc, #600]	@ (800b4b8 <_strtod_l+0xaf8>)
 800b25e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b260:	429a      	cmp	r2, r3
 800b262:	d102      	bne.n	800b26a <_strtod_l+0x8aa>
 800b264:	3101      	adds	r1, #1
 800b266:	f43f adca 	beq.w	800adfe <_strtod_l+0x43e>
 800b26a:	4b92      	ldr	r3, [pc, #584]	@ (800b4b4 <_strtod_l+0xaf4>)
 800b26c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b26e:	401a      	ands	r2, r3
 800b270:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b274:	f04f 0a00 	mov.w	sl, #0
 800b278:	9b08      	ldr	r3, [sp, #32]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1b8      	bne.n	800b1f0 <_strtod_l+0x830>
 800b27e:	e5c9      	b.n	800ae14 <_strtod_l+0x454>
 800b280:	f04f 33ff 	mov.w	r3, #4294967295
 800b284:	e7e8      	b.n	800b258 <_strtod_l+0x898>
 800b286:	4613      	mov	r3, r2
 800b288:	e7e6      	b.n	800b258 <_strtod_l+0x898>
 800b28a:	ea53 030a 	orrs.w	r3, r3, sl
 800b28e:	d0a1      	beq.n	800b1d4 <_strtod_l+0x814>
 800b290:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b292:	b1db      	cbz	r3, 800b2cc <_strtod_l+0x90c>
 800b294:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b296:	4213      	tst	r3, r2
 800b298:	d0ee      	beq.n	800b278 <_strtod_l+0x8b8>
 800b29a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b29c:	9a08      	ldr	r2, [sp, #32]
 800b29e:	4650      	mov	r0, sl
 800b2a0:	4659      	mov	r1, fp
 800b2a2:	b1bb      	cbz	r3, 800b2d4 <_strtod_l+0x914>
 800b2a4:	f7ff fb6e 	bl	800a984 <sulp>
 800b2a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2ac:	ec53 2b10 	vmov	r2, r3, d0
 800b2b0:	f7f5 f804 	bl	80002bc <__adddf3>
 800b2b4:	4682      	mov	sl, r0
 800b2b6:	468b      	mov	fp, r1
 800b2b8:	e7de      	b.n	800b278 <_strtod_l+0x8b8>
 800b2ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b2be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b2c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b2c6:	f04f 3aff 	mov.w	sl, #4294967295
 800b2ca:	e7d5      	b.n	800b278 <_strtod_l+0x8b8>
 800b2cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b2ce:	ea13 0f0a 	tst.w	r3, sl
 800b2d2:	e7e1      	b.n	800b298 <_strtod_l+0x8d8>
 800b2d4:	f7ff fb56 	bl	800a984 <sulp>
 800b2d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2dc:	ec53 2b10 	vmov	r2, r3, d0
 800b2e0:	f7f4 ffea 	bl	80002b8 <__aeabi_dsub>
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	4682      	mov	sl, r0
 800b2ea:	468b      	mov	fp, r1
 800b2ec:	f7f5 fc04 	bl	8000af8 <__aeabi_dcmpeq>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d0c1      	beq.n	800b278 <_strtod_l+0x8b8>
 800b2f4:	e619      	b.n	800af2a <_strtod_l+0x56a>
 800b2f6:	4641      	mov	r1, r8
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f001 fb23 	bl	800c944 <__ratio>
 800b2fe:	ec57 6b10 	vmov	r6, r7, d0
 800b302:	2200      	movs	r2, #0
 800b304:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b308:	4630      	mov	r0, r6
 800b30a:	4639      	mov	r1, r7
 800b30c:	f7f5 fc08 	bl	8000b20 <__aeabi_dcmple>
 800b310:	2800      	cmp	r0, #0
 800b312:	d06f      	beq.n	800b3f4 <_strtod_l+0xa34>
 800b314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b316:	2b00      	cmp	r3, #0
 800b318:	d17a      	bne.n	800b410 <_strtod_l+0xa50>
 800b31a:	f1ba 0f00 	cmp.w	sl, #0
 800b31e:	d158      	bne.n	800b3d2 <_strtod_l+0xa12>
 800b320:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b322:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b326:	2b00      	cmp	r3, #0
 800b328:	d15a      	bne.n	800b3e0 <_strtod_l+0xa20>
 800b32a:	4b64      	ldr	r3, [pc, #400]	@ (800b4bc <_strtod_l+0xafc>)
 800b32c:	2200      	movs	r2, #0
 800b32e:	4630      	mov	r0, r6
 800b330:	4639      	mov	r1, r7
 800b332:	f7f5 fbeb 	bl	8000b0c <__aeabi_dcmplt>
 800b336:	2800      	cmp	r0, #0
 800b338:	d159      	bne.n	800b3ee <_strtod_l+0xa2e>
 800b33a:	4630      	mov	r0, r6
 800b33c:	4639      	mov	r1, r7
 800b33e:	4b60      	ldr	r3, [pc, #384]	@ (800b4c0 <_strtod_l+0xb00>)
 800b340:	2200      	movs	r2, #0
 800b342:	f7f5 f971 	bl	8000628 <__aeabi_dmul>
 800b346:	4606      	mov	r6, r0
 800b348:	460f      	mov	r7, r1
 800b34a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b34e:	9606      	str	r6, [sp, #24]
 800b350:	9307      	str	r3, [sp, #28]
 800b352:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b356:	4d57      	ldr	r5, [pc, #348]	@ (800b4b4 <_strtod_l+0xaf4>)
 800b358:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b35c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b35e:	401d      	ands	r5, r3
 800b360:	4b58      	ldr	r3, [pc, #352]	@ (800b4c4 <_strtod_l+0xb04>)
 800b362:	429d      	cmp	r5, r3
 800b364:	f040 80b2 	bne.w	800b4cc <_strtod_l+0xb0c>
 800b368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b36a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b36e:	ec4b ab10 	vmov	d0, sl, fp
 800b372:	f001 fa1f 	bl	800c7b4 <__ulp>
 800b376:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b37a:	ec51 0b10 	vmov	r0, r1, d0
 800b37e:	f7f5 f953 	bl	8000628 <__aeabi_dmul>
 800b382:	4652      	mov	r2, sl
 800b384:	465b      	mov	r3, fp
 800b386:	f7f4 ff99 	bl	80002bc <__adddf3>
 800b38a:	460b      	mov	r3, r1
 800b38c:	4949      	ldr	r1, [pc, #292]	@ (800b4b4 <_strtod_l+0xaf4>)
 800b38e:	4a4e      	ldr	r2, [pc, #312]	@ (800b4c8 <_strtod_l+0xb08>)
 800b390:	4019      	ands	r1, r3
 800b392:	4291      	cmp	r1, r2
 800b394:	4682      	mov	sl, r0
 800b396:	d942      	bls.n	800b41e <_strtod_l+0xa5e>
 800b398:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b39a:	4b47      	ldr	r3, [pc, #284]	@ (800b4b8 <_strtod_l+0xaf8>)
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d103      	bne.n	800b3a8 <_strtod_l+0x9e8>
 800b3a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	f43f ad2b 	beq.w	800adfe <_strtod_l+0x43e>
 800b3a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b4b8 <_strtod_l+0xaf8>
 800b3ac:	f04f 3aff 	mov.w	sl, #4294967295
 800b3b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3b2:	9805      	ldr	r0, [sp, #20]
 800b3b4:	f000 feca 	bl	800c14c <_Bfree>
 800b3b8:	9805      	ldr	r0, [sp, #20]
 800b3ba:	4649      	mov	r1, r9
 800b3bc:	f000 fec6 	bl	800c14c <_Bfree>
 800b3c0:	9805      	ldr	r0, [sp, #20]
 800b3c2:	4641      	mov	r1, r8
 800b3c4:	f000 fec2 	bl	800c14c <_Bfree>
 800b3c8:	9805      	ldr	r0, [sp, #20]
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	f000 febe 	bl	800c14c <_Bfree>
 800b3d0:	e618      	b.n	800b004 <_strtod_l+0x644>
 800b3d2:	f1ba 0f01 	cmp.w	sl, #1
 800b3d6:	d103      	bne.n	800b3e0 <_strtod_l+0xa20>
 800b3d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f43f ada5 	beq.w	800af2a <_strtod_l+0x56a>
 800b3e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b490 <_strtod_l+0xad0>
 800b3e4:	4f35      	ldr	r7, [pc, #212]	@ (800b4bc <_strtod_l+0xafc>)
 800b3e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b3ea:	2600      	movs	r6, #0
 800b3ec:	e7b1      	b.n	800b352 <_strtod_l+0x992>
 800b3ee:	4f34      	ldr	r7, [pc, #208]	@ (800b4c0 <_strtod_l+0xb00>)
 800b3f0:	2600      	movs	r6, #0
 800b3f2:	e7aa      	b.n	800b34a <_strtod_l+0x98a>
 800b3f4:	4b32      	ldr	r3, [pc, #200]	@ (800b4c0 <_strtod_l+0xb00>)
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	4639      	mov	r1, r7
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f7f5 f914 	bl	8000628 <__aeabi_dmul>
 800b400:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b402:	4606      	mov	r6, r0
 800b404:	460f      	mov	r7, r1
 800b406:	2b00      	cmp	r3, #0
 800b408:	d09f      	beq.n	800b34a <_strtod_l+0x98a>
 800b40a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b40e:	e7a0      	b.n	800b352 <_strtod_l+0x992>
 800b410:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b498 <_strtod_l+0xad8>
 800b414:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b418:	ec57 6b17 	vmov	r6, r7, d7
 800b41c:	e799      	b.n	800b352 <_strtod_l+0x992>
 800b41e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b422:	9b08      	ldr	r3, [sp, #32]
 800b424:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d1c1      	bne.n	800b3b0 <_strtod_l+0x9f0>
 800b42c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b430:	0d1b      	lsrs	r3, r3, #20
 800b432:	051b      	lsls	r3, r3, #20
 800b434:	429d      	cmp	r5, r3
 800b436:	d1bb      	bne.n	800b3b0 <_strtod_l+0x9f0>
 800b438:	4630      	mov	r0, r6
 800b43a:	4639      	mov	r1, r7
 800b43c:	f7f5 fbee 	bl	8000c1c <__aeabi_d2lz>
 800b440:	f7f5 f8c4 	bl	80005cc <__aeabi_l2d>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	4630      	mov	r0, r6
 800b44a:	4639      	mov	r1, r7
 800b44c:	f7f4 ff34 	bl	80002b8 <__aeabi_dsub>
 800b450:	460b      	mov	r3, r1
 800b452:	4602      	mov	r2, r0
 800b454:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b458:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b45c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b45e:	ea46 060a 	orr.w	r6, r6, sl
 800b462:	431e      	orrs	r6, r3
 800b464:	d06f      	beq.n	800b546 <_strtod_l+0xb86>
 800b466:	a30e      	add	r3, pc, #56	@ (adr r3, 800b4a0 <_strtod_l+0xae0>)
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	f7f5 fb4e 	bl	8000b0c <__aeabi_dcmplt>
 800b470:	2800      	cmp	r0, #0
 800b472:	f47f accf 	bne.w	800ae14 <_strtod_l+0x454>
 800b476:	a30c      	add	r3, pc, #48	@ (adr r3, 800b4a8 <_strtod_l+0xae8>)
 800b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b480:	f7f5 fb62 	bl	8000b48 <__aeabi_dcmpgt>
 800b484:	2800      	cmp	r0, #0
 800b486:	d093      	beq.n	800b3b0 <_strtod_l+0x9f0>
 800b488:	e4c4      	b.n	800ae14 <_strtod_l+0x454>
 800b48a:	bf00      	nop
 800b48c:	f3af 8000 	nop.w
 800b490:	00000000 	.word	0x00000000
 800b494:	bff00000 	.word	0xbff00000
 800b498:	00000000 	.word	0x00000000
 800b49c:	3ff00000 	.word	0x3ff00000
 800b4a0:	94a03595 	.word	0x94a03595
 800b4a4:	3fdfffff 	.word	0x3fdfffff
 800b4a8:	35afe535 	.word	0x35afe535
 800b4ac:	3fe00000 	.word	0x3fe00000
 800b4b0:	000fffff 	.word	0x000fffff
 800b4b4:	7ff00000 	.word	0x7ff00000
 800b4b8:	7fefffff 	.word	0x7fefffff
 800b4bc:	3ff00000 	.word	0x3ff00000
 800b4c0:	3fe00000 	.word	0x3fe00000
 800b4c4:	7fe00000 	.word	0x7fe00000
 800b4c8:	7c9fffff 	.word	0x7c9fffff
 800b4cc:	9b08      	ldr	r3, [sp, #32]
 800b4ce:	b323      	cbz	r3, 800b51a <_strtod_l+0xb5a>
 800b4d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b4d4:	d821      	bhi.n	800b51a <_strtod_l+0xb5a>
 800b4d6:	a328      	add	r3, pc, #160	@ (adr r3, 800b578 <_strtod_l+0xbb8>)
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	4630      	mov	r0, r6
 800b4de:	4639      	mov	r1, r7
 800b4e0:	f7f5 fb1e 	bl	8000b20 <__aeabi_dcmple>
 800b4e4:	b1a0      	cbz	r0, 800b510 <_strtod_l+0xb50>
 800b4e6:	4639      	mov	r1, r7
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	f7f5 fb5f 	bl	8000bac <__aeabi_d2uiz>
 800b4ee:	2801      	cmp	r0, #1
 800b4f0:	bf38      	it	cc
 800b4f2:	2001      	movcc	r0, #1
 800b4f4:	f7f5 f81e 	bl	8000534 <__aeabi_ui2d>
 800b4f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	460f      	mov	r7, r1
 800b4fe:	b9fb      	cbnz	r3, 800b540 <_strtod_l+0xb80>
 800b500:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b504:	9014      	str	r0, [sp, #80]	@ 0x50
 800b506:	9315      	str	r3, [sp, #84]	@ 0x54
 800b508:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b50c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b510:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b512:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b516:	1b5b      	subs	r3, r3, r5
 800b518:	9311      	str	r3, [sp, #68]	@ 0x44
 800b51a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b51e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b522:	f001 f947 	bl	800c7b4 <__ulp>
 800b526:	4650      	mov	r0, sl
 800b528:	ec53 2b10 	vmov	r2, r3, d0
 800b52c:	4659      	mov	r1, fp
 800b52e:	f7f5 f87b 	bl	8000628 <__aeabi_dmul>
 800b532:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b536:	f7f4 fec1 	bl	80002bc <__adddf3>
 800b53a:	4682      	mov	sl, r0
 800b53c:	468b      	mov	fp, r1
 800b53e:	e770      	b.n	800b422 <_strtod_l+0xa62>
 800b540:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b544:	e7e0      	b.n	800b508 <_strtod_l+0xb48>
 800b546:	a30e      	add	r3, pc, #56	@ (adr r3, 800b580 <_strtod_l+0xbc0>)
 800b548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54c:	f7f5 fade 	bl	8000b0c <__aeabi_dcmplt>
 800b550:	e798      	b.n	800b484 <_strtod_l+0xac4>
 800b552:	2300      	movs	r3, #0
 800b554:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b556:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b558:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b55a:	6013      	str	r3, [r2, #0]
 800b55c:	f7ff ba6d 	b.w	800aa3a <_strtod_l+0x7a>
 800b560:	2a65      	cmp	r2, #101	@ 0x65
 800b562:	f43f ab66 	beq.w	800ac32 <_strtod_l+0x272>
 800b566:	2a45      	cmp	r2, #69	@ 0x45
 800b568:	f43f ab63 	beq.w	800ac32 <_strtod_l+0x272>
 800b56c:	2301      	movs	r3, #1
 800b56e:	f7ff bb9e 	b.w	800acae <_strtod_l+0x2ee>
 800b572:	bf00      	nop
 800b574:	f3af 8000 	nop.w
 800b578:	ffc00000 	.word	0xffc00000
 800b57c:	41dfffff 	.word	0x41dfffff
 800b580:	94a03595 	.word	0x94a03595
 800b584:	3fcfffff 	.word	0x3fcfffff

0800b588 <strtod>:
 800b588:	460a      	mov	r2, r1
 800b58a:	4601      	mov	r1, r0
 800b58c:	4802      	ldr	r0, [pc, #8]	@ (800b598 <strtod+0x10>)
 800b58e:	4b03      	ldr	r3, [pc, #12]	@ (800b59c <strtod+0x14>)
 800b590:	6800      	ldr	r0, [r0, #0]
 800b592:	f7ff ba15 	b.w	800a9c0 <_strtod_l>
 800b596:	bf00      	nop
 800b598:	20000280 	.word	0x20000280
 800b59c:	20000114 	.word	0x20000114

0800b5a0 <std>:
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	b510      	push	{r4, lr}
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b5aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5ae:	6083      	str	r3, [r0, #8]
 800b5b0:	8181      	strh	r1, [r0, #12]
 800b5b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b5b4:	81c2      	strh	r2, [r0, #14]
 800b5b6:	6183      	str	r3, [r0, #24]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	2208      	movs	r2, #8
 800b5bc:	305c      	adds	r0, #92	@ 0x5c
 800b5be:	f000 f93a 	bl	800b836 <memset>
 800b5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b5f8 <std+0x58>)
 800b5c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b5fc <std+0x5c>)
 800b5c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b600 <std+0x60>)
 800b5cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b5ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b604 <std+0x64>)
 800b5d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b5d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b608 <std+0x68>)
 800b5d4:	6224      	str	r4, [r4, #32]
 800b5d6:	429c      	cmp	r4, r3
 800b5d8:	d006      	beq.n	800b5e8 <std+0x48>
 800b5da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b5de:	4294      	cmp	r4, r2
 800b5e0:	d002      	beq.n	800b5e8 <std+0x48>
 800b5e2:	33d0      	adds	r3, #208	@ 0xd0
 800b5e4:	429c      	cmp	r4, r3
 800b5e6:	d105      	bne.n	800b5f4 <std+0x54>
 800b5e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5f0:	f000 b9bc 	b.w	800b96c <__retarget_lock_init_recursive>
 800b5f4:	bd10      	pop	{r4, pc}
 800b5f6:	bf00      	nop
 800b5f8:	0800b7b1 	.word	0x0800b7b1
 800b5fc:	0800b7d3 	.word	0x0800b7d3
 800b600:	0800b80b 	.word	0x0800b80b
 800b604:	0800b82f 	.word	0x0800b82f
 800b608:	20002808 	.word	0x20002808

0800b60c <stdio_exit_handler>:
 800b60c:	4a02      	ldr	r2, [pc, #8]	@ (800b618 <stdio_exit_handler+0xc>)
 800b60e:	4903      	ldr	r1, [pc, #12]	@ (800b61c <stdio_exit_handler+0x10>)
 800b610:	4803      	ldr	r0, [pc, #12]	@ (800b620 <stdio_exit_handler+0x14>)
 800b612:	f000 b869 	b.w	800b6e8 <_fwalk_sglue>
 800b616:	bf00      	nop
 800b618:	20000108 	.word	0x20000108
 800b61c:	0800d3b1 	.word	0x0800d3b1
 800b620:	20000284 	.word	0x20000284

0800b624 <cleanup_stdio>:
 800b624:	6841      	ldr	r1, [r0, #4]
 800b626:	4b0c      	ldr	r3, [pc, #48]	@ (800b658 <cleanup_stdio+0x34>)
 800b628:	4299      	cmp	r1, r3
 800b62a:	b510      	push	{r4, lr}
 800b62c:	4604      	mov	r4, r0
 800b62e:	d001      	beq.n	800b634 <cleanup_stdio+0x10>
 800b630:	f001 febe 	bl	800d3b0 <_fflush_r>
 800b634:	68a1      	ldr	r1, [r4, #8]
 800b636:	4b09      	ldr	r3, [pc, #36]	@ (800b65c <cleanup_stdio+0x38>)
 800b638:	4299      	cmp	r1, r3
 800b63a:	d002      	beq.n	800b642 <cleanup_stdio+0x1e>
 800b63c:	4620      	mov	r0, r4
 800b63e:	f001 feb7 	bl	800d3b0 <_fflush_r>
 800b642:	68e1      	ldr	r1, [r4, #12]
 800b644:	4b06      	ldr	r3, [pc, #24]	@ (800b660 <cleanup_stdio+0x3c>)
 800b646:	4299      	cmp	r1, r3
 800b648:	d004      	beq.n	800b654 <cleanup_stdio+0x30>
 800b64a:	4620      	mov	r0, r4
 800b64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b650:	f001 beae 	b.w	800d3b0 <_fflush_r>
 800b654:	bd10      	pop	{r4, pc}
 800b656:	bf00      	nop
 800b658:	20002808 	.word	0x20002808
 800b65c:	20002870 	.word	0x20002870
 800b660:	200028d8 	.word	0x200028d8

0800b664 <global_stdio_init.part.0>:
 800b664:	b510      	push	{r4, lr}
 800b666:	4b0b      	ldr	r3, [pc, #44]	@ (800b694 <global_stdio_init.part.0+0x30>)
 800b668:	4c0b      	ldr	r4, [pc, #44]	@ (800b698 <global_stdio_init.part.0+0x34>)
 800b66a:	4a0c      	ldr	r2, [pc, #48]	@ (800b69c <global_stdio_init.part.0+0x38>)
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	4620      	mov	r0, r4
 800b670:	2200      	movs	r2, #0
 800b672:	2104      	movs	r1, #4
 800b674:	f7ff ff94 	bl	800b5a0 <std>
 800b678:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b67c:	2201      	movs	r2, #1
 800b67e:	2109      	movs	r1, #9
 800b680:	f7ff ff8e 	bl	800b5a0 <std>
 800b684:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b688:	2202      	movs	r2, #2
 800b68a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b68e:	2112      	movs	r1, #18
 800b690:	f7ff bf86 	b.w	800b5a0 <std>
 800b694:	20002940 	.word	0x20002940
 800b698:	20002808 	.word	0x20002808
 800b69c:	0800b60d 	.word	0x0800b60d

0800b6a0 <__sfp_lock_acquire>:
 800b6a0:	4801      	ldr	r0, [pc, #4]	@ (800b6a8 <__sfp_lock_acquire+0x8>)
 800b6a2:	f000 b964 	b.w	800b96e <__retarget_lock_acquire_recursive>
 800b6a6:	bf00      	nop
 800b6a8:	20002949 	.word	0x20002949

0800b6ac <__sfp_lock_release>:
 800b6ac:	4801      	ldr	r0, [pc, #4]	@ (800b6b4 <__sfp_lock_release+0x8>)
 800b6ae:	f000 b95f 	b.w	800b970 <__retarget_lock_release_recursive>
 800b6b2:	bf00      	nop
 800b6b4:	20002949 	.word	0x20002949

0800b6b8 <__sinit>:
 800b6b8:	b510      	push	{r4, lr}
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	f7ff fff0 	bl	800b6a0 <__sfp_lock_acquire>
 800b6c0:	6a23      	ldr	r3, [r4, #32]
 800b6c2:	b11b      	cbz	r3, 800b6cc <__sinit+0x14>
 800b6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6c8:	f7ff bff0 	b.w	800b6ac <__sfp_lock_release>
 800b6cc:	4b04      	ldr	r3, [pc, #16]	@ (800b6e0 <__sinit+0x28>)
 800b6ce:	6223      	str	r3, [r4, #32]
 800b6d0:	4b04      	ldr	r3, [pc, #16]	@ (800b6e4 <__sinit+0x2c>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1f5      	bne.n	800b6c4 <__sinit+0xc>
 800b6d8:	f7ff ffc4 	bl	800b664 <global_stdio_init.part.0>
 800b6dc:	e7f2      	b.n	800b6c4 <__sinit+0xc>
 800b6de:	bf00      	nop
 800b6e0:	0800b625 	.word	0x0800b625
 800b6e4:	20002940 	.word	0x20002940

0800b6e8 <_fwalk_sglue>:
 800b6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6ec:	4607      	mov	r7, r0
 800b6ee:	4688      	mov	r8, r1
 800b6f0:	4614      	mov	r4, r2
 800b6f2:	2600      	movs	r6, #0
 800b6f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6f8:	f1b9 0901 	subs.w	r9, r9, #1
 800b6fc:	d505      	bpl.n	800b70a <_fwalk_sglue+0x22>
 800b6fe:	6824      	ldr	r4, [r4, #0]
 800b700:	2c00      	cmp	r4, #0
 800b702:	d1f7      	bne.n	800b6f4 <_fwalk_sglue+0xc>
 800b704:	4630      	mov	r0, r6
 800b706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b70a:	89ab      	ldrh	r3, [r5, #12]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d907      	bls.n	800b720 <_fwalk_sglue+0x38>
 800b710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b714:	3301      	adds	r3, #1
 800b716:	d003      	beq.n	800b720 <_fwalk_sglue+0x38>
 800b718:	4629      	mov	r1, r5
 800b71a:	4638      	mov	r0, r7
 800b71c:	47c0      	blx	r8
 800b71e:	4306      	orrs	r6, r0
 800b720:	3568      	adds	r5, #104	@ 0x68
 800b722:	e7e9      	b.n	800b6f8 <_fwalk_sglue+0x10>

0800b724 <iprintf>:
 800b724:	b40f      	push	{r0, r1, r2, r3}
 800b726:	b507      	push	{r0, r1, r2, lr}
 800b728:	4906      	ldr	r1, [pc, #24]	@ (800b744 <iprintf+0x20>)
 800b72a:	ab04      	add	r3, sp, #16
 800b72c:	6808      	ldr	r0, [r1, #0]
 800b72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b732:	6881      	ldr	r1, [r0, #8]
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	f001 fb11 	bl	800cd5c <_vfiprintf_r>
 800b73a:	b003      	add	sp, #12
 800b73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b740:	b004      	add	sp, #16
 800b742:	4770      	bx	lr
 800b744:	20000280 	.word	0x20000280

0800b748 <sniprintf>:
 800b748:	b40c      	push	{r2, r3}
 800b74a:	b530      	push	{r4, r5, lr}
 800b74c:	4b17      	ldr	r3, [pc, #92]	@ (800b7ac <sniprintf+0x64>)
 800b74e:	1e0c      	subs	r4, r1, #0
 800b750:	681d      	ldr	r5, [r3, #0]
 800b752:	b09d      	sub	sp, #116	@ 0x74
 800b754:	da08      	bge.n	800b768 <sniprintf+0x20>
 800b756:	238b      	movs	r3, #139	@ 0x8b
 800b758:	602b      	str	r3, [r5, #0]
 800b75a:	f04f 30ff 	mov.w	r0, #4294967295
 800b75e:	b01d      	add	sp, #116	@ 0x74
 800b760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b764:	b002      	add	sp, #8
 800b766:	4770      	bx	lr
 800b768:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b76c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b770:	bf14      	ite	ne
 800b772:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b776:	4623      	moveq	r3, r4
 800b778:	9304      	str	r3, [sp, #16]
 800b77a:	9307      	str	r3, [sp, #28]
 800b77c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b780:	9002      	str	r0, [sp, #8]
 800b782:	9006      	str	r0, [sp, #24]
 800b784:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b788:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b78a:	ab21      	add	r3, sp, #132	@ 0x84
 800b78c:	a902      	add	r1, sp, #8
 800b78e:	4628      	mov	r0, r5
 800b790:	9301      	str	r3, [sp, #4]
 800b792:	f001 f9bd 	bl	800cb10 <_svfiprintf_r>
 800b796:	1c43      	adds	r3, r0, #1
 800b798:	bfbc      	itt	lt
 800b79a:	238b      	movlt	r3, #139	@ 0x8b
 800b79c:	602b      	strlt	r3, [r5, #0]
 800b79e:	2c00      	cmp	r4, #0
 800b7a0:	d0dd      	beq.n	800b75e <sniprintf+0x16>
 800b7a2:	9b02      	ldr	r3, [sp, #8]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	701a      	strb	r2, [r3, #0]
 800b7a8:	e7d9      	b.n	800b75e <sniprintf+0x16>
 800b7aa:	bf00      	nop
 800b7ac:	20000280 	.word	0x20000280

0800b7b0 <__sread>:
 800b7b0:	b510      	push	{r4, lr}
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b8:	f000 f87a 	bl	800b8b0 <_read_r>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	bfab      	itete	ge
 800b7c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b7c2:	89a3      	ldrhlt	r3, [r4, #12]
 800b7c4:	181b      	addge	r3, r3, r0
 800b7c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b7ca:	bfac      	ite	ge
 800b7cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b7ce:	81a3      	strhlt	r3, [r4, #12]
 800b7d0:	bd10      	pop	{r4, pc}

0800b7d2 <__swrite>:
 800b7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d6:	461f      	mov	r7, r3
 800b7d8:	898b      	ldrh	r3, [r1, #12]
 800b7da:	05db      	lsls	r3, r3, #23
 800b7dc:	4605      	mov	r5, r0
 800b7de:	460c      	mov	r4, r1
 800b7e0:	4616      	mov	r6, r2
 800b7e2:	d505      	bpl.n	800b7f0 <__swrite+0x1e>
 800b7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f000 f84e 	bl	800b88c <_lseek_r>
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7fa:	81a3      	strh	r3, [r4, #12]
 800b7fc:	4632      	mov	r2, r6
 800b7fe:	463b      	mov	r3, r7
 800b800:	4628      	mov	r0, r5
 800b802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b806:	f000 b875 	b.w	800b8f4 <_write_r>

0800b80a <__sseek>:
 800b80a:	b510      	push	{r4, lr}
 800b80c:	460c      	mov	r4, r1
 800b80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b812:	f000 f83b 	bl	800b88c <_lseek_r>
 800b816:	1c43      	adds	r3, r0, #1
 800b818:	89a3      	ldrh	r3, [r4, #12]
 800b81a:	bf15      	itete	ne
 800b81c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b81e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b822:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b826:	81a3      	strheq	r3, [r4, #12]
 800b828:	bf18      	it	ne
 800b82a:	81a3      	strhne	r3, [r4, #12]
 800b82c:	bd10      	pop	{r4, pc}

0800b82e <__sclose>:
 800b82e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b832:	f000 b81b 	b.w	800b86c <_close_r>

0800b836 <memset>:
 800b836:	4402      	add	r2, r0
 800b838:	4603      	mov	r3, r0
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d100      	bne.n	800b840 <memset+0xa>
 800b83e:	4770      	bx	lr
 800b840:	f803 1b01 	strb.w	r1, [r3], #1
 800b844:	e7f9      	b.n	800b83a <memset+0x4>

0800b846 <strncmp>:
 800b846:	b510      	push	{r4, lr}
 800b848:	b16a      	cbz	r2, 800b866 <strncmp+0x20>
 800b84a:	3901      	subs	r1, #1
 800b84c:	1884      	adds	r4, r0, r2
 800b84e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b852:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b856:	429a      	cmp	r2, r3
 800b858:	d103      	bne.n	800b862 <strncmp+0x1c>
 800b85a:	42a0      	cmp	r0, r4
 800b85c:	d001      	beq.n	800b862 <strncmp+0x1c>
 800b85e:	2a00      	cmp	r2, #0
 800b860:	d1f5      	bne.n	800b84e <strncmp+0x8>
 800b862:	1ad0      	subs	r0, r2, r3
 800b864:	bd10      	pop	{r4, pc}
 800b866:	4610      	mov	r0, r2
 800b868:	e7fc      	b.n	800b864 <strncmp+0x1e>
	...

0800b86c <_close_r>:
 800b86c:	b538      	push	{r3, r4, r5, lr}
 800b86e:	4d06      	ldr	r5, [pc, #24]	@ (800b888 <_close_r+0x1c>)
 800b870:	2300      	movs	r3, #0
 800b872:	4604      	mov	r4, r0
 800b874:	4608      	mov	r0, r1
 800b876:	602b      	str	r3, [r5, #0]
 800b878:	f7f7 fb52 	bl	8002f20 <_close>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	d102      	bne.n	800b886 <_close_r+0x1a>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	b103      	cbz	r3, 800b886 <_close_r+0x1a>
 800b884:	6023      	str	r3, [r4, #0]
 800b886:	bd38      	pop	{r3, r4, r5, pc}
 800b888:	20002944 	.word	0x20002944

0800b88c <_lseek_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4d07      	ldr	r5, [pc, #28]	@ (800b8ac <_lseek_r+0x20>)
 800b890:	4604      	mov	r4, r0
 800b892:	4608      	mov	r0, r1
 800b894:	4611      	mov	r1, r2
 800b896:	2200      	movs	r2, #0
 800b898:	602a      	str	r2, [r5, #0]
 800b89a:	461a      	mov	r2, r3
 800b89c:	f7f7 fb67 	bl	8002f6e <_lseek>
 800b8a0:	1c43      	adds	r3, r0, #1
 800b8a2:	d102      	bne.n	800b8aa <_lseek_r+0x1e>
 800b8a4:	682b      	ldr	r3, [r5, #0]
 800b8a6:	b103      	cbz	r3, 800b8aa <_lseek_r+0x1e>
 800b8a8:	6023      	str	r3, [r4, #0]
 800b8aa:	bd38      	pop	{r3, r4, r5, pc}
 800b8ac:	20002944 	.word	0x20002944

0800b8b0 <_read_r>:
 800b8b0:	b538      	push	{r3, r4, r5, lr}
 800b8b2:	4d07      	ldr	r5, [pc, #28]	@ (800b8d0 <_read_r+0x20>)
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	4608      	mov	r0, r1
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	602a      	str	r2, [r5, #0]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	f7f7 fb11 	bl	8002ee6 <_read>
 800b8c4:	1c43      	adds	r3, r0, #1
 800b8c6:	d102      	bne.n	800b8ce <_read_r+0x1e>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	b103      	cbz	r3, 800b8ce <_read_r+0x1e>
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}
 800b8d0:	20002944 	.word	0x20002944

0800b8d4 <_sbrk_r>:
 800b8d4:	b538      	push	{r3, r4, r5, lr}
 800b8d6:	4d06      	ldr	r5, [pc, #24]	@ (800b8f0 <_sbrk_r+0x1c>)
 800b8d8:	2300      	movs	r3, #0
 800b8da:	4604      	mov	r4, r0
 800b8dc:	4608      	mov	r0, r1
 800b8de:	602b      	str	r3, [r5, #0]
 800b8e0:	f7f7 fb52 	bl	8002f88 <_sbrk>
 800b8e4:	1c43      	adds	r3, r0, #1
 800b8e6:	d102      	bne.n	800b8ee <_sbrk_r+0x1a>
 800b8e8:	682b      	ldr	r3, [r5, #0]
 800b8ea:	b103      	cbz	r3, 800b8ee <_sbrk_r+0x1a>
 800b8ec:	6023      	str	r3, [r4, #0]
 800b8ee:	bd38      	pop	{r3, r4, r5, pc}
 800b8f0:	20002944 	.word	0x20002944

0800b8f4 <_write_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4d07      	ldr	r5, [pc, #28]	@ (800b914 <_write_r+0x20>)
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	4608      	mov	r0, r1
 800b8fc:	4611      	mov	r1, r2
 800b8fe:	2200      	movs	r2, #0
 800b900:	602a      	str	r2, [r5, #0]
 800b902:	461a      	mov	r2, r3
 800b904:	f7f6 fef7 	bl	80026f6 <_write>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	d102      	bne.n	800b912 <_write_r+0x1e>
 800b90c:	682b      	ldr	r3, [r5, #0]
 800b90e:	b103      	cbz	r3, 800b912 <_write_r+0x1e>
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	20002944 	.word	0x20002944

0800b918 <__errno>:
 800b918:	4b01      	ldr	r3, [pc, #4]	@ (800b920 <__errno+0x8>)
 800b91a:	6818      	ldr	r0, [r3, #0]
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	20000280 	.word	0x20000280

0800b924 <__libc_init_array>:
 800b924:	b570      	push	{r4, r5, r6, lr}
 800b926:	4d0d      	ldr	r5, [pc, #52]	@ (800b95c <__libc_init_array+0x38>)
 800b928:	4c0d      	ldr	r4, [pc, #52]	@ (800b960 <__libc_init_array+0x3c>)
 800b92a:	1b64      	subs	r4, r4, r5
 800b92c:	10a4      	asrs	r4, r4, #2
 800b92e:	2600      	movs	r6, #0
 800b930:	42a6      	cmp	r6, r4
 800b932:	d109      	bne.n	800b948 <__libc_init_array+0x24>
 800b934:	4d0b      	ldr	r5, [pc, #44]	@ (800b964 <__libc_init_array+0x40>)
 800b936:	4c0c      	ldr	r4, [pc, #48]	@ (800b968 <__libc_init_array+0x44>)
 800b938:	f001 ff24 	bl	800d784 <_init>
 800b93c:	1b64      	subs	r4, r4, r5
 800b93e:	10a4      	asrs	r4, r4, #2
 800b940:	2600      	movs	r6, #0
 800b942:	42a6      	cmp	r6, r4
 800b944:	d105      	bne.n	800b952 <__libc_init_array+0x2e>
 800b946:	bd70      	pop	{r4, r5, r6, pc}
 800b948:	f855 3b04 	ldr.w	r3, [r5], #4
 800b94c:	4798      	blx	r3
 800b94e:	3601      	adds	r6, #1
 800b950:	e7ee      	b.n	800b930 <__libc_init_array+0xc>
 800b952:	f855 3b04 	ldr.w	r3, [r5], #4
 800b956:	4798      	blx	r3
 800b958:	3601      	adds	r6, #1
 800b95a:	e7f2      	b.n	800b942 <__libc_init_array+0x1e>
 800b95c:	0800dce0 	.word	0x0800dce0
 800b960:	0800dce0 	.word	0x0800dce0
 800b964:	0800dce0 	.word	0x0800dce0
 800b968:	0800dce4 	.word	0x0800dce4

0800b96c <__retarget_lock_init_recursive>:
 800b96c:	4770      	bx	lr

0800b96e <__retarget_lock_acquire_recursive>:
 800b96e:	4770      	bx	lr

0800b970 <__retarget_lock_release_recursive>:
 800b970:	4770      	bx	lr

0800b972 <memcpy>:
 800b972:	440a      	add	r2, r1
 800b974:	4291      	cmp	r1, r2
 800b976:	f100 33ff 	add.w	r3, r0, #4294967295
 800b97a:	d100      	bne.n	800b97e <memcpy+0xc>
 800b97c:	4770      	bx	lr
 800b97e:	b510      	push	{r4, lr}
 800b980:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b984:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b988:	4291      	cmp	r1, r2
 800b98a:	d1f9      	bne.n	800b980 <memcpy+0xe>
 800b98c:	bd10      	pop	{r4, pc}
	...

0800b990 <nan>:
 800b990:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b998 <nan+0x8>
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	00000000 	.word	0x00000000
 800b99c:	7ff80000 	.word	0x7ff80000

0800b9a0 <_free_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	2900      	cmp	r1, #0
 800b9a6:	d041      	beq.n	800ba2c <_free_r+0x8c>
 800b9a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ac:	1f0c      	subs	r4, r1, #4
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	bfb8      	it	lt
 800b9b2:	18e4      	addlt	r4, r4, r3
 800b9b4:	f7fe ffa4 	bl	800a900 <__malloc_lock>
 800b9b8:	4a1d      	ldr	r2, [pc, #116]	@ (800ba30 <_free_r+0x90>)
 800b9ba:	6813      	ldr	r3, [r2, #0]
 800b9bc:	b933      	cbnz	r3, 800b9cc <_free_r+0x2c>
 800b9be:	6063      	str	r3, [r4, #4]
 800b9c0:	6014      	str	r4, [r2, #0]
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9c8:	f7fe bfa0 	b.w	800a90c <__malloc_unlock>
 800b9cc:	42a3      	cmp	r3, r4
 800b9ce:	d908      	bls.n	800b9e2 <_free_r+0x42>
 800b9d0:	6820      	ldr	r0, [r4, #0]
 800b9d2:	1821      	adds	r1, r4, r0
 800b9d4:	428b      	cmp	r3, r1
 800b9d6:	bf01      	itttt	eq
 800b9d8:	6819      	ldreq	r1, [r3, #0]
 800b9da:	685b      	ldreq	r3, [r3, #4]
 800b9dc:	1809      	addeq	r1, r1, r0
 800b9de:	6021      	streq	r1, [r4, #0]
 800b9e0:	e7ed      	b.n	800b9be <_free_r+0x1e>
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	b10b      	cbz	r3, 800b9ec <_free_r+0x4c>
 800b9e8:	42a3      	cmp	r3, r4
 800b9ea:	d9fa      	bls.n	800b9e2 <_free_r+0x42>
 800b9ec:	6811      	ldr	r1, [r2, #0]
 800b9ee:	1850      	adds	r0, r2, r1
 800b9f0:	42a0      	cmp	r0, r4
 800b9f2:	d10b      	bne.n	800ba0c <_free_r+0x6c>
 800b9f4:	6820      	ldr	r0, [r4, #0]
 800b9f6:	4401      	add	r1, r0
 800b9f8:	1850      	adds	r0, r2, r1
 800b9fa:	4283      	cmp	r3, r0
 800b9fc:	6011      	str	r1, [r2, #0]
 800b9fe:	d1e0      	bne.n	800b9c2 <_free_r+0x22>
 800ba00:	6818      	ldr	r0, [r3, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	6053      	str	r3, [r2, #4]
 800ba06:	4408      	add	r0, r1
 800ba08:	6010      	str	r0, [r2, #0]
 800ba0a:	e7da      	b.n	800b9c2 <_free_r+0x22>
 800ba0c:	d902      	bls.n	800ba14 <_free_r+0x74>
 800ba0e:	230c      	movs	r3, #12
 800ba10:	602b      	str	r3, [r5, #0]
 800ba12:	e7d6      	b.n	800b9c2 <_free_r+0x22>
 800ba14:	6820      	ldr	r0, [r4, #0]
 800ba16:	1821      	adds	r1, r4, r0
 800ba18:	428b      	cmp	r3, r1
 800ba1a:	bf04      	itt	eq
 800ba1c:	6819      	ldreq	r1, [r3, #0]
 800ba1e:	685b      	ldreq	r3, [r3, #4]
 800ba20:	6063      	str	r3, [r4, #4]
 800ba22:	bf04      	itt	eq
 800ba24:	1809      	addeq	r1, r1, r0
 800ba26:	6021      	streq	r1, [r4, #0]
 800ba28:	6054      	str	r4, [r2, #4]
 800ba2a:	e7ca      	b.n	800b9c2 <_free_r+0x22>
 800ba2c:	bd38      	pop	{r3, r4, r5, pc}
 800ba2e:	bf00      	nop
 800ba30:	20002804 	.word	0x20002804

0800ba34 <rshift>:
 800ba34:	6903      	ldr	r3, [r0, #16]
 800ba36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba42:	f100 0414 	add.w	r4, r0, #20
 800ba46:	dd45      	ble.n	800bad4 <rshift+0xa0>
 800ba48:	f011 011f 	ands.w	r1, r1, #31
 800ba4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba54:	d10c      	bne.n	800ba70 <rshift+0x3c>
 800ba56:	f100 0710 	add.w	r7, r0, #16
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	42b1      	cmp	r1, r6
 800ba5e:	d334      	bcc.n	800baca <rshift+0x96>
 800ba60:	1a9b      	subs	r3, r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	1eea      	subs	r2, r5, #3
 800ba66:	4296      	cmp	r6, r2
 800ba68:	bf38      	it	cc
 800ba6a:	2300      	movcc	r3, #0
 800ba6c:	4423      	add	r3, r4
 800ba6e:	e015      	b.n	800ba9c <rshift+0x68>
 800ba70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba74:	f1c1 0820 	rsb	r8, r1, #32
 800ba78:	40cf      	lsrs	r7, r1
 800ba7a:	f105 0e04 	add.w	lr, r5, #4
 800ba7e:	46a1      	mov	r9, r4
 800ba80:	4576      	cmp	r6, lr
 800ba82:	46f4      	mov	ip, lr
 800ba84:	d815      	bhi.n	800bab2 <rshift+0x7e>
 800ba86:	1a9a      	subs	r2, r3, r2
 800ba88:	0092      	lsls	r2, r2, #2
 800ba8a:	3a04      	subs	r2, #4
 800ba8c:	3501      	adds	r5, #1
 800ba8e:	42ae      	cmp	r6, r5
 800ba90:	bf38      	it	cc
 800ba92:	2200      	movcc	r2, #0
 800ba94:	18a3      	adds	r3, r4, r2
 800ba96:	50a7      	str	r7, [r4, r2]
 800ba98:	b107      	cbz	r7, 800ba9c <rshift+0x68>
 800ba9a:	3304      	adds	r3, #4
 800ba9c:	1b1a      	subs	r2, r3, r4
 800ba9e:	42a3      	cmp	r3, r4
 800baa0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800baa4:	bf08      	it	eq
 800baa6:	2300      	moveq	r3, #0
 800baa8:	6102      	str	r2, [r0, #16]
 800baaa:	bf08      	it	eq
 800baac:	6143      	streq	r3, [r0, #20]
 800baae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bab2:	f8dc c000 	ldr.w	ip, [ip]
 800bab6:	fa0c fc08 	lsl.w	ip, ip, r8
 800baba:	ea4c 0707 	orr.w	r7, ip, r7
 800babe:	f849 7b04 	str.w	r7, [r9], #4
 800bac2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bac6:	40cf      	lsrs	r7, r1
 800bac8:	e7da      	b.n	800ba80 <rshift+0x4c>
 800baca:	f851 cb04 	ldr.w	ip, [r1], #4
 800bace:	f847 cf04 	str.w	ip, [r7, #4]!
 800bad2:	e7c3      	b.n	800ba5c <rshift+0x28>
 800bad4:	4623      	mov	r3, r4
 800bad6:	e7e1      	b.n	800ba9c <rshift+0x68>

0800bad8 <__hexdig_fun>:
 800bad8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800badc:	2b09      	cmp	r3, #9
 800bade:	d802      	bhi.n	800bae6 <__hexdig_fun+0xe>
 800bae0:	3820      	subs	r0, #32
 800bae2:	b2c0      	uxtb	r0, r0
 800bae4:	4770      	bx	lr
 800bae6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800baea:	2b05      	cmp	r3, #5
 800baec:	d801      	bhi.n	800baf2 <__hexdig_fun+0x1a>
 800baee:	3847      	subs	r0, #71	@ 0x47
 800baf0:	e7f7      	b.n	800bae2 <__hexdig_fun+0xa>
 800baf2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800baf6:	2b05      	cmp	r3, #5
 800baf8:	d801      	bhi.n	800bafe <__hexdig_fun+0x26>
 800bafa:	3827      	subs	r0, #39	@ 0x27
 800bafc:	e7f1      	b.n	800bae2 <__hexdig_fun+0xa>
 800bafe:	2000      	movs	r0, #0
 800bb00:	4770      	bx	lr
	...

0800bb04 <__gethex>:
 800bb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb08:	b085      	sub	sp, #20
 800bb0a:	468a      	mov	sl, r1
 800bb0c:	9302      	str	r3, [sp, #8]
 800bb0e:	680b      	ldr	r3, [r1, #0]
 800bb10:	9001      	str	r0, [sp, #4]
 800bb12:	4690      	mov	r8, r2
 800bb14:	1c9c      	adds	r4, r3, #2
 800bb16:	46a1      	mov	r9, r4
 800bb18:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bb1c:	2830      	cmp	r0, #48	@ 0x30
 800bb1e:	d0fa      	beq.n	800bb16 <__gethex+0x12>
 800bb20:	eba9 0303 	sub.w	r3, r9, r3
 800bb24:	f1a3 0b02 	sub.w	fp, r3, #2
 800bb28:	f7ff ffd6 	bl	800bad8 <__hexdig_fun>
 800bb2c:	4605      	mov	r5, r0
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d168      	bne.n	800bc04 <__gethex+0x100>
 800bb32:	49a0      	ldr	r1, [pc, #640]	@ (800bdb4 <__gethex+0x2b0>)
 800bb34:	2201      	movs	r2, #1
 800bb36:	4648      	mov	r0, r9
 800bb38:	f7ff fe85 	bl	800b846 <strncmp>
 800bb3c:	4607      	mov	r7, r0
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d167      	bne.n	800bc12 <__gethex+0x10e>
 800bb42:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bb46:	4626      	mov	r6, r4
 800bb48:	f7ff ffc6 	bl	800bad8 <__hexdig_fun>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	d062      	beq.n	800bc16 <__gethex+0x112>
 800bb50:	4623      	mov	r3, r4
 800bb52:	7818      	ldrb	r0, [r3, #0]
 800bb54:	2830      	cmp	r0, #48	@ 0x30
 800bb56:	4699      	mov	r9, r3
 800bb58:	f103 0301 	add.w	r3, r3, #1
 800bb5c:	d0f9      	beq.n	800bb52 <__gethex+0x4e>
 800bb5e:	f7ff ffbb 	bl	800bad8 <__hexdig_fun>
 800bb62:	fab0 f580 	clz	r5, r0
 800bb66:	096d      	lsrs	r5, r5, #5
 800bb68:	f04f 0b01 	mov.w	fp, #1
 800bb6c:	464a      	mov	r2, r9
 800bb6e:	4616      	mov	r6, r2
 800bb70:	3201      	adds	r2, #1
 800bb72:	7830      	ldrb	r0, [r6, #0]
 800bb74:	f7ff ffb0 	bl	800bad8 <__hexdig_fun>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d1f8      	bne.n	800bb6e <__gethex+0x6a>
 800bb7c:	498d      	ldr	r1, [pc, #564]	@ (800bdb4 <__gethex+0x2b0>)
 800bb7e:	2201      	movs	r2, #1
 800bb80:	4630      	mov	r0, r6
 800bb82:	f7ff fe60 	bl	800b846 <strncmp>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	d13f      	bne.n	800bc0a <__gethex+0x106>
 800bb8a:	b944      	cbnz	r4, 800bb9e <__gethex+0x9a>
 800bb8c:	1c74      	adds	r4, r6, #1
 800bb8e:	4622      	mov	r2, r4
 800bb90:	4616      	mov	r6, r2
 800bb92:	3201      	adds	r2, #1
 800bb94:	7830      	ldrb	r0, [r6, #0]
 800bb96:	f7ff ff9f 	bl	800bad8 <__hexdig_fun>
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	d1f8      	bne.n	800bb90 <__gethex+0x8c>
 800bb9e:	1ba4      	subs	r4, r4, r6
 800bba0:	00a7      	lsls	r7, r4, #2
 800bba2:	7833      	ldrb	r3, [r6, #0]
 800bba4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bba8:	2b50      	cmp	r3, #80	@ 0x50
 800bbaa:	d13e      	bne.n	800bc2a <__gethex+0x126>
 800bbac:	7873      	ldrb	r3, [r6, #1]
 800bbae:	2b2b      	cmp	r3, #43	@ 0x2b
 800bbb0:	d033      	beq.n	800bc1a <__gethex+0x116>
 800bbb2:	2b2d      	cmp	r3, #45	@ 0x2d
 800bbb4:	d034      	beq.n	800bc20 <__gethex+0x11c>
 800bbb6:	1c71      	adds	r1, r6, #1
 800bbb8:	2400      	movs	r4, #0
 800bbba:	7808      	ldrb	r0, [r1, #0]
 800bbbc:	f7ff ff8c 	bl	800bad8 <__hexdig_fun>
 800bbc0:	1e43      	subs	r3, r0, #1
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b18      	cmp	r3, #24
 800bbc6:	d830      	bhi.n	800bc2a <__gethex+0x126>
 800bbc8:	f1a0 0210 	sub.w	r2, r0, #16
 800bbcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bbd0:	f7ff ff82 	bl	800bad8 <__hexdig_fun>
 800bbd4:	f100 3cff 	add.w	ip, r0, #4294967295
 800bbd8:	fa5f fc8c 	uxtb.w	ip, ip
 800bbdc:	f1bc 0f18 	cmp.w	ip, #24
 800bbe0:	f04f 030a 	mov.w	r3, #10
 800bbe4:	d91e      	bls.n	800bc24 <__gethex+0x120>
 800bbe6:	b104      	cbz	r4, 800bbea <__gethex+0xe6>
 800bbe8:	4252      	negs	r2, r2
 800bbea:	4417      	add	r7, r2
 800bbec:	f8ca 1000 	str.w	r1, [sl]
 800bbf0:	b1ed      	cbz	r5, 800bc2e <__gethex+0x12a>
 800bbf2:	f1bb 0f00 	cmp.w	fp, #0
 800bbf6:	bf0c      	ite	eq
 800bbf8:	2506      	moveq	r5, #6
 800bbfa:	2500      	movne	r5, #0
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	b005      	add	sp, #20
 800bc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc04:	2500      	movs	r5, #0
 800bc06:	462c      	mov	r4, r5
 800bc08:	e7b0      	b.n	800bb6c <__gethex+0x68>
 800bc0a:	2c00      	cmp	r4, #0
 800bc0c:	d1c7      	bne.n	800bb9e <__gethex+0x9a>
 800bc0e:	4627      	mov	r7, r4
 800bc10:	e7c7      	b.n	800bba2 <__gethex+0x9e>
 800bc12:	464e      	mov	r6, r9
 800bc14:	462f      	mov	r7, r5
 800bc16:	2501      	movs	r5, #1
 800bc18:	e7c3      	b.n	800bba2 <__gethex+0x9e>
 800bc1a:	2400      	movs	r4, #0
 800bc1c:	1cb1      	adds	r1, r6, #2
 800bc1e:	e7cc      	b.n	800bbba <__gethex+0xb6>
 800bc20:	2401      	movs	r4, #1
 800bc22:	e7fb      	b.n	800bc1c <__gethex+0x118>
 800bc24:	fb03 0002 	mla	r0, r3, r2, r0
 800bc28:	e7ce      	b.n	800bbc8 <__gethex+0xc4>
 800bc2a:	4631      	mov	r1, r6
 800bc2c:	e7de      	b.n	800bbec <__gethex+0xe8>
 800bc2e:	eba6 0309 	sub.w	r3, r6, r9
 800bc32:	3b01      	subs	r3, #1
 800bc34:	4629      	mov	r1, r5
 800bc36:	2b07      	cmp	r3, #7
 800bc38:	dc0a      	bgt.n	800bc50 <__gethex+0x14c>
 800bc3a:	9801      	ldr	r0, [sp, #4]
 800bc3c:	f000 fa46 	bl	800c0cc <_Balloc>
 800bc40:	4604      	mov	r4, r0
 800bc42:	b940      	cbnz	r0, 800bc56 <__gethex+0x152>
 800bc44:	4b5c      	ldr	r3, [pc, #368]	@ (800bdb8 <__gethex+0x2b4>)
 800bc46:	4602      	mov	r2, r0
 800bc48:	21e4      	movs	r1, #228	@ 0xe4
 800bc4a:	485c      	ldr	r0, [pc, #368]	@ (800bdbc <__gethex+0x2b8>)
 800bc4c:	f001 fc86 	bl	800d55c <__assert_func>
 800bc50:	3101      	adds	r1, #1
 800bc52:	105b      	asrs	r3, r3, #1
 800bc54:	e7ef      	b.n	800bc36 <__gethex+0x132>
 800bc56:	f100 0a14 	add.w	sl, r0, #20
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	4655      	mov	r5, sl
 800bc5e:	469b      	mov	fp, r3
 800bc60:	45b1      	cmp	r9, r6
 800bc62:	d337      	bcc.n	800bcd4 <__gethex+0x1d0>
 800bc64:	f845 bb04 	str.w	fp, [r5], #4
 800bc68:	eba5 050a 	sub.w	r5, r5, sl
 800bc6c:	10ad      	asrs	r5, r5, #2
 800bc6e:	6125      	str	r5, [r4, #16]
 800bc70:	4658      	mov	r0, fp
 800bc72:	f000 fb1d 	bl	800c2b0 <__hi0bits>
 800bc76:	016d      	lsls	r5, r5, #5
 800bc78:	f8d8 6000 	ldr.w	r6, [r8]
 800bc7c:	1a2d      	subs	r5, r5, r0
 800bc7e:	42b5      	cmp	r5, r6
 800bc80:	dd54      	ble.n	800bd2c <__gethex+0x228>
 800bc82:	1bad      	subs	r5, r5, r6
 800bc84:	4629      	mov	r1, r5
 800bc86:	4620      	mov	r0, r4
 800bc88:	f000 feb1 	bl	800c9ee <__any_on>
 800bc8c:	4681      	mov	r9, r0
 800bc8e:	b178      	cbz	r0, 800bcb0 <__gethex+0x1ac>
 800bc90:	1e6b      	subs	r3, r5, #1
 800bc92:	1159      	asrs	r1, r3, #5
 800bc94:	f003 021f 	and.w	r2, r3, #31
 800bc98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bc9c:	f04f 0901 	mov.w	r9, #1
 800bca0:	fa09 f202 	lsl.w	r2, r9, r2
 800bca4:	420a      	tst	r2, r1
 800bca6:	d003      	beq.n	800bcb0 <__gethex+0x1ac>
 800bca8:	454b      	cmp	r3, r9
 800bcaa:	dc36      	bgt.n	800bd1a <__gethex+0x216>
 800bcac:	f04f 0902 	mov.w	r9, #2
 800bcb0:	4629      	mov	r1, r5
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f7ff febe 	bl	800ba34 <rshift>
 800bcb8:	442f      	add	r7, r5
 800bcba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcbe:	42bb      	cmp	r3, r7
 800bcc0:	da42      	bge.n	800bd48 <__gethex+0x244>
 800bcc2:	9801      	ldr	r0, [sp, #4]
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	f000 fa41 	bl	800c14c <_Bfree>
 800bcca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bccc:	2300      	movs	r3, #0
 800bcce:	6013      	str	r3, [r2, #0]
 800bcd0:	25a3      	movs	r5, #163	@ 0xa3
 800bcd2:	e793      	b.n	800bbfc <__gethex+0xf8>
 800bcd4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bcd8:	2a2e      	cmp	r2, #46	@ 0x2e
 800bcda:	d012      	beq.n	800bd02 <__gethex+0x1fe>
 800bcdc:	2b20      	cmp	r3, #32
 800bcde:	d104      	bne.n	800bcea <__gethex+0x1e6>
 800bce0:	f845 bb04 	str.w	fp, [r5], #4
 800bce4:	f04f 0b00 	mov.w	fp, #0
 800bce8:	465b      	mov	r3, fp
 800bcea:	7830      	ldrb	r0, [r6, #0]
 800bcec:	9303      	str	r3, [sp, #12]
 800bcee:	f7ff fef3 	bl	800bad8 <__hexdig_fun>
 800bcf2:	9b03      	ldr	r3, [sp, #12]
 800bcf4:	f000 000f 	and.w	r0, r0, #15
 800bcf8:	4098      	lsls	r0, r3
 800bcfa:	ea4b 0b00 	orr.w	fp, fp, r0
 800bcfe:	3304      	adds	r3, #4
 800bd00:	e7ae      	b.n	800bc60 <__gethex+0x15c>
 800bd02:	45b1      	cmp	r9, r6
 800bd04:	d8ea      	bhi.n	800bcdc <__gethex+0x1d8>
 800bd06:	492b      	ldr	r1, [pc, #172]	@ (800bdb4 <__gethex+0x2b0>)
 800bd08:	9303      	str	r3, [sp, #12]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	f7ff fd9a 	bl	800b846 <strncmp>
 800bd12:	9b03      	ldr	r3, [sp, #12]
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d1e1      	bne.n	800bcdc <__gethex+0x1d8>
 800bd18:	e7a2      	b.n	800bc60 <__gethex+0x15c>
 800bd1a:	1ea9      	subs	r1, r5, #2
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f000 fe66 	bl	800c9ee <__any_on>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d0c2      	beq.n	800bcac <__gethex+0x1a8>
 800bd26:	f04f 0903 	mov.w	r9, #3
 800bd2a:	e7c1      	b.n	800bcb0 <__gethex+0x1ac>
 800bd2c:	da09      	bge.n	800bd42 <__gethex+0x23e>
 800bd2e:	1b75      	subs	r5, r6, r5
 800bd30:	4621      	mov	r1, r4
 800bd32:	9801      	ldr	r0, [sp, #4]
 800bd34:	462a      	mov	r2, r5
 800bd36:	f000 fc21 	bl	800c57c <__lshift>
 800bd3a:	1b7f      	subs	r7, r7, r5
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	f100 0a14 	add.w	sl, r0, #20
 800bd42:	f04f 0900 	mov.w	r9, #0
 800bd46:	e7b8      	b.n	800bcba <__gethex+0x1b6>
 800bd48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd4c:	42bd      	cmp	r5, r7
 800bd4e:	dd6f      	ble.n	800be30 <__gethex+0x32c>
 800bd50:	1bed      	subs	r5, r5, r7
 800bd52:	42ae      	cmp	r6, r5
 800bd54:	dc34      	bgt.n	800bdc0 <__gethex+0x2bc>
 800bd56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd5a:	2b02      	cmp	r3, #2
 800bd5c:	d022      	beq.n	800bda4 <__gethex+0x2a0>
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	d024      	beq.n	800bdac <__gethex+0x2a8>
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d115      	bne.n	800bd92 <__gethex+0x28e>
 800bd66:	42ae      	cmp	r6, r5
 800bd68:	d113      	bne.n	800bd92 <__gethex+0x28e>
 800bd6a:	2e01      	cmp	r6, #1
 800bd6c:	d10b      	bne.n	800bd86 <__gethex+0x282>
 800bd6e:	9a02      	ldr	r2, [sp, #8]
 800bd70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd74:	6013      	str	r3, [r2, #0]
 800bd76:	2301      	movs	r3, #1
 800bd78:	6123      	str	r3, [r4, #16]
 800bd7a:	f8ca 3000 	str.w	r3, [sl]
 800bd7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd80:	2562      	movs	r5, #98	@ 0x62
 800bd82:	601c      	str	r4, [r3, #0]
 800bd84:	e73a      	b.n	800bbfc <__gethex+0xf8>
 800bd86:	1e71      	subs	r1, r6, #1
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 fe30 	bl	800c9ee <__any_on>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d1ed      	bne.n	800bd6e <__gethex+0x26a>
 800bd92:	9801      	ldr	r0, [sp, #4]
 800bd94:	4621      	mov	r1, r4
 800bd96:	f000 f9d9 	bl	800c14c <_Bfree>
 800bd9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	6013      	str	r3, [r2, #0]
 800bda0:	2550      	movs	r5, #80	@ 0x50
 800bda2:	e72b      	b.n	800bbfc <__gethex+0xf8>
 800bda4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1f3      	bne.n	800bd92 <__gethex+0x28e>
 800bdaa:	e7e0      	b.n	800bd6e <__gethex+0x26a>
 800bdac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1dd      	bne.n	800bd6e <__gethex+0x26a>
 800bdb2:	e7ee      	b.n	800bd92 <__gethex+0x28e>
 800bdb4:	0800d920 	.word	0x0800d920
 800bdb8:	0800da89 	.word	0x0800da89
 800bdbc:	0800da9a 	.word	0x0800da9a
 800bdc0:	1e6f      	subs	r7, r5, #1
 800bdc2:	f1b9 0f00 	cmp.w	r9, #0
 800bdc6:	d130      	bne.n	800be2a <__gethex+0x326>
 800bdc8:	b127      	cbz	r7, 800bdd4 <__gethex+0x2d0>
 800bdca:	4639      	mov	r1, r7
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f000 fe0e 	bl	800c9ee <__any_on>
 800bdd2:	4681      	mov	r9, r0
 800bdd4:	117a      	asrs	r2, r7, #5
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bddc:	f007 071f 	and.w	r7, r7, #31
 800bde0:	40bb      	lsls	r3, r7
 800bde2:	4213      	tst	r3, r2
 800bde4:	4629      	mov	r1, r5
 800bde6:	4620      	mov	r0, r4
 800bde8:	bf18      	it	ne
 800bdea:	f049 0902 	orrne.w	r9, r9, #2
 800bdee:	f7ff fe21 	bl	800ba34 <rshift>
 800bdf2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bdf6:	1b76      	subs	r6, r6, r5
 800bdf8:	2502      	movs	r5, #2
 800bdfa:	f1b9 0f00 	cmp.w	r9, #0
 800bdfe:	d047      	beq.n	800be90 <__gethex+0x38c>
 800be00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be04:	2b02      	cmp	r3, #2
 800be06:	d015      	beq.n	800be34 <__gethex+0x330>
 800be08:	2b03      	cmp	r3, #3
 800be0a:	d017      	beq.n	800be3c <__gethex+0x338>
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d109      	bne.n	800be24 <__gethex+0x320>
 800be10:	f019 0f02 	tst.w	r9, #2
 800be14:	d006      	beq.n	800be24 <__gethex+0x320>
 800be16:	f8da 3000 	ldr.w	r3, [sl]
 800be1a:	ea49 0903 	orr.w	r9, r9, r3
 800be1e:	f019 0f01 	tst.w	r9, #1
 800be22:	d10e      	bne.n	800be42 <__gethex+0x33e>
 800be24:	f045 0510 	orr.w	r5, r5, #16
 800be28:	e032      	b.n	800be90 <__gethex+0x38c>
 800be2a:	f04f 0901 	mov.w	r9, #1
 800be2e:	e7d1      	b.n	800bdd4 <__gethex+0x2d0>
 800be30:	2501      	movs	r5, #1
 800be32:	e7e2      	b.n	800bdfa <__gethex+0x2f6>
 800be34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be36:	f1c3 0301 	rsb	r3, r3, #1
 800be3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d0f0      	beq.n	800be24 <__gethex+0x320>
 800be42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be46:	f104 0314 	add.w	r3, r4, #20
 800be4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800be4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800be52:	f04f 0c00 	mov.w	ip, #0
 800be56:	4618      	mov	r0, r3
 800be58:	f853 2b04 	ldr.w	r2, [r3], #4
 800be5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800be60:	d01b      	beq.n	800be9a <__gethex+0x396>
 800be62:	3201      	adds	r2, #1
 800be64:	6002      	str	r2, [r0, #0]
 800be66:	2d02      	cmp	r5, #2
 800be68:	f104 0314 	add.w	r3, r4, #20
 800be6c:	d13c      	bne.n	800bee8 <__gethex+0x3e4>
 800be6e:	f8d8 2000 	ldr.w	r2, [r8]
 800be72:	3a01      	subs	r2, #1
 800be74:	42b2      	cmp	r2, r6
 800be76:	d109      	bne.n	800be8c <__gethex+0x388>
 800be78:	1171      	asrs	r1, r6, #5
 800be7a:	2201      	movs	r2, #1
 800be7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be80:	f006 061f 	and.w	r6, r6, #31
 800be84:	fa02 f606 	lsl.w	r6, r2, r6
 800be88:	421e      	tst	r6, r3
 800be8a:	d13a      	bne.n	800bf02 <__gethex+0x3fe>
 800be8c:	f045 0520 	orr.w	r5, r5, #32
 800be90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be92:	601c      	str	r4, [r3, #0]
 800be94:	9b02      	ldr	r3, [sp, #8]
 800be96:	601f      	str	r7, [r3, #0]
 800be98:	e6b0      	b.n	800bbfc <__gethex+0xf8>
 800be9a:	4299      	cmp	r1, r3
 800be9c:	f843 cc04 	str.w	ip, [r3, #-4]
 800bea0:	d8d9      	bhi.n	800be56 <__gethex+0x352>
 800bea2:	68a3      	ldr	r3, [r4, #8]
 800bea4:	459b      	cmp	fp, r3
 800bea6:	db17      	blt.n	800bed8 <__gethex+0x3d4>
 800bea8:	6861      	ldr	r1, [r4, #4]
 800beaa:	9801      	ldr	r0, [sp, #4]
 800beac:	3101      	adds	r1, #1
 800beae:	f000 f90d 	bl	800c0cc <_Balloc>
 800beb2:	4681      	mov	r9, r0
 800beb4:	b918      	cbnz	r0, 800bebe <__gethex+0x3ba>
 800beb6:	4b1a      	ldr	r3, [pc, #104]	@ (800bf20 <__gethex+0x41c>)
 800beb8:	4602      	mov	r2, r0
 800beba:	2184      	movs	r1, #132	@ 0x84
 800bebc:	e6c5      	b.n	800bc4a <__gethex+0x146>
 800bebe:	6922      	ldr	r2, [r4, #16]
 800bec0:	3202      	adds	r2, #2
 800bec2:	f104 010c 	add.w	r1, r4, #12
 800bec6:	0092      	lsls	r2, r2, #2
 800bec8:	300c      	adds	r0, #12
 800beca:	f7ff fd52 	bl	800b972 <memcpy>
 800bece:	4621      	mov	r1, r4
 800bed0:	9801      	ldr	r0, [sp, #4]
 800bed2:	f000 f93b 	bl	800c14c <_Bfree>
 800bed6:	464c      	mov	r4, r9
 800bed8:	6923      	ldr	r3, [r4, #16]
 800beda:	1c5a      	adds	r2, r3, #1
 800bedc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bee0:	6122      	str	r2, [r4, #16]
 800bee2:	2201      	movs	r2, #1
 800bee4:	615a      	str	r2, [r3, #20]
 800bee6:	e7be      	b.n	800be66 <__gethex+0x362>
 800bee8:	6922      	ldr	r2, [r4, #16]
 800beea:	455a      	cmp	r2, fp
 800beec:	dd0b      	ble.n	800bf06 <__gethex+0x402>
 800beee:	2101      	movs	r1, #1
 800bef0:	4620      	mov	r0, r4
 800bef2:	f7ff fd9f 	bl	800ba34 <rshift>
 800bef6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800befa:	3701      	adds	r7, #1
 800befc:	42bb      	cmp	r3, r7
 800befe:	f6ff aee0 	blt.w	800bcc2 <__gethex+0x1be>
 800bf02:	2501      	movs	r5, #1
 800bf04:	e7c2      	b.n	800be8c <__gethex+0x388>
 800bf06:	f016 061f 	ands.w	r6, r6, #31
 800bf0a:	d0fa      	beq.n	800bf02 <__gethex+0x3fe>
 800bf0c:	4453      	add	r3, sl
 800bf0e:	f1c6 0620 	rsb	r6, r6, #32
 800bf12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bf16:	f000 f9cb 	bl	800c2b0 <__hi0bits>
 800bf1a:	42b0      	cmp	r0, r6
 800bf1c:	dbe7      	blt.n	800beee <__gethex+0x3ea>
 800bf1e:	e7f0      	b.n	800bf02 <__gethex+0x3fe>
 800bf20:	0800da89 	.word	0x0800da89

0800bf24 <L_shift>:
 800bf24:	f1c2 0208 	rsb	r2, r2, #8
 800bf28:	0092      	lsls	r2, r2, #2
 800bf2a:	b570      	push	{r4, r5, r6, lr}
 800bf2c:	f1c2 0620 	rsb	r6, r2, #32
 800bf30:	6843      	ldr	r3, [r0, #4]
 800bf32:	6804      	ldr	r4, [r0, #0]
 800bf34:	fa03 f506 	lsl.w	r5, r3, r6
 800bf38:	432c      	orrs	r4, r5
 800bf3a:	40d3      	lsrs	r3, r2
 800bf3c:	6004      	str	r4, [r0, #0]
 800bf3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf42:	4288      	cmp	r0, r1
 800bf44:	d3f4      	bcc.n	800bf30 <L_shift+0xc>
 800bf46:	bd70      	pop	{r4, r5, r6, pc}

0800bf48 <__match>:
 800bf48:	b530      	push	{r4, r5, lr}
 800bf4a:	6803      	ldr	r3, [r0, #0]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf52:	b914      	cbnz	r4, 800bf5a <__match+0x12>
 800bf54:	6003      	str	r3, [r0, #0]
 800bf56:	2001      	movs	r0, #1
 800bf58:	bd30      	pop	{r4, r5, pc}
 800bf5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bf62:	2d19      	cmp	r5, #25
 800bf64:	bf98      	it	ls
 800bf66:	3220      	addls	r2, #32
 800bf68:	42a2      	cmp	r2, r4
 800bf6a:	d0f0      	beq.n	800bf4e <__match+0x6>
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	e7f3      	b.n	800bf58 <__match+0x10>

0800bf70 <__hexnan>:
 800bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf74:	680b      	ldr	r3, [r1, #0]
 800bf76:	6801      	ldr	r1, [r0, #0]
 800bf78:	115e      	asrs	r6, r3, #5
 800bf7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bf7e:	f013 031f 	ands.w	r3, r3, #31
 800bf82:	b087      	sub	sp, #28
 800bf84:	bf18      	it	ne
 800bf86:	3604      	addne	r6, #4
 800bf88:	2500      	movs	r5, #0
 800bf8a:	1f37      	subs	r7, r6, #4
 800bf8c:	4682      	mov	sl, r0
 800bf8e:	4690      	mov	r8, r2
 800bf90:	9301      	str	r3, [sp, #4]
 800bf92:	f846 5c04 	str.w	r5, [r6, #-4]
 800bf96:	46b9      	mov	r9, r7
 800bf98:	463c      	mov	r4, r7
 800bf9a:	9502      	str	r5, [sp, #8]
 800bf9c:	46ab      	mov	fp, r5
 800bf9e:	784a      	ldrb	r2, [r1, #1]
 800bfa0:	1c4b      	adds	r3, r1, #1
 800bfa2:	9303      	str	r3, [sp, #12]
 800bfa4:	b342      	cbz	r2, 800bff8 <__hexnan+0x88>
 800bfa6:	4610      	mov	r0, r2
 800bfa8:	9105      	str	r1, [sp, #20]
 800bfaa:	9204      	str	r2, [sp, #16]
 800bfac:	f7ff fd94 	bl	800bad8 <__hexdig_fun>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d151      	bne.n	800c058 <__hexnan+0xe8>
 800bfb4:	9a04      	ldr	r2, [sp, #16]
 800bfb6:	9905      	ldr	r1, [sp, #20]
 800bfb8:	2a20      	cmp	r2, #32
 800bfba:	d818      	bhi.n	800bfee <__hexnan+0x7e>
 800bfbc:	9b02      	ldr	r3, [sp, #8]
 800bfbe:	459b      	cmp	fp, r3
 800bfc0:	dd13      	ble.n	800bfea <__hexnan+0x7a>
 800bfc2:	454c      	cmp	r4, r9
 800bfc4:	d206      	bcs.n	800bfd4 <__hexnan+0x64>
 800bfc6:	2d07      	cmp	r5, #7
 800bfc8:	dc04      	bgt.n	800bfd4 <__hexnan+0x64>
 800bfca:	462a      	mov	r2, r5
 800bfcc:	4649      	mov	r1, r9
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f7ff ffa8 	bl	800bf24 <L_shift>
 800bfd4:	4544      	cmp	r4, r8
 800bfd6:	d952      	bls.n	800c07e <__hexnan+0x10e>
 800bfd8:	2300      	movs	r3, #0
 800bfda:	f1a4 0904 	sub.w	r9, r4, #4
 800bfde:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfe2:	f8cd b008 	str.w	fp, [sp, #8]
 800bfe6:	464c      	mov	r4, r9
 800bfe8:	461d      	mov	r5, r3
 800bfea:	9903      	ldr	r1, [sp, #12]
 800bfec:	e7d7      	b.n	800bf9e <__hexnan+0x2e>
 800bfee:	2a29      	cmp	r2, #41	@ 0x29
 800bff0:	d157      	bne.n	800c0a2 <__hexnan+0x132>
 800bff2:	3102      	adds	r1, #2
 800bff4:	f8ca 1000 	str.w	r1, [sl]
 800bff8:	f1bb 0f00 	cmp.w	fp, #0
 800bffc:	d051      	beq.n	800c0a2 <__hexnan+0x132>
 800bffe:	454c      	cmp	r4, r9
 800c000:	d206      	bcs.n	800c010 <__hexnan+0xa0>
 800c002:	2d07      	cmp	r5, #7
 800c004:	dc04      	bgt.n	800c010 <__hexnan+0xa0>
 800c006:	462a      	mov	r2, r5
 800c008:	4649      	mov	r1, r9
 800c00a:	4620      	mov	r0, r4
 800c00c:	f7ff ff8a 	bl	800bf24 <L_shift>
 800c010:	4544      	cmp	r4, r8
 800c012:	d936      	bls.n	800c082 <__hexnan+0x112>
 800c014:	f1a8 0204 	sub.w	r2, r8, #4
 800c018:	4623      	mov	r3, r4
 800c01a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c01e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c022:	429f      	cmp	r7, r3
 800c024:	d2f9      	bcs.n	800c01a <__hexnan+0xaa>
 800c026:	1b3b      	subs	r3, r7, r4
 800c028:	f023 0303 	bic.w	r3, r3, #3
 800c02c:	3304      	adds	r3, #4
 800c02e:	3401      	adds	r4, #1
 800c030:	3e03      	subs	r6, #3
 800c032:	42b4      	cmp	r4, r6
 800c034:	bf88      	it	hi
 800c036:	2304      	movhi	r3, #4
 800c038:	4443      	add	r3, r8
 800c03a:	2200      	movs	r2, #0
 800c03c:	f843 2b04 	str.w	r2, [r3], #4
 800c040:	429f      	cmp	r7, r3
 800c042:	d2fb      	bcs.n	800c03c <__hexnan+0xcc>
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	b91b      	cbnz	r3, 800c050 <__hexnan+0xe0>
 800c048:	4547      	cmp	r7, r8
 800c04a:	d128      	bne.n	800c09e <__hexnan+0x12e>
 800c04c:	2301      	movs	r3, #1
 800c04e:	603b      	str	r3, [r7, #0]
 800c050:	2005      	movs	r0, #5
 800c052:	b007      	add	sp, #28
 800c054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c058:	3501      	adds	r5, #1
 800c05a:	2d08      	cmp	r5, #8
 800c05c:	f10b 0b01 	add.w	fp, fp, #1
 800c060:	dd06      	ble.n	800c070 <__hexnan+0x100>
 800c062:	4544      	cmp	r4, r8
 800c064:	d9c1      	bls.n	800bfea <__hexnan+0x7a>
 800c066:	2300      	movs	r3, #0
 800c068:	f844 3c04 	str.w	r3, [r4, #-4]
 800c06c:	2501      	movs	r5, #1
 800c06e:	3c04      	subs	r4, #4
 800c070:	6822      	ldr	r2, [r4, #0]
 800c072:	f000 000f 	and.w	r0, r0, #15
 800c076:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c07a:	6020      	str	r0, [r4, #0]
 800c07c:	e7b5      	b.n	800bfea <__hexnan+0x7a>
 800c07e:	2508      	movs	r5, #8
 800c080:	e7b3      	b.n	800bfea <__hexnan+0x7a>
 800c082:	9b01      	ldr	r3, [sp, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d0dd      	beq.n	800c044 <__hexnan+0xd4>
 800c088:	f1c3 0320 	rsb	r3, r3, #32
 800c08c:	f04f 32ff 	mov.w	r2, #4294967295
 800c090:	40da      	lsrs	r2, r3
 800c092:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c096:	4013      	ands	r3, r2
 800c098:	f846 3c04 	str.w	r3, [r6, #-4]
 800c09c:	e7d2      	b.n	800c044 <__hexnan+0xd4>
 800c09e:	3f04      	subs	r7, #4
 800c0a0:	e7d0      	b.n	800c044 <__hexnan+0xd4>
 800c0a2:	2004      	movs	r0, #4
 800c0a4:	e7d5      	b.n	800c052 <__hexnan+0xe2>

0800c0a6 <__ascii_mbtowc>:
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	b901      	cbnz	r1, 800c0ac <__ascii_mbtowc+0x6>
 800c0aa:	a901      	add	r1, sp, #4
 800c0ac:	b142      	cbz	r2, 800c0c0 <__ascii_mbtowc+0x1a>
 800c0ae:	b14b      	cbz	r3, 800c0c4 <__ascii_mbtowc+0x1e>
 800c0b0:	7813      	ldrb	r3, [r2, #0]
 800c0b2:	600b      	str	r3, [r1, #0]
 800c0b4:	7812      	ldrb	r2, [r2, #0]
 800c0b6:	1e10      	subs	r0, r2, #0
 800c0b8:	bf18      	it	ne
 800c0ba:	2001      	movne	r0, #1
 800c0bc:	b002      	add	sp, #8
 800c0be:	4770      	bx	lr
 800c0c0:	4610      	mov	r0, r2
 800c0c2:	e7fb      	b.n	800c0bc <__ascii_mbtowc+0x16>
 800c0c4:	f06f 0001 	mvn.w	r0, #1
 800c0c8:	e7f8      	b.n	800c0bc <__ascii_mbtowc+0x16>
	...

0800c0cc <_Balloc>:
 800c0cc:	b570      	push	{r4, r5, r6, lr}
 800c0ce:	69c6      	ldr	r6, [r0, #28]
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	460d      	mov	r5, r1
 800c0d4:	b976      	cbnz	r6, 800c0f4 <_Balloc+0x28>
 800c0d6:	2010      	movs	r0, #16
 800c0d8:	f7fe fb60 	bl	800a79c <malloc>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	61e0      	str	r0, [r4, #28]
 800c0e0:	b920      	cbnz	r0, 800c0ec <_Balloc+0x20>
 800c0e2:	4b18      	ldr	r3, [pc, #96]	@ (800c144 <_Balloc+0x78>)
 800c0e4:	4818      	ldr	r0, [pc, #96]	@ (800c148 <_Balloc+0x7c>)
 800c0e6:	216b      	movs	r1, #107	@ 0x6b
 800c0e8:	f001 fa38 	bl	800d55c <__assert_func>
 800c0ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0f0:	6006      	str	r6, [r0, #0]
 800c0f2:	60c6      	str	r6, [r0, #12]
 800c0f4:	69e6      	ldr	r6, [r4, #28]
 800c0f6:	68f3      	ldr	r3, [r6, #12]
 800c0f8:	b183      	cbz	r3, 800c11c <_Balloc+0x50>
 800c0fa:	69e3      	ldr	r3, [r4, #28]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c102:	b9b8      	cbnz	r0, 800c134 <_Balloc+0x68>
 800c104:	2101      	movs	r1, #1
 800c106:	fa01 f605 	lsl.w	r6, r1, r5
 800c10a:	1d72      	adds	r2, r6, #5
 800c10c:	0092      	lsls	r2, r2, #2
 800c10e:	4620      	mov	r0, r4
 800c110:	f001 fa42 	bl	800d598 <_calloc_r>
 800c114:	b160      	cbz	r0, 800c130 <_Balloc+0x64>
 800c116:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c11a:	e00e      	b.n	800c13a <_Balloc+0x6e>
 800c11c:	2221      	movs	r2, #33	@ 0x21
 800c11e:	2104      	movs	r1, #4
 800c120:	4620      	mov	r0, r4
 800c122:	f001 fa39 	bl	800d598 <_calloc_r>
 800c126:	69e3      	ldr	r3, [r4, #28]
 800c128:	60f0      	str	r0, [r6, #12]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d1e4      	bne.n	800c0fa <_Balloc+0x2e>
 800c130:	2000      	movs	r0, #0
 800c132:	bd70      	pop	{r4, r5, r6, pc}
 800c134:	6802      	ldr	r2, [r0, #0]
 800c136:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c13a:	2300      	movs	r3, #0
 800c13c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c140:	e7f7      	b.n	800c132 <_Balloc+0x66>
 800c142:	bf00      	nop
 800c144:	0800dafa 	.word	0x0800dafa
 800c148:	0800db11 	.word	0x0800db11

0800c14c <_Bfree>:
 800c14c:	b570      	push	{r4, r5, r6, lr}
 800c14e:	69c6      	ldr	r6, [r0, #28]
 800c150:	4605      	mov	r5, r0
 800c152:	460c      	mov	r4, r1
 800c154:	b976      	cbnz	r6, 800c174 <_Bfree+0x28>
 800c156:	2010      	movs	r0, #16
 800c158:	f7fe fb20 	bl	800a79c <malloc>
 800c15c:	4602      	mov	r2, r0
 800c15e:	61e8      	str	r0, [r5, #28]
 800c160:	b920      	cbnz	r0, 800c16c <_Bfree+0x20>
 800c162:	4b09      	ldr	r3, [pc, #36]	@ (800c188 <_Bfree+0x3c>)
 800c164:	4809      	ldr	r0, [pc, #36]	@ (800c18c <_Bfree+0x40>)
 800c166:	218f      	movs	r1, #143	@ 0x8f
 800c168:	f001 f9f8 	bl	800d55c <__assert_func>
 800c16c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c170:	6006      	str	r6, [r0, #0]
 800c172:	60c6      	str	r6, [r0, #12]
 800c174:	b13c      	cbz	r4, 800c186 <_Bfree+0x3a>
 800c176:	69eb      	ldr	r3, [r5, #28]
 800c178:	6862      	ldr	r2, [r4, #4]
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c180:	6021      	str	r1, [r4, #0]
 800c182:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c186:	bd70      	pop	{r4, r5, r6, pc}
 800c188:	0800dafa 	.word	0x0800dafa
 800c18c:	0800db11 	.word	0x0800db11

0800c190 <__multadd>:
 800c190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c194:	690d      	ldr	r5, [r1, #16]
 800c196:	4607      	mov	r7, r0
 800c198:	460c      	mov	r4, r1
 800c19a:	461e      	mov	r6, r3
 800c19c:	f101 0c14 	add.w	ip, r1, #20
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	f8dc 3000 	ldr.w	r3, [ip]
 800c1a6:	b299      	uxth	r1, r3
 800c1a8:	fb02 6101 	mla	r1, r2, r1, r6
 800c1ac:	0c1e      	lsrs	r6, r3, #16
 800c1ae:	0c0b      	lsrs	r3, r1, #16
 800c1b0:	fb02 3306 	mla	r3, r2, r6, r3
 800c1b4:	b289      	uxth	r1, r1
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1bc:	4285      	cmp	r5, r0
 800c1be:	f84c 1b04 	str.w	r1, [ip], #4
 800c1c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1c6:	dcec      	bgt.n	800c1a2 <__multadd+0x12>
 800c1c8:	b30e      	cbz	r6, 800c20e <__multadd+0x7e>
 800c1ca:	68a3      	ldr	r3, [r4, #8]
 800c1cc:	42ab      	cmp	r3, r5
 800c1ce:	dc19      	bgt.n	800c204 <__multadd+0x74>
 800c1d0:	6861      	ldr	r1, [r4, #4]
 800c1d2:	4638      	mov	r0, r7
 800c1d4:	3101      	adds	r1, #1
 800c1d6:	f7ff ff79 	bl	800c0cc <_Balloc>
 800c1da:	4680      	mov	r8, r0
 800c1dc:	b928      	cbnz	r0, 800c1ea <__multadd+0x5a>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c214 <__multadd+0x84>)
 800c1e2:	480d      	ldr	r0, [pc, #52]	@ (800c218 <__multadd+0x88>)
 800c1e4:	21ba      	movs	r1, #186	@ 0xba
 800c1e6:	f001 f9b9 	bl	800d55c <__assert_func>
 800c1ea:	6922      	ldr	r2, [r4, #16]
 800c1ec:	3202      	adds	r2, #2
 800c1ee:	f104 010c 	add.w	r1, r4, #12
 800c1f2:	0092      	lsls	r2, r2, #2
 800c1f4:	300c      	adds	r0, #12
 800c1f6:	f7ff fbbc 	bl	800b972 <memcpy>
 800c1fa:	4621      	mov	r1, r4
 800c1fc:	4638      	mov	r0, r7
 800c1fe:	f7ff ffa5 	bl	800c14c <_Bfree>
 800c202:	4644      	mov	r4, r8
 800c204:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c208:	3501      	adds	r5, #1
 800c20a:	615e      	str	r6, [r3, #20]
 800c20c:	6125      	str	r5, [r4, #16]
 800c20e:	4620      	mov	r0, r4
 800c210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c214:	0800da89 	.word	0x0800da89
 800c218:	0800db11 	.word	0x0800db11

0800c21c <__s2b>:
 800c21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c220:	460c      	mov	r4, r1
 800c222:	4615      	mov	r5, r2
 800c224:	461f      	mov	r7, r3
 800c226:	2209      	movs	r2, #9
 800c228:	3308      	adds	r3, #8
 800c22a:	4606      	mov	r6, r0
 800c22c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c230:	2100      	movs	r1, #0
 800c232:	2201      	movs	r2, #1
 800c234:	429a      	cmp	r2, r3
 800c236:	db09      	blt.n	800c24c <__s2b+0x30>
 800c238:	4630      	mov	r0, r6
 800c23a:	f7ff ff47 	bl	800c0cc <_Balloc>
 800c23e:	b940      	cbnz	r0, 800c252 <__s2b+0x36>
 800c240:	4602      	mov	r2, r0
 800c242:	4b19      	ldr	r3, [pc, #100]	@ (800c2a8 <__s2b+0x8c>)
 800c244:	4819      	ldr	r0, [pc, #100]	@ (800c2ac <__s2b+0x90>)
 800c246:	21d3      	movs	r1, #211	@ 0xd3
 800c248:	f001 f988 	bl	800d55c <__assert_func>
 800c24c:	0052      	lsls	r2, r2, #1
 800c24e:	3101      	adds	r1, #1
 800c250:	e7f0      	b.n	800c234 <__s2b+0x18>
 800c252:	9b08      	ldr	r3, [sp, #32]
 800c254:	6143      	str	r3, [r0, #20]
 800c256:	2d09      	cmp	r5, #9
 800c258:	f04f 0301 	mov.w	r3, #1
 800c25c:	6103      	str	r3, [r0, #16]
 800c25e:	dd16      	ble.n	800c28e <__s2b+0x72>
 800c260:	f104 0909 	add.w	r9, r4, #9
 800c264:	46c8      	mov	r8, r9
 800c266:	442c      	add	r4, r5
 800c268:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c26c:	4601      	mov	r1, r0
 800c26e:	3b30      	subs	r3, #48	@ 0x30
 800c270:	220a      	movs	r2, #10
 800c272:	4630      	mov	r0, r6
 800c274:	f7ff ff8c 	bl	800c190 <__multadd>
 800c278:	45a0      	cmp	r8, r4
 800c27a:	d1f5      	bne.n	800c268 <__s2b+0x4c>
 800c27c:	f1a5 0408 	sub.w	r4, r5, #8
 800c280:	444c      	add	r4, r9
 800c282:	1b2d      	subs	r5, r5, r4
 800c284:	1963      	adds	r3, r4, r5
 800c286:	42bb      	cmp	r3, r7
 800c288:	db04      	blt.n	800c294 <__s2b+0x78>
 800c28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c28e:	340a      	adds	r4, #10
 800c290:	2509      	movs	r5, #9
 800c292:	e7f6      	b.n	800c282 <__s2b+0x66>
 800c294:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c298:	4601      	mov	r1, r0
 800c29a:	3b30      	subs	r3, #48	@ 0x30
 800c29c:	220a      	movs	r2, #10
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f7ff ff76 	bl	800c190 <__multadd>
 800c2a4:	e7ee      	b.n	800c284 <__s2b+0x68>
 800c2a6:	bf00      	nop
 800c2a8:	0800da89 	.word	0x0800da89
 800c2ac:	0800db11 	.word	0x0800db11

0800c2b0 <__hi0bits>:
 800c2b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	bf36      	itet	cc
 800c2b8:	0403      	lslcc	r3, r0, #16
 800c2ba:	2000      	movcs	r0, #0
 800c2bc:	2010      	movcc	r0, #16
 800c2be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c2c2:	bf3c      	itt	cc
 800c2c4:	021b      	lslcc	r3, r3, #8
 800c2c6:	3008      	addcc	r0, #8
 800c2c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2cc:	bf3c      	itt	cc
 800c2ce:	011b      	lslcc	r3, r3, #4
 800c2d0:	3004      	addcc	r0, #4
 800c2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2d6:	bf3c      	itt	cc
 800c2d8:	009b      	lslcc	r3, r3, #2
 800c2da:	3002      	addcc	r0, #2
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	db05      	blt.n	800c2ec <__hi0bits+0x3c>
 800c2e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c2e4:	f100 0001 	add.w	r0, r0, #1
 800c2e8:	bf08      	it	eq
 800c2ea:	2020      	moveq	r0, #32
 800c2ec:	4770      	bx	lr

0800c2ee <__lo0bits>:
 800c2ee:	6803      	ldr	r3, [r0, #0]
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	f013 0007 	ands.w	r0, r3, #7
 800c2f6:	d00b      	beq.n	800c310 <__lo0bits+0x22>
 800c2f8:	07d9      	lsls	r1, r3, #31
 800c2fa:	d421      	bmi.n	800c340 <__lo0bits+0x52>
 800c2fc:	0798      	lsls	r0, r3, #30
 800c2fe:	bf49      	itett	mi
 800c300:	085b      	lsrmi	r3, r3, #1
 800c302:	089b      	lsrpl	r3, r3, #2
 800c304:	2001      	movmi	r0, #1
 800c306:	6013      	strmi	r3, [r2, #0]
 800c308:	bf5c      	itt	pl
 800c30a:	6013      	strpl	r3, [r2, #0]
 800c30c:	2002      	movpl	r0, #2
 800c30e:	4770      	bx	lr
 800c310:	b299      	uxth	r1, r3
 800c312:	b909      	cbnz	r1, 800c318 <__lo0bits+0x2a>
 800c314:	0c1b      	lsrs	r3, r3, #16
 800c316:	2010      	movs	r0, #16
 800c318:	b2d9      	uxtb	r1, r3
 800c31a:	b909      	cbnz	r1, 800c320 <__lo0bits+0x32>
 800c31c:	3008      	adds	r0, #8
 800c31e:	0a1b      	lsrs	r3, r3, #8
 800c320:	0719      	lsls	r1, r3, #28
 800c322:	bf04      	itt	eq
 800c324:	091b      	lsreq	r3, r3, #4
 800c326:	3004      	addeq	r0, #4
 800c328:	0799      	lsls	r1, r3, #30
 800c32a:	bf04      	itt	eq
 800c32c:	089b      	lsreq	r3, r3, #2
 800c32e:	3002      	addeq	r0, #2
 800c330:	07d9      	lsls	r1, r3, #31
 800c332:	d403      	bmi.n	800c33c <__lo0bits+0x4e>
 800c334:	085b      	lsrs	r3, r3, #1
 800c336:	f100 0001 	add.w	r0, r0, #1
 800c33a:	d003      	beq.n	800c344 <__lo0bits+0x56>
 800c33c:	6013      	str	r3, [r2, #0]
 800c33e:	4770      	bx	lr
 800c340:	2000      	movs	r0, #0
 800c342:	4770      	bx	lr
 800c344:	2020      	movs	r0, #32
 800c346:	4770      	bx	lr

0800c348 <__i2b>:
 800c348:	b510      	push	{r4, lr}
 800c34a:	460c      	mov	r4, r1
 800c34c:	2101      	movs	r1, #1
 800c34e:	f7ff febd 	bl	800c0cc <_Balloc>
 800c352:	4602      	mov	r2, r0
 800c354:	b928      	cbnz	r0, 800c362 <__i2b+0x1a>
 800c356:	4b05      	ldr	r3, [pc, #20]	@ (800c36c <__i2b+0x24>)
 800c358:	4805      	ldr	r0, [pc, #20]	@ (800c370 <__i2b+0x28>)
 800c35a:	f240 1145 	movw	r1, #325	@ 0x145
 800c35e:	f001 f8fd 	bl	800d55c <__assert_func>
 800c362:	2301      	movs	r3, #1
 800c364:	6144      	str	r4, [r0, #20]
 800c366:	6103      	str	r3, [r0, #16]
 800c368:	bd10      	pop	{r4, pc}
 800c36a:	bf00      	nop
 800c36c:	0800da89 	.word	0x0800da89
 800c370:	0800db11 	.word	0x0800db11

0800c374 <__multiply>:
 800c374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c378:	4614      	mov	r4, r2
 800c37a:	690a      	ldr	r2, [r1, #16]
 800c37c:	6923      	ldr	r3, [r4, #16]
 800c37e:	429a      	cmp	r2, r3
 800c380:	bfa8      	it	ge
 800c382:	4623      	movge	r3, r4
 800c384:	460f      	mov	r7, r1
 800c386:	bfa4      	itt	ge
 800c388:	460c      	movge	r4, r1
 800c38a:	461f      	movge	r7, r3
 800c38c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c390:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c394:	68a3      	ldr	r3, [r4, #8]
 800c396:	6861      	ldr	r1, [r4, #4]
 800c398:	eb0a 0609 	add.w	r6, sl, r9
 800c39c:	42b3      	cmp	r3, r6
 800c39e:	b085      	sub	sp, #20
 800c3a0:	bfb8      	it	lt
 800c3a2:	3101      	addlt	r1, #1
 800c3a4:	f7ff fe92 	bl	800c0cc <_Balloc>
 800c3a8:	b930      	cbnz	r0, 800c3b8 <__multiply+0x44>
 800c3aa:	4602      	mov	r2, r0
 800c3ac:	4b44      	ldr	r3, [pc, #272]	@ (800c4c0 <__multiply+0x14c>)
 800c3ae:	4845      	ldr	r0, [pc, #276]	@ (800c4c4 <__multiply+0x150>)
 800c3b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c3b4:	f001 f8d2 	bl	800d55c <__assert_func>
 800c3b8:	f100 0514 	add.w	r5, r0, #20
 800c3bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c3c0:	462b      	mov	r3, r5
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	4543      	cmp	r3, r8
 800c3c6:	d321      	bcc.n	800c40c <__multiply+0x98>
 800c3c8:	f107 0114 	add.w	r1, r7, #20
 800c3cc:	f104 0214 	add.w	r2, r4, #20
 800c3d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c3d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c3d8:	9302      	str	r3, [sp, #8]
 800c3da:	1b13      	subs	r3, r2, r4
 800c3dc:	3b15      	subs	r3, #21
 800c3de:	f023 0303 	bic.w	r3, r3, #3
 800c3e2:	3304      	adds	r3, #4
 800c3e4:	f104 0715 	add.w	r7, r4, #21
 800c3e8:	42ba      	cmp	r2, r7
 800c3ea:	bf38      	it	cc
 800c3ec:	2304      	movcc	r3, #4
 800c3ee:	9301      	str	r3, [sp, #4]
 800c3f0:	9b02      	ldr	r3, [sp, #8]
 800c3f2:	9103      	str	r1, [sp, #12]
 800c3f4:	428b      	cmp	r3, r1
 800c3f6:	d80c      	bhi.n	800c412 <__multiply+0x9e>
 800c3f8:	2e00      	cmp	r6, #0
 800c3fa:	dd03      	ble.n	800c404 <__multiply+0x90>
 800c3fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c400:	2b00      	cmp	r3, #0
 800c402:	d05b      	beq.n	800c4bc <__multiply+0x148>
 800c404:	6106      	str	r6, [r0, #16]
 800c406:	b005      	add	sp, #20
 800c408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c40c:	f843 2b04 	str.w	r2, [r3], #4
 800c410:	e7d8      	b.n	800c3c4 <__multiply+0x50>
 800c412:	f8b1 a000 	ldrh.w	sl, [r1]
 800c416:	f1ba 0f00 	cmp.w	sl, #0
 800c41a:	d024      	beq.n	800c466 <__multiply+0xf2>
 800c41c:	f104 0e14 	add.w	lr, r4, #20
 800c420:	46a9      	mov	r9, r5
 800c422:	f04f 0c00 	mov.w	ip, #0
 800c426:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c42a:	f8d9 3000 	ldr.w	r3, [r9]
 800c42e:	fa1f fb87 	uxth.w	fp, r7
 800c432:	b29b      	uxth	r3, r3
 800c434:	fb0a 330b 	mla	r3, sl, fp, r3
 800c438:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c43c:	f8d9 7000 	ldr.w	r7, [r9]
 800c440:	4463      	add	r3, ip
 800c442:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c446:	fb0a c70b 	mla	r7, sl, fp, ip
 800c44a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c44e:	b29b      	uxth	r3, r3
 800c450:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c454:	4572      	cmp	r2, lr
 800c456:	f849 3b04 	str.w	r3, [r9], #4
 800c45a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c45e:	d8e2      	bhi.n	800c426 <__multiply+0xb2>
 800c460:	9b01      	ldr	r3, [sp, #4]
 800c462:	f845 c003 	str.w	ip, [r5, r3]
 800c466:	9b03      	ldr	r3, [sp, #12]
 800c468:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c46c:	3104      	adds	r1, #4
 800c46e:	f1b9 0f00 	cmp.w	r9, #0
 800c472:	d021      	beq.n	800c4b8 <__multiply+0x144>
 800c474:	682b      	ldr	r3, [r5, #0]
 800c476:	f104 0c14 	add.w	ip, r4, #20
 800c47a:	46ae      	mov	lr, r5
 800c47c:	f04f 0a00 	mov.w	sl, #0
 800c480:	f8bc b000 	ldrh.w	fp, [ip]
 800c484:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c488:	fb09 770b 	mla	r7, r9, fp, r7
 800c48c:	4457      	add	r7, sl
 800c48e:	b29b      	uxth	r3, r3
 800c490:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c494:	f84e 3b04 	str.w	r3, [lr], #4
 800c498:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c49c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4a0:	f8be 3000 	ldrh.w	r3, [lr]
 800c4a4:	fb09 330a 	mla	r3, r9, sl, r3
 800c4a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c4ac:	4562      	cmp	r2, ip
 800c4ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4b2:	d8e5      	bhi.n	800c480 <__multiply+0x10c>
 800c4b4:	9f01      	ldr	r7, [sp, #4]
 800c4b6:	51eb      	str	r3, [r5, r7]
 800c4b8:	3504      	adds	r5, #4
 800c4ba:	e799      	b.n	800c3f0 <__multiply+0x7c>
 800c4bc:	3e01      	subs	r6, #1
 800c4be:	e79b      	b.n	800c3f8 <__multiply+0x84>
 800c4c0:	0800da89 	.word	0x0800da89
 800c4c4:	0800db11 	.word	0x0800db11

0800c4c8 <__pow5mult>:
 800c4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4cc:	4615      	mov	r5, r2
 800c4ce:	f012 0203 	ands.w	r2, r2, #3
 800c4d2:	4607      	mov	r7, r0
 800c4d4:	460e      	mov	r6, r1
 800c4d6:	d007      	beq.n	800c4e8 <__pow5mult+0x20>
 800c4d8:	4c25      	ldr	r4, [pc, #148]	@ (800c570 <__pow5mult+0xa8>)
 800c4da:	3a01      	subs	r2, #1
 800c4dc:	2300      	movs	r3, #0
 800c4de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4e2:	f7ff fe55 	bl	800c190 <__multadd>
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	10ad      	asrs	r5, r5, #2
 800c4ea:	d03d      	beq.n	800c568 <__pow5mult+0xa0>
 800c4ec:	69fc      	ldr	r4, [r7, #28]
 800c4ee:	b97c      	cbnz	r4, 800c510 <__pow5mult+0x48>
 800c4f0:	2010      	movs	r0, #16
 800c4f2:	f7fe f953 	bl	800a79c <malloc>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	61f8      	str	r0, [r7, #28]
 800c4fa:	b928      	cbnz	r0, 800c508 <__pow5mult+0x40>
 800c4fc:	4b1d      	ldr	r3, [pc, #116]	@ (800c574 <__pow5mult+0xac>)
 800c4fe:	481e      	ldr	r0, [pc, #120]	@ (800c578 <__pow5mult+0xb0>)
 800c500:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c504:	f001 f82a 	bl	800d55c <__assert_func>
 800c508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c50c:	6004      	str	r4, [r0, #0]
 800c50e:	60c4      	str	r4, [r0, #12]
 800c510:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c518:	b94c      	cbnz	r4, 800c52e <__pow5mult+0x66>
 800c51a:	f240 2171 	movw	r1, #625	@ 0x271
 800c51e:	4638      	mov	r0, r7
 800c520:	f7ff ff12 	bl	800c348 <__i2b>
 800c524:	2300      	movs	r3, #0
 800c526:	f8c8 0008 	str.w	r0, [r8, #8]
 800c52a:	4604      	mov	r4, r0
 800c52c:	6003      	str	r3, [r0, #0]
 800c52e:	f04f 0900 	mov.w	r9, #0
 800c532:	07eb      	lsls	r3, r5, #31
 800c534:	d50a      	bpl.n	800c54c <__pow5mult+0x84>
 800c536:	4631      	mov	r1, r6
 800c538:	4622      	mov	r2, r4
 800c53a:	4638      	mov	r0, r7
 800c53c:	f7ff ff1a 	bl	800c374 <__multiply>
 800c540:	4631      	mov	r1, r6
 800c542:	4680      	mov	r8, r0
 800c544:	4638      	mov	r0, r7
 800c546:	f7ff fe01 	bl	800c14c <_Bfree>
 800c54a:	4646      	mov	r6, r8
 800c54c:	106d      	asrs	r5, r5, #1
 800c54e:	d00b      	beq.n	800c568 <__pow5mult+0xa0>
 800c550:	6820      	ldr	r0, [r4, #0]
 800c552:	b938      	cbnz	r0, 800c564 <__pow5mult+0x9c>
 800c554:	4622      	mov	r2, r4
 800c556:	4621      	mov	r1, r4
 800c558:	4638      	mov	r0, r7
 800c55a:	f7ff ff0b 	bl	800c374 <__multiply>
 800c55e:	6020      	str	r0, [r4, #0]
 800c560:	f8c0 9000 	str.w	r9, [r0]
 800c564:	4604      	mov	r4, r0
 800c566:	e7e4      	b.n	800c532 <__pow5mult+0x6a>
 800c568:	4630      	mov	r0, r6
 800c56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c56e:	bf00      	nop
 800c570:	0800db6c 	.word	0x0800db6c
 800c574:	0800dafa 	.word	0x0800dafa
 800c578:	0800db11 	.word	0x0800db11

0800c57c <__lshift>:
 800c57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c580:	460c      	mov	r4, r1
 800c582:	6849      	ldr	r1, [r1, #4]
 800c584:	6923      	ldr	r3, [r4, #16]
 800c586:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c58a:	68a3      	ldr	r3, [r4, #8]
 800c58c:	4607      	mov	r7, r0
 800c58e:	4691      	mov	r9, r2
 800c590:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c594:	f108 0601 	add.w	r6, r8, #1
 800c598:	42b3      	cmp	r3, r6
 800c59a:	db0b      	blt.n	800c5b4 <__lshift+0x38>
 800c59c:	4638      	mov	r0, r7
 800c59e:	f7ff fd95 	bl	800c0cc <_Balloc>
 800c5a2:	4605      	mov	r5, r0
 800c5a4:	b948      	cbnz	r0, 800c5ba <__lshift+0x3e>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	4b28      	ldr	r3, [pc, #160]	@ (800c64c <__lshift+0xd0>)
 800c5aa:	4829      	ldr	r0, [pc, #164]	@ (800c650 <__lshift+0xd4>)
 800c5ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c5b0:	f000 ffd4 	bl	800d55c <__assert_func>
 800c5b4:	3101      	adds	r1, #1
 800c5b6:	005b      	lsls	r3, r3, #1
 800c5b8:	e7ee      	b.n	800c598 <__lshift+0x1c>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	f100 0114 	add.w	r1, r0, #20
 800c5c0:	f100 0210 	add.w	r2, r0, #16
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	4553      	cmp	r3, sl
 800c5c8:	db33      	blt.n	800c632 <__lshift+0xb6>
 800c5ca:	6920      	ldr	r0, [r4, #16]
 800c5cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5d0:	f104 0314 	add.w	r3, r4, #20
 800c5d4:	f019 091f 	ands.w	r9, r9, #31
 800c5d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5e0:	d02b      	beq.n	800c63a <__lshift+0xbe>
 800c5e2:	f1c9 0e20 	rsb	lr, r9, #32
 800c5e6:	468a      	mov	sl, r1
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	6818      	ldr	r0, [r3, #0]
 800c5ec:	fa00 f009 	lsl.w	r0, r0, r9
 800c5f0:	4310      	orrs	r0, r2
 800c5f2:	f84a 0b04 	str.w	r0, [sl], #4
 800c5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5fa:	459c      	cmp	ip, r3
 800c5fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c600:	d8f3      	bhi.n	800c5ea <__lshift+0x6e>
 800c602:	ebac 0304 	sub.w	r3, ip, r4
 800c606:	3b15      	subs	r3, #21
 800c608:	f023 0303 	bic.w	r3, r3, #3
 800c60c:	3304      	adds	r3, #4
 800c60e:	f104 0015 	add.w	r0, r4, #21
 800c612:	4584      	cmp	ip, r0
 800c614:	bf38      	it	cc
 800c616:	2304      	movcc	r3, #4
 800c618:	50ca      	str	r2, [r1, r3]
 800c61a:	b10a      	cbz	r2, 800c620 <__lshift+0xa4>
 800c61c:	f108 0602 	add.w	r6, r8, #2
 800c620:	3e01      	subs	r6, #1
 800c622:	4638      	mov	r0, r7
 800c624:	612e      	str	r6, [r5, #16]
 800c626:	4621      	mov	r1, r4
 800c628:	f7ff fd90 	bl	800c14c <_Bfree>
 800c62c:	4628      	mov	r0, r5
 800c62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c632:	f842 0f04 	str.w	r0, [r2, #4]!
 800c636:	3301      	adds	r3, #1
 800c638:	e7c5      	b.n	800c5c6 <__lshift+0x4a>
 800c63a:	3904      	subs	r1, #4
 800c63c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c640:	f841 2f04 	str.w	r2, [r1, #4]!
 800c644:	459c      	cmp	ip, r3
 800c646:	d8f9      	bhi.n	800c63c <__lshift+0xc0>
 800c648:	e7ea      	b.n	800c620 <__lshift+0xa4>
 800c64a:	bf00      	nop
 800c64c:	0800da89 	.word	0x0800da89
 800c650:	0800db11 	.word	0x0800db11

0800c654 <__mcmp>:
 800c654:	690a      	ldr	r2, [r1, #16]
 800c656:	4603      	mov	r3, r0
 800c658:	6900      	ldr	r0, [r0, #16]
 800c65a:	1a80      	subs	r0, r0, r2
 800c65c:	b530      	push	{r4, r5, lr}
 800c65e:	d10e      	bne.n	800c67e <__mcmp+0x2a>
 800c660:	3314      	adds	r3, #20
 800c662:	3114      	adds	r1, #20
 800c664:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c668:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c66c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c670:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c674:	4295      	cmp	r5, r2
 800c676:	d003      	beq.n	800c680 <__mcmp+0x2c>
 800c678:	d205      	bcs.n	800c686 <__mcmp+0x32>
 800c67a:	f04f 30ff 	mov.w	r0, #4294967295
 800c67e:	bd30      	pop	{r4, r5, pc}
 800c680:	42a3      	cmp	r3, r4
 800c682:	d3f3      	bcc.n	800c66c <__mcmp+0x18>
 800c684:	e7fb      	b.n	800c67e <__mcmp+0x2a>
 800c686:	2001      	movs	r0, #1
 800c688:	e7f9      	b.n	800c67e <__mcmp+0x2a>
	...

0800c68c <__mdiff>:
 800c68c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c690:	4689      	mov	r9, r1
 800c692:	4606      	mov	r6, r0
 800c694:	4611      	mov	r1, r2
 800c696:	4648      	mov	r0, r9
 800c698:	4614      	mov	r4, r2
 800c69a:	f7ff ffdb 	bl	800c654 <__mcmp>
 800c69e:	1e05      	subs	r5, r0, #0
 800c6a0:	d112      	bne.n	800c6c8 <__mdiff+0x3c>
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	f7ff fd11 	bl	800c0cc <_Balloc>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	b928      	cbnz	r0, 800c6ba <__mdiff+0x2e>
 800c6ae:	4b3f      	ldr	r3, [pc, #252]	@ (800c7ac <__mdiff+0x120>)
 800c6b0:	f240 2137 	movw	r1, #567	@ 0x237
 800c6b4:	483e      	ldr	r0, [pc, #248]	@ (800c7b0 <__mdiff+0x124>)
 800c6b6:	f000 ff51 	bl	800d55c <__assert_func>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c6c0:	4610      	mov	r0, r2
 800c6c2:	b003      	add	sp, #12
 800c6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c8:	bfbc      	itt	lt
 800c6ca:	464b      	movlt	r3, r9
 800c6cc:	46a1      	movlt	r9, r4
 800c6ce:	4630      	mov	r0, r6
 800c6d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c6d4:	bfba      	itte	lt
 800c6d6:	461c      	movlt	r4, r3
 800c6d8:	2501      	movlt	r5, #1
 800c6da:	2500      	movge	r5, #0
 800c6dc:	f7ff fcf6 	bl	800c0cc <_Balloc>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	b918      	cbnz	r0, 800c6ec <__mdiff+0x60>
 800c6e4:	4b31      	ldr	r3, [pc, #196]	@ (800c7ac <__mdiff+0x120>)
 800c6e6:	f240 2145 	movw	r1, #581	@ 0x245
 800c6ea:	e7e3      	b.n	800c6b4 <__mdiff+0x28>
 800c6ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c6f0:	6926      	ldr	r6, [r4, #16]
 800c6f2:	60c5      	str	r5, [r0, #12]
 800c6f4:	f109 0310 	add.w	r3, r9, #16
 800c6f8:	f109 0514 	add.w	r5, r9, #20
 800c6fc:	f104 0e14 	add.w	lr, r4, #20
 800c700:	f100 0b14 	add.w	fp, r0, #20
 800c704:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c708:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c70c:	9301      	str	r3, [sp, #4]
 800c70e:	46d9      	mov	r9, fp
 800c710:	f04f 0c00 	mov.w	ip, #0
 800c714:	9b01      	ldr	r3, [sp, #4]
 800c716:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c71a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c71e:	9301      	str	r3, [sp, #4]
 800c720:	fa1f f38a 	uxth.w	r3, sl
 800c724:	4619      	mov	r1, r3
 800c726:	b283      	uxth	r3, r0
 800c728:	1acb      	subs	r3, r1, r3
 800c72a:	0c00      	lsrs	r0, r0, #16
 800c72c:	4463      	add	r3, ip
 800c72e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c732:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c736:	b29b      	uxth	r3, r3
 800c738:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c73c:	4576      	cmp	r6, lr
 800c73e:	f849 3b04 	str.w	r3, [r9], #4
 800c742:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c746:	d8e5      	bhi.n	800c714 <__mdiff+0x88>
 800c748:	1b33      	subs	r3, r6, r4
 800c74a:	3b15      	subs	r3, #21
 800c74c:	f023 0303 	bic.w	r3, r3, #3
 800c750:	3415      	adds	r4, #21
 800c752:	3304      	adds	r3, #4
 800c754:	42a6      	cmp	r6, r4
 800c756:	bf38      	it	cc
 800c758:	2304      	movcc	r3, #4
 800c75a:	441d      	add	r5, r3
 800c75c:	445b      	add	r3, fp
 800c75e:	461e      	mov	r6, r3
 800c760:	462c      	mov	r4, r5
 800c762:	4544      	cmp	r4, r8
 800c764:	d30e      	bcc.n	800c784 <__mdiff+0xf8>
 800c766:	f108 0103 	add.w	r1, r8, #3
 800c76a:	1b49      	subs	r1, r1, r5
 800c76c:	f021 0103 	bic.w	r1, r1, #3
 800c770:	3d03      	subs	r5, #3
 800c772:	45a8      	cmp	r8, r5
 800c774:	bf38      	it	cc
 800c776:	2100      	movcc	r1, #0
 800c778:	440b      	add	r3, r1
 800c77a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c77e:	b191      	cbz	r1, 800c7a6 <__mdiff+0x11a>
 800c780:	6117      	str	r7, [r2, #16]
 800c782:	e79d      	b.n	800c6c0 <__mdiff+0x34>
 800c784:	f854 1b04 	ldr.w	r1, [r4], #4
 800c788:	46e6      	mov	lr, ip
 800c78a:	0c08      	lsrs	r0, r1, #16
 800c78c:	fa1c fc81 	uxtah	ip, ip, r1
 800c790:	4471      	add	r1, lr
 800c792:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c796:	b289      	uxth	r1, r1
 800c798:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c79c:	f846 1b04 	str.w	r1, [r6], #4
 800c7a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7a4:	e7dd      	b.n	800c762 <__mdiff+0xd6>
 800c7a6:	3f01      	subs	r7, #1
 800c7a8:	e7e7      	b.n	800c77a <__mdiff+0xee>
 800c7aa:	bf00      	nop
 800c7ac:	0800da89 	.word	0x0800da89
 800c7b0:	0800db11 	.word	0x0800db11

0800c7b4 <__ulp>:
 800c7b4:	b082      	sub	sp, #8
 800c7b6:	ed8d 0b00 	vstr	d0, [sp]
 800c7ba:	9a01      	ldr	r2, [sp, #4]
 800c7bc:	4b0f      	ldr	r3, [pc, #60]	@ (800c7fc <__ulp+0x48>)
 800c7be:	4013      	ands	r3, r2
 800c7c0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	dc08      	bgt.n	800c7da <__ulp+0x26>
 800c7c8:	425b      	negs	r3, r3
 800c7ca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c7ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c7d2:	da04      	bge.n	800c7de <__ulp+0x2a>
 800c7d4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c7d8:	4113      	asrs	r3, r2
 800c7da:	2200      	movs	r2, #0
 800c7dc:	e008      	b.n	800c7f0 <__ulp+0x3c>
 800c7de:	f1a2 0314 	sub.w	r3, r2, #20
 800c7e2:	2b1e      	cmp	r3, #30
 800c7e4:	bfda      	itte	le
 800c7e6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c7ea:	40da      	lsrle	r2, r3
 800c7ec:	2201      	movgt	r2, #1
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	ec41 0b10 	vmov	d0, r0, r1
 800c7f8:	b002      	add	sp, #8
 800c7fa:	4770      	bx	lr
 800c7fc:	7ff00000 	.word	0x7ff00000

0800c800 <__b2d>:
 800c800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c804:	6906      	ldr	r6, [r0, #16]
 800c806:	f100 0814 	add.w	r8, r0, #20
 800c80a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c80e:	1f37      	subs	r7, r6, #4
 800c810:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c814:	4610      	mov	r0, r2
 800c816:	f7ff fd4b 	bl	800c2b0 <__hi0bits>
 800c81a:	f1c0 0320 	rsb	r3, r0, #32
 800c81e:	280a      	cmp	r0, #10
 800c820:	600b      	str	r3, [r1, #0]
 800c822:	491b      	ldr	r1, [pc, #108]	@ (800c890 <__b2d+0x90>)
 800c824:	dc15      	bgt.n	800c852 <__b2d+0x52>
 800c826:	f1c0 0c0b 	rsb	ip, r0, #11
 800c82a:	fa22 f30c 	lsr.w	r3, r2, ip
 800c82e:	45b8      	cmp	r8, r7
 800c830:	ea43 0501 	orr.w	r5, r3, r1
 800c834:	bf34      	ite	cc
 800c836:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c83a:	2300      	movcs	r3, #0
 800c83c:	3015      	adds	r0, #21
 800c83e:	fa02 f000 	lsl.w	r0, r2, r0
 800c842:	fa23 f30c 	lsr.w	r3, r3, ip
 800c846:	4303      	orrs	r3, r0
 800c848:	461c      	mov	r4, r3
 800c84a:	ec45 4b10 	vmov	d0, r4, r5
 800c84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c852:	45b8      	cmp	r8, r7
 800c854:	bf3a      	itte	cc
 800c856:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c85a:	f1a6 0708 	subcc.w	r7, r6, #8
 800c85e:	2300      	movcs	r3, #0
 800c860:	380b      	subs	r0, #11
 800c862:	d012      	beq.n	800c88a <__b2d+0x8a>
 800c864:	f1c0 0120 	rsb	r1, r0, #32
 800c868:	fa23 f401 	lsr.w	r4, r3, r1
 800c86c:	4082      	lsls	r2, r0
 800c86e:	4322      	orrs	r2, r4
 800c870:	4547      	cmp	r7, r8
 800c872:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c876:	bf8c      	ite	hi
 800c878:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c87c:	2200      	movls	r2, #0
 800c87e:	4083      	lsls	r3, r0
 800c880:	40ca      	lsrs	r2, r1
 800c882:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c886:	4313      	orrs	r3, r2
 800c888:	e7de      	b.n	800c848 <__b2d+0x48>
 800c88a:	ea42 0501 	orr.w	r5, r2, r1
 800c88e:	e7db      	b.n	800c848 <__b2d+0x48>
 800c890:	3ff00000 	.word	0x3ff00000

0800c894 <__d2b>:
 800c894:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c898:	460f      	mov	r7, r1
 800c89a:	2101      	movs	r1, #1
 800c89c:	ec59 8b10 	vmov	r8, r9, d0
 800c8a0:	4616      	mov	r6, r2
 800c8a2:	f7ff fc13 	bl	800c0cc <_Balloc>
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	b930      	cbnz	r0, 800c8b8 <__d2b+0x24>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	4b23      	ldr	r3, [pc, #140]	@ (800c93c <__d2b+0xa8>)
 800c8ae:	4824      	ldr	r0, [pc, #144]	@ (800c940 <__d2b+0xac>)
 800c8b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800c8b4:	f000 fe52 	bl	800d55c <__assert_func>
 800c8b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8c0:	b10d      	cbz	r5, 800c8c6 <__d2b+0x32>
 800c8c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8c6:	9301      	str	r3, [sp, #4]
 800c8c8:	f1b8 0300 	subs.w	r3, r8, #0
 800c8cc:	d023      	beq.n	800c916 <__d2b+0x82>
 800c8ce:	4668      	mov	r0, sp
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	f7ff fd0c 	bl	800c2ee <__lo0bits>
 800c8d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c8da:	b1d0      	cbz	r0, 800c912 <__d2b+0x7e>
 800c8dc:	f1c0 0320 	rsb	r3, r0, #32
 800c8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e4:	430b      	orrs	r3, r1
 800c8e6:	40c2      	lsrs	r2, r0
 800c8e8:	6163      	str	r3, [r4, #20]
 800c8ea:	9201      	str	r2, [sp, #4]
 800c8ec:	9b01      	ldr	r3, [sp, #4]
 800c8ee:	61a3      	str	r3, [r4, #24]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	bf0c      	ite	eq
 800c8f4:	2201      	moveq	r2, #1
 800c8f6:	2202      	movne	r2, #2
 800c8f8:	6122      	str	r2, [r4, #16]
 800c8fa:	b1a5      	cbz	r5, 800c926 <__d2b+0x92>
 800c8fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c900:	4405      	add	r5, r0
 800c902:	603d      	str	r5, [r7, #0]
 800c904:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c908:	6030      	str	r0, [r6, #0]
 800c90a:	4620      	mov	r0, r4
 800c90c:	b003      	add	sp, #12
 800c90e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c912:	6161      	str	r1, [r4, #20]
 800c914:	e7ea      	b.n	800c8ec <__d2b+0x58>
 800c916:	a801      	add	r0, sp, #4
 800c918:	f7ff fce9 	bl	800c2ee <__lo0bits>
 800c91c:	9b01      	ldr	r3, [sp, #4]
 800c91e:	6163      	str	r3, [r4, #20]
 800c920:	3020      	adds	r0, #32
 800c922:	2201      	movs	r2, #1
 800c924:	e7e8      	b.n	800c8f8 <__d2b+0x64>
 800c926:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c92a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c92e:	6038      	str	r0, [r7, #0]
 800c930:	6918      	ldr	r0, [r3, #16]
 800c932:	f7ff fcbd 	bl	800c2b0 <__hi0bits>
 800c936:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c93a:	e7e5      	b.n	800c908 <__d2b+0x74>
 800c93c:	0800da89 	.word	0x0800da89
 800c940:	0800db11 	.word	0x0800db11

0800c944 <__ratio>:
 800c944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c948:	b085      	sub	sp, #20
 800c94a:	e9cd 1000 	strd	r1, r0, [sp]
 800c94e:	a902      	add	r1, sp, #8
 800c950:	f7ff ff56 	bl	800c800 <__b2d>
 800c954:	9800      	ldr	r0, [sp, #0]
 800c956:	a903      	add	r1, sp, #12
 800c958:	ec55 4b10 	vmov	r4, r5, d0
 800c95c:	f7ff ff50 	bl	800c800 <__b2d>
 800c960:	9b01      	ldr	r3, [sp, #4]
 800c962:	6919      	ldr	r1, [r3, #16]
 800c964:	9b00      	ldr	r3, [sp, #0]
 800c966:	691b      	ldr	r3, [r3, #16]
 800c968:	1ac9      	subs	r1, r1, r3
 800c96a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c96e:	1a9b      	subs	r3, r3, r2
 800c970:	ec5b ab10 	vmov	sl, fp, d0
 800c974:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c978:	2b00      	cmp	r3, #0
 800c97a:	bfce      	itee	gt
 800c97c:	462a      	movgt	r2, r5
 800c97e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c982:	465a      	movle	r2, fp
 800c984:	462f      	mov	r7, r5
 800c986:	46d9      	mov	r9, fp
 800c988:	bfcc      	ite	gt
 800c98a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c98e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c992:	464b      	mov	r3, r9
 800c994:	4652      	mov	r2, sl
 800c996:	4620      	mov	r0, r4
 800c998:	4639      	mov	r1, r7
 800c99a:	f7f3 ff6f 	bl	800087c <__aeabi_ddiv>
 800c99e:	ec41 0b10 	vmov	d0, r0, r1
 800c9a2:	b005      	add	sp, #20
 800c9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9a8 <__copybits>:
 800c9a8:	3901      	subs	r1, #1
 800c9aa:	b570      	push	{r4, r5, r6, lr}
 800c9ac:	1149      	asrs	r1, r1, #5
 800c9ae:	6914      	ldr	r4, [r2, #16]
 800c9b0:	3101      	adds	r1, #1
 800c9b2:	f102 0314 	add.w	r3, r2, #20
 800c9b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c9ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c9be:	1f05      	subs	r5, r0, #4
 800c9c0:	42a3      	cmp	r3, r4
 800c9c2:	d30c      	bcc.n	800c9de <__copybits+0x36>
 800c9c4:	1aa3      	subs	r3, r4, r2
 800c9c6:	3b11      	subs	r3, #17
 800c9c8:	f023 0303 	bic.w	r3, r3, #3
 800c9cc:	3211      	adds	r2, #17
 800c9ce:	42a2      	cmp	r2, r4
 800c9d0:	bf88      	it	hi
 800c9d2:	2300      	movhi	r3, #0
 800c9d4:	4418      	add	r0, r3
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	4288      	cmp	r0, r1
 800c9da:	d305      	bcc.n	800c9e8 <__copybits+0x40>
 800c9dc:	bd70      	pop	{r4, r5, r6, pc}
 800c9de:	f853 6b04 	ldr.w	r6, [r3], #4
 800c9e2:	f845 6f04 	str.w	r6, [r5, #4]!
 800c9e6:	e7eb      	b.n	800c9c0 <__copybits+0x18>
 800c9e8:	f840 3b04 	str.w	r3, [r0], #4
 800c9ec:	e7f4      	b.n	800c9d8 <__copybits+0x30>

0800c9ee <__any_on>:
 800c9ee:	f100 0214 	add.w	r2, r0, #20
 800c9f2:	6900      	ldr	r0, [r0, #16]
 800c9f4:	114b      	asrs	r3, r1, #5
 800c9f6:	4298      	cmp	r0, r3
 800c9f8:	b510      	push	{r4, lr}
 800c9fa:	db11      	blt.n	800ca20 <__any_on+0x32>
 800c9fc:	dd0a      	ble.n	800ca14 <__any_on+0x26>
 800c9fe:	f011 011f 	ands.w	r1, r1, #31
 800ca02:	d007      	beq.n	800ca14 <__any_on+0x26>
 800ca04:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca08:	fa24 f001 	lsr.w	r0, r4, r1
 800ca0c:	fa00 f101 	lsl.w	r1, r0, r1
 800ca10:	428c      	cmp	r4, r1
 800ca12:	d10b      	bne.n	800ca2c <__any_on+0x3e>
 800ca14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d803      	bhi.n	800ca24 <__any_on+0x36>
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	bd10      	pop	{r4, pc}
 800ca20:	4603      	mov	r3, r0
 800ca22:	e7f7      	b.n	800ca14 <__any_on+0x26>
 800ca24:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca28:	2900      	cmp	r1, #0
 800ca2a:	d0f5      	beq.n	800ca18 <__any_on+0x2a>
 800ca2c:	2001      	movs	r0, #1
 800ca2e:	e7f6      	b.n	800ca1e <__any_on+0x30>

0800ca30 <_malloc_usable_size_r>:
 800ca30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca34:	1f18      	subs	r0, r3, #4
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	bfbc      	itt	lt
 800ca3a:	580b      	ldrlt	r3, [r1, r0]
 800ca3c:	18c0      	addlt	r0, r0, r3
 800ca3e:	4770      	bx	lr

0800ca40 <__ascii_wctomb>:
 800ca40:	4603      	mov	r3, r0
 800ca42:	4608      	mov	r0, r1
 800ca44:	b141      	cbz	r1, 800ca58 <__ascii_wctomb+0x18>
 800ca46:	2aff      	cmp	r2, #255	@ 0xff
 800ca48:	d904      	bls.n	800ca54 <__ascii_wctomb+0x14>
 800ca4a:	228a      	movs	r2, #138	@ 0x8a
 800ca4c:	601a      	str	r2, [r3, #0]
 800ca4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca52:	4770      	bx	lr
 800ca54:	700a      	strb	r2, [r1, #0]
 800ca56:	2001      	movs	r0, #1
 800ca58:	4770      	bx	lr

0800ca5a <__ssputs_r>:
 800ca5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca5e:	688e      	ldr	r6, [r1, #8]
 800ca60:	461f      	mov	r7, r3
 800ca62:	42be      	cmp	r6, r7
 800ca64:	680b      	ldr	r3, [r1, #0]
 800ca66:	4682      	mov	sl, r0
 800ca68:	460c      	mov	r4, r1
 800ca6a:	4690      	mov	r8, r2
 800ca6c:	d82d      	bhi.n	800caca <__ssputs_r+0x70>
 800ca6e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca72:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ca76:	d026      	beq.n	800cac6 <__ssputs_r+0x6c>
 800ca78:	6965      	ldr	r5, [r4, #20]
 800ca7a:	6909      	ldr	r1, [r1, #16]
 800ca7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca80:	eba3 0901 	sub.w	r9, r3, r1
 800ca84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca88:	1c7b      	adds	r3, r7, #1
 800ca8a:	444b      	add	r3, r9
 800ca8c:	106d      	asrs	r5, r5, #1
 800ca8e:	429d      	cmp	r5, r3
 800ca90:	bf38      	it	cc
 800ca92:	461d      	movcc	r5, r3
 800ca94:	0553      	lsls	r3, r2, #21
 800ca96:	d527      	bpl.n	800cae8 <__ssputs_r+0x8e>
 800ca98:	4629      	mov	r1, r5
 800ca9a:	f7fd feb1 	bl	800a800 <_malloc_r>
 800ca9e:	4606      	mov	r6, r0
 800caa0:	b360      	cbz	r0, 800cafc <__ssputs_r+0xa2>
 800caa2:	6921      	ldr	r1, [r4, #16]
 800caa4:	464a      	mov	r2, r9
 800caa6:	f7fe ff64 	bl	800b972 <memcpy>
 800caaa:	89a3      	ldrh	r3, [r4, #12]
 800caac:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cab4:	81a3      	strh	r3, [r4, #12]
 800cab6:	6126      	str	r6, [r4, #16]
 800cab8:	6165      	str	r5, [r4, #20]
 800caba:	444e      	add	r6, r9
 800cabc:	eba5 0509 	sub.w	r5, r5, r9
 800cac0:	6026      	str	r6, [r4, #0]
 800cac2:	60a5      	str	r5, [r4, #8]
 800cac4:	463e      	mov	r6, r7
 800cac6:	42be      	cmp	r6, r7
 800cac8:	d900      	bls.n	800cacc <__ssputs_r+0x72>
 800caca:	463e      	mov	r6, r7
 800cacc:	6820      	ldr	r0, [r4, #0]
 800cace:	4632      	mov	r2, r6
 800cad0:	4641      	mov	r1, r8
 800cad2:	f000 fd29 	bl	800d528 <memmove>
 800cad6:	68a3      	ldr	r3, [r4, #8]
 800cad8:	1b9b      	subs	r3, r3, r6
 800cada:	60a3      	str	r3, [r4, #8]
 800cadc:	6823      	ldr	r3, [r4, #0]
 800cade:	4433      	add	r3, r6
 800cae0:	6023      	str	r3, [r4, #0]
 800cae2:	2000      	movs	r0, #0
 800cae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cae8:	462a      	mov	r2, r5
 800caea:	f7fd ff1d 	bl	800a928 <_realloc_r>
 800caee:	4606      	mov	r6, r0
 800caf0:	2800      	cmp	r0, #0
 800caf2:	d1e0      	bne.n	800cab6 <__ssputs_r+0x5c>
 800caf4:	6921      	ldr	r1, [r4, #16]
 800caf6:	4650      	mov	r0, sl
 800caf8:	f7fe ff52 	bl	800b9a0 <_free_r>
 800cafc:	230c      	movs	r3, #12
 800cafe:	f8ca 3000 	str.w	r3, [sl]
 800cb02:	89a3      	ldrh	r3, [r4, #12]
 800cb04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb08:	81a3      	strh	r3, [r4, #12]
 800cb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb0e:	e7e9      	b.n	800cae4 <__ssputs_r+0x8a>

0800cb10 <_svfiprintf_r>:
 800cb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb14:	4698      	mov	r8, r3
 800cb16:	898b      	ldrh	r3, [r1, #12]
 800cb18:	061b      	lsls	r3, r3, #24
 800cb1a:	b09d      	sub	sp, #116	@ 0x74
 800cb1c:	4607      	mov	r7, r0
 800cb1e:	460d      	mov	r5, r1
 800cb20:	4614      	mov	r4, r2
 800cb22:	d510      	bpl.n	800cb46 <_svfiprintf_r+0x36>
 800cb24:	690b      	ldr	r3, [r1, #16]
 800cb26:	b973      	cbnz	r3, 800cb46 <_svfiprintf_r+0x36>
 800cb28:	2140      	movs	r1, #64	@ 0x40
 800cb2a:	f7fd fe69 	bl	800a800 <_malloc_r>
 800cb2e:	6028      	str	r0, [r5, #0]
 800cb30:	6128      	str	r0, [r5, #16]
 800cb32:	b930      	cbnz	r0, 800cb42 <_svfiprintf_r+0x32>
 800cb34:	230c      	movs	r3, #12
 800cb36:	603b      	str	r3, [r7, #0]
 800cb38:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3c:	b01d      	add	sp, #116	@ 0x74
 800cb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb42:	2340      	movs	r3, #64	@ 0x40
 800cb44:	616b      	str	r3, [r5, #20]
 800cb46:	2300      	movs	r3, #0
 800cb48:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb4a:	2320      	movs	r3, #32
 800cb4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb50:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb54:	2330      	movs	r3, #48	@ 0x30
 800cb56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ccf4 <_svfiprintf_r+0x1e4>
 800cb5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb5e:	f04f 0901 	mov.w	r9, #1
 800cb62:	4623      	mov	r3, r4
 800cb64:	469a      	mov	sl, r3
 800cb66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb6a:	b10a      	cbz	r2, 800cb70 <_svfiprintf_r+0x60>
 800cb6c:	2a25      	cmp	r2, #37	@ 0x25
 800cb6e:	d1f9      	bne.n	800cb64 <_svfiprintf_r+0x54>
 800cb70:	ebba 0b04 	subs.w	fp, sl, r4
 800cb74:	d00b      	beq.n	800cb8e <_svfiprintf_r+0x7e>
 800cb76:	465b      	mov	r3, fp
 800cb78:	4622      	mov	r2, r4
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	4638      	mov	r0, r7
 800cb7e:	f7ff ff6c 	bl	800ca5a <__ssputs_r>
 800cb82:	3001      	adds	r0, #1
 800cb84:	f000 80a7 	beq.w	800ccd6 <_svfiprintf_r+0x1c6>
 800cb88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb8a:	445a      	add	r2, fp
 800cb8c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb8e:	f89a 3000 	ldrb.w	r3, [sl]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f000 809f 	beq.w	800ccd6 <_svfiprintf_r+0x1c6>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cba2:	f10a 0a01 	add.w	sl, sl, #1
 800cba6:	9304      	str	r3, [sp, #16]
 800cba8:	9307      	str	r3, [sp, #28]
 800cbaa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cbae:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbb0:	4654      	mov	r4, sl
 800cbb2:	2205      	movs	r2, #5
 800cbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbb8:	484e      	ldr	r0, [pc, #312]	@ (800ccf4 <_svfiprintf_r+0x1e4>)
 800cbba:	f7f3 fb29 	bl	8000210 <memchr>
 800cbbe:	9a04      	ldr	r2, [sp, #16]
 800cbc0:	b9d8      	cbnz	r0, 800cbfa <_svfiprintf_r+0xea>
 800cbc2:	06d0      	lsls	r0, r2, #27
 800cbc4:	bf44      	itt	mi
 800cbc6:	2320      	movmi	r3, #32
 800cbc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbcc:	0711      	lsls	r1, r2, #28
 800cbce:	bf44      	itt	mi
 800cbd0:	232b      	movmi	r3, #43	@ 0x2b
 800cbd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbd6:	f89a 3000 	ldrb.w	r3, [sl]
 800cbda:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbdc:	d015      	beq.n	800cc0a <_svfiprintf_r+0xfa>
 800cbde:	9a07      	ldr	r2, [sp, #28]
 800cbe0:	4654      	mov	r4, sl
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	f04f 0c0a 	mov.w	ip, #10
 800cbe8:	4621      	mov	r1, r4
 800cbea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbee:	3b30      	subs	r3, #48	@ 0x30
 800cbf0:	2b09      	cmp	r3, #9
 800cbf2:	d94b      	bls.n	800cc8c <_svfiprintf_r+0x17c>
 800cbf4:	b1b0      	cbz	r0, 800cc24 <_svfiprintf_r+0x114>
 800cbf6:	9207      	str	r2, [sp, #28]
 800cbf8:	e014      	b.n	800cc24 <_svfiprintf_r+0x114>
 800cbfa:	eba0 0308 	sub.w	r3, r0, r8
 800cbfe:	fa09 f303 	lsl.w	r3, r9, r3
 800cc02:	4313      	orrs	r3, r2
 800cc04:	9304      	str	r3, [sp, #16]
 800cc06:	46a2      	mov	sl, r4
 800cc08:	e7d2      	b.n	800cbb0 <_svfiprintf_r+0xa0>
 800cc0a:	9b03      	ldr	r3, [sp, #12]
 800cc0c:	1d19      	adds	r1, r3, #4
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	9103      	str	r1, [sp, #12]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	bfbb      	ittet	lt
 800cc16:	425b      	neglt	r3, r3
 800cc18:	f042 0202 	orrlt.w	r2, r2, #2
 800cc1c:	9307      	strge	r3, [sp, #28]
 800cc1e:	9307      	strlt	r3, [sp, #28]
 800cc20:	bfb8      	it	lt
 800cc22:	9204      	strlt	r2, [sp, #16]
 800cc24:	7823      	ldrb	r3, [r4, #0]
 800cc26:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc28:	d10a      	bne.n	800cc40 <_svfiprintf_r+0x130>
 800cc2a:	7863      	ldrb	r3, [r4, #1]
 800cc2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc2e:	d132      	bne.n	800cc96 <_svfiprintf_r+0x186>
 800cc30:	9b03      	ldr	r3, [sp, #12]
 800cc32:	1d1a      	adds	r2, r3, #4
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	9203      	str	r2, [sp, #12]
 800cc38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc3c:	3402      	adds	r4, #2
 800cc3e:	9305      	str	r3, [sp, #20]
 800cc40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cd04 <_svfiprintf_r+0x1f4>
 800cc44:	7821      	ldrb	r1, [r4, #0]
 800cc46:	2203      	movs	r2, #3
 800cc48:	4650      	mov	r0, sl
 800cc4a:	f7f3 fae1 	bl	8000210 <memchr>
 800cc4e:	b138      	cbz	r0, 800cc60 <_svfiprintf_r+0x150>
 800cc50:	9b04      	ldr	r3, [sp, #16]
 800cc52:	eba0 000a 	sub.w	r0, r0, sl
 800cc56:	2240      	movs	r2, #64	@ 0x40
 800cc58:	4082      	lsls	r2, r0
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	3401      	adds	r4, #1
 800cc5e:	9304      	str	r3, [sp, #16]
 800cc60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc64:	4824      	ldr	r0, [pc, #144]	@ (800ccf8 <_svfiprintf_r+0x1e8>)
 800cc66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc6a:	2206      	movs	r2, #6
 800cc6c:	f7f3 fad0 	bl	8000210 <memchr>
 800cc70:	2800      	cmp	r0, #0
 800cc72:	d036      	beq.n	800cce2 <_svfiprintf_r+0x1d2>
 800cc74:	4b21      	ldr	r3, [pc, #132]	@ (800ccfc <_svfiprintf_r+0x1ec>)
 800cc76:	bb1b      	cbnz	r3, 800ccc0 <_svfiprintf_r+0x1b0>
 800cc78:	9b03      	ldr	r3, [sp, #12]
 800cc7a:	3307      	adds	r3, #7
 800cc7c:	f023 0307 	bic.w	r3, r3, #7
 800cc80:	3308      	adds	r3, #8
 800cc82:	9303      	str	r3, [sp, #12]
 800cc84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc86:	4433      	add	r3, r6
 800cc88:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc8a:	e76a      	b.n	800cb62 <_svfiprintf_r+0x52>
 800cc8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc90:	460c      	mov	r4, r1
 800cc92:	2001      	movs	r0, #1
 800cc94:	e7a8      	b.n	800cbe8 <_svfiprintf_r+0xd8>
 800cc96:	2300      	movs	r3, #0
 800cc98:	3401      	adds	r4, #1
 800cc9a:	9305      	str	r3, [sp, #20]
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	f04f 0c0a 	mov.w	ip, #10
 800cca2:	4620      	mov	r0, r4
 800cca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cca8:	3a30      	subs	r2, #48	@ 0x30
 800ccaa:	2a09      	cmp	r2, #9
 800ccac:	d903      	bls.n	800ccb6 <_svfiprintf_r+0x1a6>
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d0c6      	beq.n	800cc40 <_svfiprintf_r+0x130>
 800ccb2:	9105      	str	r1, [sp, #20]
 800ccb4:	e7c4      	b.n	800cc40 <_svfiprintf_r+0x130>
 800ccb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccba:	4604      	mov	r4, r0
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e7f0      	b.n	800cca2 <_svfiprintf_r+0x192>
 800ccc0:	ab03      	add	r3, sp, #12
 800ccc2:	9300      	str	r3, [sp, #0]
 800ccc4:	462a      	mov	r2, r5
 800ccc6:	4b0e      	ldr	r3, [pc, #56]	@ (800cd00 <_svfiprintf_r+0x1f0>)
 800ccc8:	a904      	add	r1, sp, #16
 800ccca:	4638      	mov	r0, r7
 800cccc:	f3af 8000 	nop.w
 800ccd0:	1c42      	adds	r2, r0, #1
 800ccd2:	4606      	mov	r6, r0
 800ccd4:	d1d6      	bne.n	800cc84 <_svfiprintf_r+0x174>
 800ccd6:	89ab      	ldrh	r3, [r5, #12]
 800ccd8:	065b      	lsls	r3, r3, #25
 800ccda:	f53f af2d 	bmi.w	800cb38 <_svfiprintf_r+0x28>
 800ccde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cce0:	e72c      	b.n	800cb3c <_svfiprintf_r+0x2c>
 800cce2:	ab03      	add	r3, sp, #12
 800cce4:	9300      	str	r3, [sp, #0]
 800cce6:	462a      	mov	r2, r5
 800cce8:	4b05      	ldr	r3, [pc, #20]	@ (800cd00 <_svfiprintf_r+0x1f0>)
 800ccea:	a904      	add	r1, sp, #16
 800ccec:	4638      	mov	r0, r7
 800ccee:	f000 f9bb 	bl	800d068 <_printf_i>
 800ccf2:	e7ed      	b.n	800ccd0 <_svfiprintf_r+0x1c0>
 800ccf4:	0800dc68 	.word	0x0800dc68
 800ccf8:	0800dc72 	.word	0x0800dc72
 800ccfc:	00000000 	.word	0x00000000
 800cd00:	0800ca5b 	.word	0x0800ca5b
 800cd04:	0800dc6e 	.word	0x0800dc6e

0800cd08 <__sfputc_r>:
 800cd08:	6893      	ldr	r3, [r2, #8]
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	b410      	push	{r4}
 800cd10:	6093      	str	r3, [r2, #8]
 800cd12:	da08      	bge.n	800cd26 <__sfputc_r+0x1e>
 800cd14:	6994      	ldr	r4, [r2, #24]
 800cd16:	42a3      	cmp	r3, r4
 800cd18:	db01      	blt.n	800cd1e <__sfputc_r+0x16>
 800cd1a:	290a      	cmp	r1, #10
 800cd1c:	d103      	bne.n	800cd26 <__sfputc_r+0x1e>
 800cd1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd22:	f000 bb6d 	b.w	800d400 <__swbuf_r>
 800cd26:	6813      	ldr	r3, [r2, #0]
 800cd28:	1c58      	adds	r0, r3, #1
 800cd2a:	6010      	str	r0, [r2, #0]
 800cd2c:	7019      	strb	r1, [r3, #0]
 800cd2e:	4608      	mov	r0, r1
 800cd30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <__sfputs_r>:
 800cd36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd38:	4606      	mov	r6, r0
 800cd3a:	460f      	mov	r7, r1
 800cd3c:	4614      	mov	r4, r2
 800cd3e:	18d5      	adds	r5, r2, r3
 800cd40:	42ac      	cmp	r4, r5
 800cd42:	d101      	bne.n	800cd48 <__sfputs_r+0x12>
 800cd44:	2000      	movs	r0, #0
 800cd46:	e007      	b.n	800cd58 <__sfputs_r+0x22>
 800cd48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd4c:	463a      	mov	r2, r7
 800cd4e:	4630      	mov	r0, r6
 800cd50:	f7ff ffda 	bl	800cd08 <__sfputc_r>
 800cd54:	1c43      	adds	r3, r0, #1
 800cd56:	d1f3      	bne.n	800cd40 <__sfputs_r+0xa>
 800cd58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd5c <_vfiprintf_r>:
 800cd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd60:	460d      	mov	r5, r1
 800cd62:	b09d      	sub	sp, #116	@ 0x74
 800cd64:	4614      	mov	r4, r2
 800cd66:	4698      	mov	r8, r3
 800cd68:	4606      	mov	r6, r0
 800cd6a:	b118      	cbz	r0, 800cd74 <_vfiprintf_r+0x18>
 800cd6c:	6a03      	ldr	r3, [r0, #32]
 800cd6e:	b90b      	cbnz	r3, 800cd74 <_vfiprintf_r+0x18>
 800cd70:	f7fe fca2 	bl	800b6b8 <__sinit>
 800cd74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd76:	07d9      	lsls	r1, r3, #31
 800cd78:	d405      	bmi.n	800cd86 <_vfiprintf_r+0x2a>
 800cd7a:	89ab      	ldrh	r3, [r5, #12]
 800cd7c:	059a      	lsls	r2, r3, #22
 800cd7e:	d402      	bmi.n	800cd86 <_vfiprintf_r+0x2a>
 800cd80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd82:	f7fe fdf4 	bl	800b96e <__retarget_lock_acquire_recursive>
 800cd86:	89ab      	ldrh	r3, [r5, #12]
 800cd88:	071b      	lsls	r3, r3, #28
 800cd8a:	d501      	bpl.n	800cd90 <_vfiprintf_r+0x34>
 800cd8c:	692b      	ldr	r3, [r5, #16]
 800cd8e:	b99b      	cbnz	r3, 800cdb8 <_vfiprintf_r+0x5c>
 800cd90:	4629      	mov	r1, r5
 800cd92:	4630      	mov	r0, r6
 800cd94:	f000 fb72 	bl	800d47c <__swsetup_r>
 800cd98:	b170      	cbz	r0, 800cdb8 <_vfiprintf_r+0x5c>
 800cd9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd9c:	07dc      	lsls	r4, r3, #31
 800cd9e:	d504      	bpl.n	800cdaa <_vfiprintf_r+0x4e>
 800cda0:	f04f 30ff 	mov.w	r0, #4294967295
 800cda4:	b01d      	add	sp, #116	@ 0x74
 800cda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdaa:	89ab      	ldrh	r3, [r5, #12]
 800cdac:	0598      	lsls	r0, r3, #22
 800cdae:	d4f7      	bmi.n	800cda0 <_vfiprintf_r+0x44>
 800cdb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdb2:	f7fe fddd 	bl	800b970 <__retarget_lock_release_recursive>
 800cdb6:	e7f3      	b.n	800cda0 <_vfiprintf_r+0x44>
 800cdb8:	2300      	movs	r3, #0
 800cdba:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdbc:	2320      	movs	r3, #32
 800cdbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cdc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdc6:	2330      	movs	r3, #48	@ 0x30
 800cdc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf78 <_vfiprintf_r+0x21c>
 800cdcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cdd0:	f04f 0901 	mov.w	r9, #1
 800cdd4:	4623      	mov	r3, r4
 800cdd6:	469a      	mov	sl, r3
 800cdd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cddc:	b10a      	cbz	r2, 800cde2 <_vfiprintf_r+0x86>
 800cdde:	2a25      	cmp	r2, #37	@ 0x25
 800cde0:	d1f9      	bne.n	800cdd6 <_vfiprintf_r+0x7a>
 800cde2:	ebba 0b04 	subs.w	fp, sl, r4
 800cde6:	d00b      	beq.n	800ce00 <_vfiprintf_r+0xa4>
 800cde8:	465b      	mov	r3, fp
 800cdea:	4622      	mov	r2, r4
 800cdec:	4629      	mov	r1, r5
 800cdee:	4630      	mov	r0, r6
 800cdf0:	f7ff ffa1 	bl	800cd36 <__sfputs_r>
 800cdf4:	3001      	adds	r0, #1
 800cdf6:	f000 80a7 	beq.w	800cf48 <_vfiprintf_r+0x1ec>
 800cdfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdfc:	445a      	add	r2, fp
 800cdfe:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce00:	f89a 3000 	ldrb.w	r3, [sl]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	f000 809f 	beq.w	800cf48 <_vfiprintf_r+0x1ec>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce14:	f10a 0a01 	add.w	sl, sl, #1
 800ce18:	9304      	str	r3, [sp, #16]
 800ce1a:	9307      	str	r3, [sp, #28]
 800ce1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce20:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce22:	4654      	mov	r4, sl
 800ce24:	2205      	movs	r2, #5
 800ce26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce2a:	4853      	ldr	r0, [pc, #332]	@ (800cf78 <_vfiprintf_r+0x21c>)
 800ce2c:	f7f3 f9f0 	bl	8000210 <memchr>
 800ce30:	9a04      	ldr	r2, [sp, #16]
 800ce32:	b9d8      	cbnz	r0, 800ce6c <_vfiprintf_r+0x110>
 800ce34:	06d1      	lsls	r1, r2, #27
 800ce36:	bf44      	itt	mi
 800ce38:	2320      	movmi	r3, #32
 800ce3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce3e:	0713      	lsls	r3, r2, #28
 800ce40:	bf44      	itt	mi
 800ce42:	232b      	movmi	r3, #43	@ 0x2b
 800ce44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce48:	f89a 3000 	ldrb.w	r3, [sl]
 800ce4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce4e:	d015      	beq.n	800ce7c <_vfiprintf_r+0x120>
 800ce50:	9a07      	ldr	r2, [sp, #28]
 800ce52:	4654      	mov	r4, sl
 800ce54:	2000      	movs	r0, #0
 800ce56:	f04f 0c0a 	mov.w	ip, #10
 800ce5a:	4621      	mov	r1, r4
 800ce5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce60:	3b30      	subs	r3, #48	@ 0x30
 800ce62:	2b09      	cmp	r3, #9
 800ce64:	d94b      	bls.n	800cefe <_vfiprintf_r+0x1a2>
 800ce66:	b1b0      	cbz	r0, 800ce96 <_vfiprintf_r+0x13a>
 800ce68:	9207      	str	r2, [sp, #28]
 800ce6a:	e014      	b.n	800ce96 <_vfiprintf_r+0x13a>
 800ce6c:	eba0 0308 	sub.w	r3, r0, r8
 800ce70:	fa09 f303 	lsl.w	r3, r9, r3
 800ce74:	4313      	orrs	r3, r2
 800ce76:	9304      	str	r3, [sp, #16]
 800ce78:	46a2      	mov	sl, r4
 800ce7a:	e7d2      	b.n	800ce22 <_vfiprintf_r+0xc6>
 800ce7c:	9b03      	ldr	r3, [sp, #12]
 800ce7e:	1d19      	adds	r1, r3, #4
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	9103      	str	r1, [sp, #12]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	bfbb      	ittet	lt
 800ce88:	425b      	neglt	r3, r3
 800ce8a:	f042 0202 	orrlt.w	r2, r2, #2
 800ce8e:	9307      	strge	r3, [sp, #28]
 800ce90:	9307      	strlt	r3, [sp, #28]
 800ce92:	bfb8      	it	lt
 800ce94:	9204      	strlt	r2, [sp, #16]
 800ce96:	7823      	ldrb	r3, [r4, #0]
 800ce98:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce9a:	d10a      	bne.n	800ceb2 <_vfiprintf_r+0x156>
 800ce9c:	7863      	ldrb	r3, [r4, #1]
 800ce9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cea0:	d132      	bne.n	800cf08 <_vfiprintf_r+0x1ac>
 800cea2:	9b03      	ldr	r3, [sp, #12]
 800cea4:	1d1a      	adds	r2, r3, #4
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	9203      	str	r2, [sp, #12]
 800ceaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ceae:	3402      	adds	r4, #2
 800ceb0:	9305      	str	r3, [sp, #20]
 800ceb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf88 <_vfiprintf_r+0x22c>
 800ceb6:	7821      	ldrb	r1, [r4, #0]
 800ceb8:	2203      	movs	r2, #3
 800ceba:	4650      	mov	r0, sl
 800cebc:	f7f3 f9a8 	bl	8000210 <memchr>
 800cec0:	b138      	cbz	r0, 800ced2 <_vfiprintf_r+0x176>
 800cec2:	9b04      	ldr	r3, [sp, #16]
 800cec4:	eba0 000a 	sub.w	r0, r0, sl
 800cec8:	2240      	movs	r2, #64	@ 0x40
 800ceca:	4082      	lsls	r2, r0
 800cecc:	4313      	orrs	r3, r2
 800cece:	3401      	adds	r4, #1
 800ced0:	9304      	str	r3, [sp, #16]
 800ced2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ced6:	4829      	ldr	r0, [pc, #164]	@ (800cf7c <_vfiprintf_r+0x220>)
 800ced8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cedc:	2206      	movs	r2, #6
 800cede:	f7f3 f997 	bl	8000210 <memchr>
 800cee2:	2800      	cmp	r0, #0
 800cee4:	d03f      	beq.n	800cf66 <_vfiprintf_r+0x20a>
 800cee6:	4b26      	ldr	r3, [pc, #152]	@ (800cf80 <_vfiprintf_r+0x224>)
 800cee8:	bb1b      	cbnz	r3, 800cf32 <_vfiprintf_r+0x1d6>
 800ceea:	9b03      	ldr	r3, [sp, #12]
 800ceec:	3307      	adds	r3, #7
 800ceee:	f023 0307 	bic.w	r3, r3, #7
 800cef2:	3308      	adds	r3, #8
 800cef4:	9303      	str	r3, [sp, #12]
 800cef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cef8:	443b      	add	r3, r7
 800cefa:	9309      	str	r3, [sp, #36]	@ 0x24
 800cefc:	e76a      	b.n	800cdd4 <_vfiprintf_r+0x78>
 800cefe:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf02:	460c      	mov	r4, r1
 800cf04:	2001      	movs	r0, #1
 800cf06:	e7a8      	b.n	800ce5a <_vfiprintf_r+0xfe>
 800cf08:	2300      	movs	r3, #0
 800cf0a:	3401      	adds	r4, #1
 800cf0c:	9305      	str	r3, [sp, #20]
 800cf0e:	4619      	mov	r1, r3
 800cf10:	f04f 0c0a 	mov.w	ip, #10
 800cf14:	4620      	mov	r0, r4
 800cf16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf1a:	3a30      	subs	r2, #48	@ 0x30
 800cf1c:	2a09      	cmp	r2, #9
 800cf1e:	d903      	bls.n	800cf28 <_vfiprintf_r+0x1cc>
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d0c6      	beq.n	800ceb2 <_vfiprintf_r+0x156>
 800cf24:	9105      	str	r1, [sp, #20]
 800cf26:	e7c4      	b.n	800ceb2 <_vfiprintf_r+0x156>
 800cf28:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e7f0      	b.n	800cf14 <_vfiprintf_r+0x1b8>
 800cf32:	ab03      	add	r3, sp, #12
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	462a      	mov	r2, r5
 800cf38:	4b12      	ldr	r3, [pc, #72]	@ (800cf84 <_vfiprintf_r+0x228>)
 800cf3a:	a904      	add	r1, sp, #16
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	f3af 8000 	nop.w
 800cf42:	4607      	mov	r7, r0
 800cf44:	1c78      	adds	r0, r7, #1
 800cf46:	d1d6      	bne.n	800cef6 <_vfiprintf_r+0x19a>
 800cf48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf4a:	07d9      	lsls	r1, r3, #31
 800cf4c:	d405      	bmi.n	800cf5a <_vfiprintf_r+0x1fe>
 800cf4e:	89ab      	ldrh	r3, [r5, #12]
 800cf50:	059a      	lsls	r2, r3, #22
 800cf52:	d402      	bmi.n	800cf5a <_vfiprintf_r+0x1fe>
 800cf54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf56:	f7fe fd0b 	bl	800b970 <__retarget_lock_release_recursive>
 800cf5a:	89ab      	ldrh	r3, [r5, #12]
 800cf5c:	065b      	lsls	r3, r3, #25
 800cf5e:	f53f af1f 	bmi.w	800cda0 <_vfiprintf_r+0x44>
 800cf62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf64:	e71e      	b.n	800cda4 <_vfiprintf_r+0x48>
 800cf66:	ab03      	add	r3, sp, #12
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	462a      	mov	r2, r5
 800cf6c:	4b05      	ldr	r3, [pc, #20]	@ (800cf84 <_vfiprintf_r+0x228>)
 800cf6e:	a904      	add	r1, sp, #16
 800cf70:	4630      	mov	r0, r6
 800cf72:	f000 f879 	bl	800d068 <_printf_i>
 800cf76:	e7e4      	b.n	800cf42 <_vfiprintf_r+0x1e6>
 800cf78:	0800dc68 	.word	0x0800dc68
 800cf7c:	0800dc72 	.word	0x0800dc72
 800cf80:	00000000 	.word	0x00000000
 800cf84:	0800cd37 	.word	0x0800cd37
 800cf88:	0800dc6e 	.word	0x0800dc6e

0800cf8c <_printf_common>:
 800cf8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf90:	4616      	mov	r6, r2
 800cf92:	4698      	mov	r8, r3
 800cf94:	688a      	ldr	r2, [r1, #8]
 800cf96:	690b      	ldr	r3, [r1, #16]
 800cf98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	bfb8      	it	lt
 800cfa0:	4613      	movlt	r3, r2
 800cfa2:	6033      	str	r3, [r6, #0]
 800cfa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cfa8:	4607      	mov	r7, r0
 800cfaa:	460c      	mov	r4, r1
 800cfac:	b10a      	cbz	r2, 800cfb2 <_printf_common+0x26>
 800cfae:	3301      	adds	r3, #1
 800cfb0:	6033      	str	r3, [r6, #0]
 800cfb2:	6823      	ldr	r3, [r4, #0]
 800cfb4:	0699      	lsls	r1, r3, #26
 800cfb6:	bf42      	ittt	mi
 800cfb8:	6833      	ldrmi	r3, [r6, #0]
 800cfba:	3302      	addmi	r3, #2
 800cfbc:	6033      	strmi	r3, [r6, #0]
 800cfbe:	6825      	ldr	r5, [r4, #0]
 800cfc0:	f015 0506 	ands.w	r5, r5, #6
 800cfc4:	d106      	bne.n	800cfd4 <_printf_common+0x48>
 800cfc6:	f104 0a19 	add.w	sl, r4, #25
 800cfca:	68e3      	ldr	r3, [r4, #12]
 800cfcc:	6832      	ldr	r2, [r6, #0]
 800cfce:	1a9b      	subs	r3, r3, r2
 800cfd0:	42ab      	cmp	r3, r5
 800cfd2:	dc26      	bgt.n	800d022 <_printf_common+0x96>
 800cfd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cfd8:	6822      	ldr	r2, [r4, #0]
 800cfda:	3b00      	subs	r3, #0
 800cfdc:	bf18      	it	ne
 800cfde:	2301      	movne	r3, #1
 800cfe0:	0692      	lsls	r2, r2, #26
 800cfe2:	d42b      	bmi.n	800d03c <_printf_common+0xb0>
 800cfe4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cfe8:	4641      	mov	r1, r8
 800cfea:	4638      	mov	r0, r7
 800cfec:	47c8      	blx	r9
 800cfee:	3001      	adds	r0, #1
 800cff0:	d01e      	beq.n	800d030 <_printf_common+0xa4>
 800cff2:	6823      	ldr	r3, [r4, #0]
 800cff4:	6922      	ldr	r2, [r4, #16]
 800cff6:	f003 0306 	and.w	r3, r3, #6
 800cffa:	2b04      	cmp	r3, #4
 800cffc:	bf02      	ittt	eq
 800cffe:	68e5      	ldreq	r5, [r4, #12]
 800d000:	6833      	ldreq	r3, [r6, #0]
 800d002:	1aed      	subeq	r5, r5, r3
 800d004:	68a3      	ldr	r3, [r4, #8]
 800d006:	bf0c      	ite	eq
 800d008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d00c:	2500      	movne	r5, #0
 800d00e:	4293      	cmp	r3, r2
 800d010:	bfc4      	itt	gt
 800d012:	1a9b      	subgt	r3, r3, r2
 800d014:	18ed      	addgt	r5, r5, r3
 800d016:	2600      	movs	r6, #0
 800d018:	341a      	adds	r4, #26
 800d01a:	42b5      	cmp	r5, r6
 800d01c:	d11a      	bne.n	800d054 <_printf_common+0xc8>
 800d01e:	2000      	movs	r0, #0
 800d020:	e008      	b.n	800d034 <_printf_common+0xa8>
 800d022:	2301      	movs	r3, #1
 800d024:	4652      	mov	r2, sl
 800d026:	4641      	mov	r1, r8
 800d028:	4638      	mov	r0, r7
 800d02a:	47c8      	blx	r9
 800d02c:	3001      	adds	r0, #1
 800d02e:	d103      	bne.n	800d038 <_printf_common+0xac>
 800d030:	f04f 30ff 	mov.w	r0, #4294967295
 800d034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d038:	3501      	adds	r5, #1
 800d03a:	e7c6      	b.n	800cfca <_printf_common+0x3e>
 800d03c:	18e1      	adds	r1, r4, r3
 800d03e:	1c5a      	adds	r2, r3, #1
 800d040:	2030      	movs	r0, #48	@ 0x30
 800d042:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d046:	4422      	add	r2, r4
 800d048:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d04c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d050:	3302      	adds	r3, #2
 800d052:	e7c7      	b.n	800cfe4 <_printf_common+0x58>
 800d054:	2301      	movs	r3, #1
 800d056:	4622      	mov	r2, r4
 800d058:	4641      	mov	r1, r8
 800d05a:	4638      	mov	r0, r7
 800d05c:	47c8      	blx	r9
 800d05e:	3001      	adds	r0, #1
 800d060:	d0e6      	beq.n	800d030 <_printf_common+0xa4>
 800d062:	3601      	adds	r6, #1
 800d064:	e7d9      	b.n	800d01a <_printf_common+0x8e>
	...

0800d068 <_printf_i>:
 800d068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d06c:	7e0f      	ldrb	r7, [r1, #24]
 800d06e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d070:	2f78      	cmp	r7, #120	@ 0x78
 800d072:	4691      	mov	r9, r2
 800d074:	4680      	mov	r8, r0
 800d076:	460c      	mov	r4, r1
 800d078:	469a      	mov	sl, r3
 800d07a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d07e:	d807      	bhi.n	800d090 <_printf_i+0x28>
 800d080:	2f62      	cmp	r7, #98	@ 0x62
 800d082:	d80a      	bhi.n	800d09a <_printf_i+0x32>
 800d084:	2f00      	cmp	r7, #0
 800d086:	f000 80d2 	beq.w	800d22e <_printf_i+0x1c6>
 800d08a:	2f58      	cmp	r7, #88	@ 0x58
 800d08c:	f000 80b9 	beq.w	800d202 <_printf_i+0x19a>
 800d090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d094:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d098:	e03a      	b.n	800d110 <_printf_i+0xa8>
 800d09a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d09e:	2b15      	cmp	r3, #21
 800d0a0:	d8f6      	bhi.n	800d090 <_printf_i+0x28>
 800d0a2:	a101      	add	r1, pc, #4	@ (adr r1, 800d0a8 <_printf_i+0x40>)
 800d0a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0a8:	0800d101 	.word	0x0800d101
 800d0ac:	0800d115 	.word	0x0800d115
 800d0b0:	0800d091 	.word	0x0800d091
 800d0b4:	0800d091 	.word	0x0800d091
 800d0b8:	0800d091 	.word	0x0800d091
 800d0bc:	0800d091 	.word	0x0800d091
 800d0c0:	0800d115 	.word	0x0800d115
 800d0c4:	0800d091 	.word	0x0800d091
 800d0c8:	0800d091 	.word	0x0800d091
 800d0cc:	0800d091 	.word	0x0800d091
 800d0d0:	0800d091 	.word	0x0800d091
 800d0d4:	0800d215 	.word	0x0800d215
 800d0d8:	0800d13f 	.word	0x0800d13f
 800d0dc:	0800d1cf 	.word	0x0800d1cf
 800d0e0:	0800d091 	.word	0x0800d091
 800d0e4:	0800d091 	.word	0x0800d091
 800d0e8:	0800d237 	.word	0x0800d237
 800d0ec:	0800d091 	.word	0x0800d091
 800d0f0:	0800d13f 	.word	0x0800d13f
 800d0f4:	0800d091 	.word	0x0800d091
 800d0f8:	0800d091 	.word	0x0800d091
 800d0fc:	0800d1d7 	.word	0x0800d1d7
 800d100:	6833      	ldr	r3, [r6, #0]
 800d102:	1d1a      	adds	r2, r3, #4
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	6032      	str	r2, [r6, #0]
 800d108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d10c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d110:	2301      	movs	r3, #1
 800d112:	e09d      	b.n	800d250 <_printf_i+0x1e8>
 800d114:	6833      	ldr	r3, [r6, #0]
 800d116:	6820      	ldr	r0, [r4, #0]
 800d118:	1d19      	adds	r1, r3, #4
 800d11a:	6031      	str	r1, [r6, #0]
 800d11c:	0606      	lsls	r6, r0, #24
 800d11e:	d501      	bpl.n	800d124 <_printf_i+0xbc>
 800d120:	681d      	ldr	r5, [r3, #0]
 800d122:	e003      	b.n	800d12c <_printf_i+0xc4>
 800d124:	0645      	lsls	r5, r0, #25
 800d126:	d5fb      	bpl.n	800d120 <_printf_i+0xb8>
 800d128:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d12c:	2d00      	cmp	r5, #0
 800d12e:	da03      	bge.n	800d138 <_printf_i+0xd0>
 800d130:	232d      	movs	r3, #45	@ 0x2d
 800d132:	426d      	negs	r5, r5
 800d134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d138:	4859      	ldr	r0, [pc, #356]	@ (800d2a0 <_printf_i+0x238>)
 800d13a:	230a      	movs	r3, #10
 800d13c:	e011      	b.n	800d162 <_printf_i+0xfa>
 800d13e:	6821      	ldr	r1, [r4, #0]
 800d140:	6833      	ldr	r3, [r6, #0]
 800d142:	0608      	lsls	r0, r1, #24
 800d144:	f853 5b04 	ldr.w	r5, [r3], #4
 800d148:	d402      	bmi.n	800d150 <_printf_i+0xe8>
 800d14a:	0649      	lsls	r1, r1, #25
 800d14c:	bf48      	it	mi
 800d14e:	b2ad      	uxthmi	r5, r5
 800d150:	2f6f      	cmp	r7, #111	@ 0x6f
 800d152:	4853      	ldr	r0, [pc, #332]	@ (800d2a0 <_printf_i+0x238>)
 800d154:	6033      	str	r3, [r6, #0]
 800d156:	bf14      	ite	ne
 800d158:	230a      	movne	r3, #10
 800d15a:	2308      	moveq	r3, #8
 800d15c:	2100      	movs	r1, #0
 800d15e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d162:	6866      	ldr	r6, [r4, #4]
 800d164:	60a6      	str	r6, [r4, #8]
 800d166:	2e00      	cmp	r6, #0
 800d168:	bfa2      	ittt	ge
 800d16a:	6821      	ldrge	r1, [r4, #0]
 800d16c:	f021 0104 	bicge.w	r1, r1, #4
 800d170:	6021      	strge	r1, [r4, #0]
 800d172:	b90d      	cbnz	r5, 800d178 <_printf_i+0x110>
 800d174:	2e00      	cmp	r6, #0
 800d176:	d04b      	beq.n	800d210 <_printf_i+0x1a8>
 800d178:	4616      	mov	r6, r2
 800d17a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d17e:	fb03 5711 	mls	r7, r3, r1, r5
 800d182:	5dc7      	ldrb	r7, [r0, r7]
 800d184:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d188:	462f      	mov	r7, r5
 800d18a:	42bb      	cmp	r3, r7
 800d18c:	460d      	mov	r5, r1
 800d18e:	d9f4      	bls.n	800d17a <_printf_i+0x112>
 800d190:	2b08      	cmp	r3, #8
 800d192:	d10b      	bne.n	800d1ac <_printf_i+0x144>
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	07df      	lsls	r7, r3, #31
 800d198:	d508      	bpl.n	800d1ac <_printf_i+0x144>
 800d19a:	6923      	ldr	r3, [r4, #16]
 800d19c:	6861      	ldr	r1, [r4, #4]
 800d19e:	4299      	cmp	r1, r3
 800d1a0:	bfde      	ittt	le
 800d1a2:	2330      	movle	r3, #48	@ 0x30
 800d1a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d1a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d1ac:	1b92      	subs	r2, r2, r6
 800d1ae:	6122      	str	r2, [r4, #16]
 800d1b0:	f8cd a000 	str.w	sl, [sp]
 800d1b4:	464b      	mov	r3, r9
 800d1b6:	aa03      	add	r2, sp, #12
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	4640      	mov	r0, r8
 800d1bc:	f7ff fee6 	bl	800cf8c <_printf_common>
 800d1c0:	3001      	adds	r0, #1
 800d1c2:	d14a      	bne.n	800d25a <_printf_i+0x1f2>
 800d1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c8:	b004      	add	sp, #16
 800d1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	f043 0320 	orr.w	r3, r3, #32
 800d1d4:	6023      	str	r3, [r4, #0]
 800d1d6:	4833      	ldr	r0, [pc, #204]	@ (800d2a4 <_printf_i+0x23c>)
 800d1d8:	2778      	movs	r7, #120	@ 0x78
 800d1da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d1de:	6823      	ldr	r3, [r4, #0]
 800d1e0:	6831      	ldr	r1, [r6, #0]
 800d1e2:	061f      	lsls	r7, r3, #24
 800d1e4:	f851 5b04 	ldr.w	r5, [r1], #4
 800d1e8:	d402      	bmi.n	800d1f0 <_printf_i+0x188>
 800d1ea:	065f      	lsls	r7, r3, #25
 800d1ec:	bf48      	it	mi
 800d1ee:	b2ad      	uxthmi	r5, r5
 800d1f0:	6031      	str	r1, [r6, #0]
 800d1f2:	07d9      	lsls	r1, r3, #31
 800d1f4:	bf44      	itt	mi
 800d1f6:	f043 0320 	orrmi.w	r3, r3, #32
 800d1fa:	6023      	strmi	r3, [r4, #0]
 800d1fc:	b11d      	cbz	r5, 800d206 <_printf_i+0x19e>
 800d1fe:	2310      	movs	r3, #16
 800d200:	e7ac      	b.n	800d15c <_printf_i+0xf4>
 800d202:	4827      	ldr	r0, [pc, #156]	@ (800d2a0 <_printf_i+0x238>)
 800d204:	e7e9      	b.n	800d1da <_printf_i+0x172>
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	f023 0320 	bic.w	r3, r3, #32
 800d20c:	6023      	str	r3, [r4, #0]
 800d20e:	e7f6      	b.n	800d1fe <_printf_i+0x196>
 800d210:	4616      	mov	r6, r2
 800d212:	e7bd      	b.n	800d190 <_printf_i+0x128>
 800d214:	6833      	ldr	r3, [r6, #0]
 800d216:	6825      	ldr	r5, [r4, #0]
 800d218:	6961      	ldr	r1, [r4, #20]
 800d21a:	1d18      	adds	r0, r3, #4
 800d21c:	6030      	str	r0, [r6, #0]
 800d21e:	062e      	lsls	r6, r5, #24
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	d501      	bpl.n	800d228 <_printf_i+0x1c0>
 800d224:	6019      	str	r1, [r3, #0]
 800d226:	e002      	b.n	800d22e <_printf_i+0x1c6>
 800d228:	0668      	lsls	r0, r5, #25
 800d22a:	d5fb      	bpl.n	800d224 <_printf_i+0x1bc>
 800d22c:	8019      	strh	r1, [r3, #0]
 800d22e:	2300      	movs	r3, #0
 800d230:	6123      	str	r3, [r4, #16]
 800d232:	4616      	mov	r6, r2
 800d234:	e7bc      	b.n	800d1b0 <_printf_i+0x148>
 800d236:	6833      	ldr	r3, [r6, #0]
 800d238:	1d1a      	adds	r2, r3, #4
 800d23a:	6032      	str	r2, [r6, #0]
 800d23c:	681e      	ldr	r6, [r3, #0]
 800d23e:	6862      	ldr	r2, [r4, #4]
 800d240:	2100      	movs	r1, #0
 800d242:	4630      	mov	r0, r6
 800d244:	f7f2 ffe4 	bl	8000210 <memchr>
 800d248:	b108      	cbz	r0, 800d24e <_printf_i+0x1e6>
 800d24a:	1b80      	subs	r0, r0, r6
 800d24c:	6060      	str	r0, [r4, #4]
 800d24e:	6863      	ldr	r3, [r4, #4]
 800d250:	6123      	str	r3, [r4, #16]
 800d252:	2300      	movs	r3, #0
 800d254:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d258:	e7aa      	b.n	800d1b0 <_printf_i+0x148>
 800d25a:	6923      	ldr	r3, [r4, #16]
 800d25c:	4632      	mov	r2, r6
 800d25e:	4649      	mov	r1, r9
 800d260:	4640      	mov	r0, r8
 800d262:	47d0      	blx	sl
 800d264:	3001      	adds	r0, #1
 800d266:	d0ad      	beq.n	800d1c4 <_printf_i+0x15c>
 800d268:	6823      	ldr	r3, [r4, #0]
 800d26a:	079b      	lsls	r3, r3, #30
 800d26c:	d413      	bmi.n	800d296 <_printf_i+0x22e>
 800d26e:	68e0      	ldr	r0, [r4, #12]
 800d270:	9b03      	ldr	r3, [sp, #12]
 800d272:	4298      	cmp	r0, r3
 800d274:	bfb8      	it	lt
 800d276:	4618      	movlt	r0, r3
 800d278:	e7a6      	b.n	800d1c8 <_printf_i+0x160>
 800d27a:	2301      	movs	r3, #1
 800d27c:	4632      	mov	r2, r6
 800d27e:	4649      	mov	r1, r9
 800d280:	4640      	mov	r0, r8
 800d282:	47d0      	blx	sl
 800d284:	3001      	adds	r0, #1
 800d286:	d09d      	beq.n	800d1c4 <_printf_i+0x15c>
 800d288:	3501      	adds	r5, #1
 800d28a:	68e3      	ldr	r3, [r4, #12]
 800d28c:	9903      	ldr	r1, [sp, #12]
 800d28e:	1a5b      	subs	r3, r3, r1
 800d290:	42ab      	cmp	r3, r5
 800d292:	dcf2      	bgt.n	800d27a <_printf_i+0x212>
 800d294:	e7eb      	b.n	800d26e <_printf_i+0x206>
 800d296:	2500      	movs	r5, #0
 800d298:	f104 0619 	add.w	r6, r4, #25
 800d29c:	e7f5      	b.n	800d28a <_printf_i+0x222>
 800d29e:	bf00      	nop
 800d2a0:	0800dc79 	.word	0x0800dc79
 800d2a4:	0800dc8a 	.word	0x0800dc8a

0800d2a8 <__sflush_r>:
 800d2a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b0:	0716      	lsls	r6, r2, #28
 800d2b2:	4605      	mov	r5, r0
 800d2b4:	460c      	mov	r4, r1
 800d2b6:	d454      	bmi.n	800d362 <__sflush_r+0xba>
 800d2b8:	684b      	ldr	r3, [r1, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	dc02      	bgt.n	800d2c4 <__sflush_r+0x1c>
 800d2be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	dd48      	ble.n	800d356 <__sflush_r+0xae>
 800d2c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2c6:	2e00      	cmp	r6, #0
 800d2c8:	d045      	beq.n	800d356 <__sflush_r+0xae>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d2d0:	682f      	ldr	r7, [r5, #0]
 800d2d2:	6a21      	ldr	r1, [r4, #32]
 800d2d4:	602b      	str	r3, [r5, #0]
 800d2d6:	d030      	beq.n	800d33a <__sflush_r+0x92>
 800d2d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d2da:	89a3      	ldrh	r3, [r4, #12]
 800d2dc:	0759      	lsls	r1, r3, #29
 800d2de:	d505      	bpl.n	800d2ec <__sflush_r+0x44>
 800d2e0:	6863      	ldr	r3, [r4, #4]
 800d2e2:	1ad2      	subs	r2, r2, r3
 800d2e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d2e6:	b10b      	cbz	r3, 800d2ec <__sflush_r+0x44>
 800d2e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d2ea:	1ad2      	subs	r2, r2, r3
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2f0:	6a21      	ldr	r1, [r4, #32]
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	47b0      	blx	r6
 800d2f6:	1c43      	adds	r3, r0, #1
 800d2f8:	89a3      	ldrh	r3, [r4, #12]
 800d2fa:	d106      	bne.n	800d30a <__sflush_r+0x62>
 800d2fc:	6829      	ldr	r1, [r5, #0]
 800d2fe:	291d      	cmp	r1, #29
 800d300:	d82b      	bhi.n	800d35a <__sflush_r+0xb2>
 800d302:	4a2a      	ldr	r2, [pc, #168]	@ (800d3ac <__sflush_r+0x104>)
 800d304:	410a      	asrs	r2, r1
 800d306:	07d6      	lsls	r6, r2, #31
 800d308:	d427      	bmi.n	800d35a <__sflush_r+0xb2>
 800d30a:	2200      	movs	r2, #0
 800d30c:	6062      	str	r2, [r4, #4]
 800d30e:	04d9      	lsls	r1, r3, #19
 800d310:	6922      	ldr	r2, [r4, #16]
 800d312:	6022      	str	r2, [r4, #0]
 800d314:	d504      	bpl.n	800d320 <__sflush_r+0x78>
 800d316:	1c42      	adds	r2, r0, #1
 800d318:	d101      	bne.n	800d31e <__sflush_r+0x76>
 800d31a:	682b      	ldr	r3, [r5, #0]
 800d31c:	b903      	cbnz	r3, 800d320 <__sflush_r+0x78>
 800d31e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d320:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d322:	602f      	str	r7, [r5, #0]
 800d324:	b1b9      	cbz	r1, 800d356 <__sflush_r+0xae>
 800d326:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d32a:	4299      	cmp	r1, r3
 800d32c:	d002      	beq.n	800d334 <__sflush_r+0x8c>
 800d32e:	4628      	mov	r0, r5
 800d330:	f7fe fb36 	bl	800b9a0 <_free_r>
 800d334:	2300      	movs	r3, #0
 800d336:	6363      	str	r3, [r4, #52]	@ 0x34
 800d338:	e00d      	b.n	800d356 <__sflush_r+0xae>
 800d33a:	2301      	movs	r3, #1
 800d33c:	4628      	mov	r0, r5
 800d33e:	47b0      	blx	r6
 800d340:	4602      	mov	r2, r0
 800d342:	1c50      	adds	r0, r2, #1
 800d344:	d1c9      	bne.n	800d2da <__sflush_r+0x32>
 800d346:	682b      	ldr	r3, [r5, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d0c6      	beq.n	800d2da <__sflush_r+0x32>
 800d34c:	2b1d      	cmp	r3, #29
 800d34e:	d001      	beq.n	800d354 <__sflush_r+0xac>
 800d350:	2b16      	cmp	r3, #22
 800d352:	d11e      	bne.n	800d392 <__sflush_r+0xea>
 800d354:	602f      	str	r7, [r5, #0]
 800d356:	2000      	movs	r0, #0
 800d358:	e022      	b.n	800d3a0 <__sflush_r+0xf8>
 800d35a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d35e:	b21b      	sxth	r3, r3
 800d360:	e01b      	b.n	800d39a <__sflush_r+0xf2>
 800d362:	690f      	ldr	r7, [r1, #16]
 800d364:	2f00      	cmp	r7, #0
 800d366:	d0f6      	beq.n	800d356 <__sflush_r+0xae>
 800d368:	0793      	lsls	r3, r2, #30
 800d36a:	680e      	ldr	r6, [r1, #0]
 800d36c:	bf08      	it	eq
 800d36e:	694b      	ldreq	r3, [r1, #20]
 800d370:	600f      	str	r7, [r1, #0]
 800d372:	bf18      	it	ne
 800d374:	2300      	movne	r3, #0
 800d376:	eba6 0807 	sub.w	r8, r6, r7
 800d37a:	608b      	str	r3, [r1, #8]
 800d37c:	f1b8 0f00 	cmp.w	r8, #0
 800d380:	dde9      	ble.n	800d356 <__sflush_r+0xae>
 800d382:	6a21      	ldr	r1, [r4, #32]
 800d384:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d386:	4643      	mov	r3, r8
 800d388:	463a      	mov	r2, r7
 800d38a:	4628      	mov	r0, r5
 800d38c:	47b0      	blx	r6
 800d38e:	2800      	cmp	r0, #0
 800d390:	dc08      	bgt.n	800d3a4 <__sflush_r+0xfc>
 800d392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d39a:	81a3      	strh	r3, [r4, #12]
 800d39c:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3a4:	4407      	add	r7, r0
 800d3a6:	eba8 0800 	sub.w	r8, r8, r0
 800d3aa:	e7e7      	b.n	800d37c <__sflush_r+0xd4>
 800d3ac:	dfbffffe 	.word	0xdfbffffe

0800d3b0 <_fflush_r>:
 800d3b0:	b538      	push	{r3, r4, r5, lr}
 800d3b2:	690b      	ldr	r3, [r1, #16]
 800d3b4:	4605      	mov	r5, r0
 800d3b6:	460c      	mov	r4, r1
 800d3b8:	b913      	cbnz	r3, 800d3c0 <_fflush_r+0x10>
 800d3ba:	2500      	movs	r5, #0
 800d3bc:	4628      	mov	r0, r5
 800d3be:	bd38      	pop	{r3, r4, r5, pc}
 800d3c0:	b118      	cbz	r0, 800d3ca <_fflush_r+0x1a>
 800d3c2:	6a03      	ldr	r3, [r0, #32]
 800d3c4:	b90b      	cbnz	r3, 800d3ca <_fflush_r+0x1a>
 800d3c6:	f7fe f977 	bl	800b6b8 <__sinit>
 800d3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d0f3      	beq.n	800d3ba <_fflush_r+0xa>
 800d3d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d3d4:	07d0      	lsls	r0, r2, #31
 800d3d6:	d404      	bmi.n	800d3e2 <_fflush_r+0x32>
 800d3d8:	0599      	lsls	r1, r3, #22
 800d3da:	d402      	bmi.n	800d3e2 <_fflush_r+0x32>
 800d3dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3de:	f7fe fac6 	bl	800b96e <__retarget_lock_acquire_recursive>
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	f7ff ff5f 	bl	800d2a8 <__sflush_r>
 800d3ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d3ec:	07da      	lsls	r2, r3, #31
 800d3ee:	4605      	mov	r5, r0
 800d3f0:	d4e4      	bmi.n	800d3bc <_fflush_r+0xc>
 800d3f2:	89a3      	ldrh	r3, [r4, #12]
 800d3f4:	059b      	lsls	r3, r3, #22
 800d3f6:	d4e1      	bmi.n	800d3bc <_fflush_r+0xc>
 800d3f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3fa:	f7fe fab9 	bl	800b970 <__retarget_lock_release_recursive>
 800d3fe:	e7dd      	b.n	800d3bc <_fflush_r+0xc>

0800d400 <__swbuf_r>:
 800d400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d402:	460e      	mov	r6, r1
 800d404:	4614      	mov	r4, r2
 800d406:	4605      	mov	r5, r0
 800d408:	b118      	cbz	r0, 800d412 <__swbuf_r+0x12>
 800d40a:	6a03      	ldr	r3, [r0, #32]
 800d40c:	b90b      	cbnz	r3, 800d412 <__swbuf_r+0x12>
 800d40e:	f7fe f953 	bl	800b6b8 <__sinit>
 800d412:	69a3      	ldr	r3, [r4, #24]
 800d414:	60a3      	str	r3, [r4, #8]
 800d416:	89a3      	ldrh	r3, [r4, #12]
 800d418:	071a      	lsls	r2, r3, #28
 800d41a:	d501      	bpl.n	800d420 <__swbuf_r+0x20>
 800d41c:	6923      	ldr	r3, [r4, #16]
 800d41e:	b943      	cbnz	r3, 800d432 <__swbuf_r+0x32>
 800d420:	4621      	mov	r1, r4
 800d422:	4628      	mov	r0, r5
 800d424:	f000 f82a 	bl	800d47c <__swsetup_r>
 800d428:	b118      	cbz	r0, 800d432 <__swbuf_r+0x32>
 800d42a:	f04f 37ff 	mov.w	r7, #4294967295
 800d42e:	4638      	mov	r0, r7
 800d430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d432:	6823      	ldr	r3, [r4, #0]
 800d434:	6922      	ldr	r2, [r4, #16]
 800d436:	1a98      	subs	r0, r3, r2
 800d438:	6963      	ldr	r3, [r4, #20]
 800d43a:	b2f6      	uxtb	r6, r6
 800d43c:	4283      	cmp	r3, r0
 800d43e:	4637      	mov	r7, r6
 800d440:	dc05      	bgt.n	800d44e <__swbuf_r+0x4e>
 800d442:	4621      	mov	r1, r4
 800d444:	4628      	mov	r0, r5
 800d446:	f7ff ffb3 	bl	800d3b0 <_fflush_r>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	d1ed      	bne.n	800d42a <__swbuf_r+0x2a>
 800d44e:	68a3      	ldr	r3, [r4, #8]
 800d450:	3b01      	subs	r3, #1
 800d452:	60a3      	str	r3, [r4, #8]
 800d454:	6823      	ldr	r3, [r4, #0]
 800d456:	1c5a      	adds	r2, r3, #1
 800d458:	6022      	str	r2, [r4, #0]
 800d45a:	701e      	strb	r6, [r3, #0]
 800d45c:	6962      	ldr	r2, [r4, #20]
 800d45e:	1c43      	adds	r3, r0, #1
 800d460:	429a      	cmp	r2, r3
 800d462:	d004      	beq.n	800d46e <__swbuf_r+0x6e>
 800d464:	89a3      	ldrh	r3, [r4, #12]
 800d466:	07db      	lsls	r3, r3, #31
 800d468:	d5e1      	bpl.n	800d42e <__swbuf_r+0x2e>
 800d46a:	2e0a      	cmp	r6, #10
 800d46c:	d1df      	bne.n	800d42e <__swbuf_r+0x2e>
 800d46e:	4621      	mov	r1, r4
 800d470:	4628      	mov	r0, r5
 800d472:	f7ff ff9d 	bl	800d3b0 <_fflush_r>
 800d476:	2800      	cmp	r0, #0
 800d478:	d0d9      	beq.n	800d42e <__swbuf_r+0x2e>
 800d47a:	e7d6      	b.n	800d42a <__swbuf_r+0x2a>

0800d47c <__swsetup_r>:
 800d47c:	b538      	push	{r3, r4, r5, lr}
 800d47e:	4b29      	ldr	r3, [pc, #164]	@ (800d524 <__swsetup_r+0xa8>)
 800d480:	4605      	mov	r5, r0
 800d482:	6818      	ldr	r0, [r3, #0]
 800d484:	460c      	mov	r4, r1
 800d486:	b118      	cbz	r0, 800d490 <__swsetup_r+0x14>
 800d488:	6a03      	ldr	r3, [r0, #32]
 800d48a:	b90b      	cbnz	r3, 800d490 <__swsetup_r+0x14>
 800d48c:	f7fe f914 	bl	800b6b8 <__sinit>
 800d490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d494:	0719      	lsls	r1, r3, #28
 800d496:	d422      	bmi.n	800d4de <__swsetup_r+0x62>
 800d498:	06da      	lsls	r2, r3, #27
 800d49a:	d407      	bmi.n	800d4ac <__swsetup_r+0x30>
 800d49c:	2209      	movs	r2, #9
 800d49e:	602a      	str	r2, [r5, #0]
 800d4a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4a4:	81a3      	strh	r3, [r4, #12]
 800d4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4aa:	e033      	b.n	800d514 <__swsetup_r+0x98>
 800d4ac:	0758      	lsls	r0, r3, #29
 800d4ae:	d512      	bpl.n	800d4d6 <__swsetup_r+0x5a>
 800d4b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4b2:	b141      	cbz	r1, 800d4c6 <__swsetup_r+0x4a>
 800d4b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4b8:	4299      	cmp	r1, r3
 800d4ba:	d002      	beq.n	800d4c2 <__swsetup_r+0x46>
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f7fe fa6f 	bl	800b9a0 <_free_r>
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4c6:	89a3      	ldrh	r3, [r4, #12]
 800d4c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d4cc:	81a3      	strh	r3, [r4, #12]
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	6063      	str	r3, [r4, #4]
 800d4d2:	6923      	ldr	r3, [r4, #16]
 800d4d4:	6023      	str	r3, [r4, #0]
 800d4d6:	89a3      	ldrh	r3, [r4, #12]
 800d4d8:	f043 0308 	orr.w	r3, r3, #8
 800d4dc:	81a3      	strh	r3, [r4, #12]
 800d4de:	6923      	ldr	r3, [r4, #16]
 800d4e0:	b94b      	cbnz	r3, 800d4f6 <__swsetup_r+0x7a>
 800d4e2:	89a3      	ldrh	r3, [r4, #12]
 800d4e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d4e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4ec:	d003      	beq.n	800d4f6 <__swsetup_r+0x7a>
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	f000 f89d 	bl	800d630 <__smakebuf_r>
 800d4f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4fa:	f013 0201 	ands.w	r2, r3, #1
 800d4fe:	d00a      	beq.n	800d516 <__swsetup_r+0x9a>
 800d500:	2200      	movs	r2, #0
 800d502:	60a2      	str	r2, [r4, #8]
 800d504:	6962      	ldr	r2, [r4, #20]
 800d506:	4252      	negs	r2, r2
 800d508:	61a2      	str	r2, [r4, #24]
 800d50a:	6922      	ldr	r2, [r4, #16]
 800d50c:	b942      	cbnz	r2, 800d520 <__swsetup_r+0xa4>
 800d50e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d512:	d1c5      	bne.n	800d4a0 <__swsetup_r+0x24>
 800d514:	bd38      	pop	{r3, r4, r5, pc}
 800d516:	0799      	lsls	r1, r3, #30
 800d518:	bf58      	it	pl
 800d51a:	6962      	ldrpl	r2, [r4, #20]
 800d51c:	60a2      	str	r2, [r4, #8]
 800d51e:	e7f4      	b.n	800d50a <__swsetup_r+0x8e>
 800d520:	2000      	movs	r0, #0
 800d522:	e7f7      	b.n	800d514 <__swsetup_r+0x98>
 800d524:	20000280 	.word	0x20000280

0800d528 <memmove>:
 800d528:	4288      	cmp	r0, r1
 800d52a:	b510      	push	{r4, lr}
 800d52c:	eb01 0402 	add.w	r4, r1, r2
 800d530:	d902      	bls.n	800d538 <memmove+0x10>
 800d532:	4284      	cmp	r4, r0
 800d534:	4623      	mov	r3, r4
 800d536:	d807      	bhi.n	800d548 <memmove+0x20>
 800d538:	1e43      	subs	r3, r0, #1
 800d53a:	42a1      	cmp	r1, r4
 800d53c:	d008      	beq.n	800d550 <memmove+0x28>
 800d53e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d542:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d546:	e7f8      	b.n	800d53a <memmove+0x12>
 800d548:	4402      	add	r2, r0
 800d54a:	4601      	mov	r1, r0
 800d54c:	428a      	cmp	r2, r1
 800d54e:	d100      	bne.n	800d552 <memmove+0x2a>
 800d550:	bd10      	pop	{r4, pc}
 800d552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d556:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d55a:	e7f7      	b.n	800d54c <memmove+0x24>

0800d55c <__assert_func>:
 800d55c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d55e:	4614      	mov	r4, r2
 800d560:	461a      	mov	r2, r3
 800d562:	4b09      	ldr	r3, [pc, #36]	@ (800d588 <__assert_func+0x2c>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4605      	mov	r5, r0
 800d568:	68d8      	ldr	r0, [r3, #12]
 800d56a:	b954      	cbnz	r4, 800d582 <__assert_func+0x26>
 800d56c:	4b07      	ldr	r3, [pc, #28]	@ (800d58c <__assert_func+0x30>)
 800d56e:	461c      	mov	r4, r3
 800d570:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d574:	9100      	str	r1, [sp, #0]
 800d576:	462b      	mov	r3, r5
 800d578:	4905      	ldr	r1, [pc, #20]	@ (800d590 <__assert_func+0x34>)
 800d57a:	f000 f821 	bl	800d5c0 <fiprintf>
 800d57e:	f000 f8b5 	bl	800d6ec <abort>
 800d582:	4b04      	ldr	r3, [pc, #16]	@ (800d594 <__assert_func+0x38>)
 800d584:	e7f4      	b.n	800d570 <__assert_func+0x14>
 800d586:	bf00      	nop
 800d588:	20000280 	.word	0x20000280
 800d58c:	0800dcd6 	.word	0x0800dcd6
 800d590:	0800dca8 	.word	0x0800dca8
 800d594:	0800dc9b 	.word	0x0800dc9b

0800d598 <_calloc_r>:
 800d598:	b570      	push	{r4, r5, r6, lr}
 800d59a:	fba1 5402 	umull	r5, r4, r1, r2
 800d59e:	b93c      	cbnz	r4, 800d5b0 <_calloc_r+0x18>
 800d5a0:	4629      	mov	r1, r5
 800d5a2:	f7fd f92d 	bl	800a800 <_malloc_r>
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	b928      	cbnz	r0, 800d5b6 <_calloc_r+0x1e>
 800d5aa:	2600      	movs	r6, #0
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	bd70      	pop	{r4, r5, r6, pc}
 800d5b0:	220c      	movs	r2, #12
 800d5b2:	6002      	str	r2, [r0, #0]
 800d5b4:	e7f9      	b.n	800d5aa <_calloc_r+0x12>
 800d5b6:	462a      	mov	r2, r5
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	f7fe f93c 	bl	800b836 <memset>
 800d5be:	e7f5      	b.n	800d5ac <_calloc_r+0x14>

0800d5c0 <fiprintf>:
 800d5c0:	b40e      	push	{r1, r2, r3}
 800d5c2:	b503      	push	{r0, r1, lr}
 800d5c4:	4601      	mov	r1, r0
 800d5c6:	ab03      	add	r3, sp, #12
 800d5c8:	4805      	ldr	r0, [pc, #20]	@ (800d5e0 <fiprintf+0x20>)
 800d5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ce:	6800      	ldr	r0, [r0, #0]
 800d5d0:	9301      	str	r3, [sp, #4]
 800d5d2:	f7ff fbc3 	bl	800cd5c <_vfiprintf_r>
 800d5d6:	b002      	add	sp, #8
 800d5d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5dc:	b003      	add	sp, #12
 800d5de:	4770      	bx	lr
 800d5e0:	20000280 	.word	0x20000280

0800d5e4 <__swhatbuf_r>:
 800d5e4:	b570      	push	{r4, r5, r6, lr}
 800d5e6:	460c      	mov	r4, r1
 800d5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ec:	2900      	cmp	r1, #0
 800d5ee:	b096      	sub	sp, #88	@ 0x58
 800d5f0:	4615      	mov	r5, r2
 800d5f2:	461e      	mov	r6, r3
 800d5f4:	da0d      	bge.n	800d612 <__swhatbuf_r+0x2e>
 800d5f6:	89a3      	ldrh	r3, [r4, #12]
 800d5f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d5fc:	f04f 0100 	mov.w	r1, #0
 800d600:	bf14      	ite	ne
 800d602:	2340      	movne	r3, #64	@ 0x40
 800d604:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d608:	2000      	movs	r0, #0
 800d60a:	6031      	str	r1, [r6, #0]
 800d60c:	602b      	str	r3, [r5, #0]
 800d60e:	b016      	add	sp, #88	@ 0x58
 800d610:	bd70      	pop	{r4, r5, r6, pc}
 800d612:	466a      	mov	r2, sp
 800d614:	f000 f848 	bl	800d6a8 <_fstat_r>
 800d618:	2800      	cmp	r0, #0
 800d61a:	dbec      	blt.n	800d5f6 <__swhatbuf_r+0x12>
 800d61c:	9901      	ldr	r1, [sp, #4]
 800d61e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d622:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d626:	4259      	negs	r1, r3
 800d628:	4159      	adcs	r1, r3
 800d62a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d62e:	e7eb      	b.n	800d608 <__swhatbuf_r+0x24>

0800d630 <__smakebuf_r>:
 800d630:	898b      	ldrh	r3, [r1, #12]
 800d632:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d634:	079d      	lsls	r5, r3, #30
 800d636:	4606      	mov	r6, r0
 800d638:	460c      	mov	r4, r1
 800d63a:	d507      	bpl.n	800d64c <__smakebuf_r+0x1c>
 800d63c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d640:	6023      	str	r3, [r4, #0]
 800d642:	6123      	str	r3, [r4, #16]
 800d644:	2301      	movs	r3, #1
 800d646:	6163      	str	r3, [r4, #20]
 800d648:	b003      	add	sp, #12
 800d64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d64c:	ab01      	add	r3, sp, #4
 800d64e:	466a      	mov	r2, sp
 800d650:	f7ff ffc8 	bl	800d5e4 <__swhatbuf_r>
 800d654:	9f00      	ldr	r7, [sp, #0]
 800d656:	4605      	mov	r5, r0
 800d658:	4639      	mov	r1, r7
 800d65a:	4630      	mov	r0, r6
 800d65c:	f7fd f8d0 	bl	800a800 <_malloc_r>
 800d660:	b948      	cbnz	r0, 800d676 <__smakebuf_r+0x46>
 800d662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d666:	059a      	lsls	r2, r3, #22
 800d668:	d4ee      	bmi.n	800d648 <__smakebuf_r+0x18>
 800d66a:	f023 0303 	bic.w	r3, r3, #3
 800d66e:	f043 0302 	orr.w	r3, r3, #2
 800d672:	81a3      	strh	r3, [r4, #12]
 800d674:	e7e2      	b.n	800d63c <__smakebuf_r+0xc>
 800d676:	89a3      	ldrh	r3, [r4, #12]
 800d678:	6020      	str	r0, [r4, #0]
 800d67a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d67e:	81a3      	strh	r3, [r4, #12]
 800d680:	9b01      	ldr	r3, [sp, #4]
 800d682:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d686:	b15b      	cbz	r3, 800d6a0 <__smakebuf_r+0x70>
 800d688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d68c:	4630      	mov	r0, r6
 800d68e:	f000 f81d 	bl	800d6cc <_isatty_r>
 800d692:	b128      	cbz	r0, 800d6a0 <__smakebuf_r+0x70>
 800d694:	89a3      	ldrh	r3, [r4, #12]
 800d696:	f023 0303 	bic.w	r3, r3, #3
 800d69a:	f043 0301 	orr.w	r3, r3, #1
 800d69e:	81a3      	strh	r3, [r4, #12]
 800d6a0:	89a3      	ldrh	r3, [r4, #12]
 800d6a2:	431d      	orrs	r5, r3
 800d6a4:	81a5      	strh	r5, [r4, #12]
 800d6a6:	e7cf      	b.n	800d648 <__smakebuf_r+0x18>

0800d6a8 <_fstat_r>:
 800d6a8:	b538      	push	{r3, r4, r5, lr}
 800d6aa:	4d07      	ldr	r5, [pc, #28]	@ (800d6c8 <_fstat_r+0x20>)
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	4604      	mov	r4, r0
 800d6b0:	4608      	mov	r0, r1
 800d6b2:	4611      	mov	r1, r2
 800d6b4:	602b      	str	r3, [r5, #0]
 800d6b6:	f7f5 fc3f 	bl	8002f38 <_fstat>
 800d6ba:	1c43      	adds	r3, r0, #1
 800d6bc:	d102      	bne.n	800d6c4 <_fstat_r+0x1c>
 800d6be:	682b      	ldr	r3, [r5, #0]
 800d6c0:	b103      	cbz	r3, 800d6c4 <_fstat_r+0x1c>
 800d6c2:	6023      	str	r3, [r4, #0]
 800d6c4:	bd38      	pop	{r3, r4, r5, pc}
 800d6c6:	bf00      	nop
 800d6c8:	20002944 	.word	0x20002944

0800d6cc <_isatty_r>:
 800d6cc:	b538      	push	{r3, r4, r5, lr}
 800d6ce:	4d06      	ldr	r5, [pc, #24]	@ (800d6e8 <_isatty_r+0x1c>)
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	4604      	mov	r4, r0
 800d6d4:	4608      	mov	r0, r1
 800d6d6:	602b      	str	r3, [r5, #0]
 800d6d8:	f7f5 fc3e 	bl	8002f58 <_isatty>
 800d6dc:	1c43      	adds	r3, r0, #1
 800d6de:	d102      	bne.n	800d6e6 <_isatty_r+0x1a>
 800d6e0:	682b      	ldr	r3, [r5, #0]
 800d6e2:	b103      	cbz	r3, 800d6e6 <_isatty_r+0x1a>
 800d6e4:	6023      	str	r3, [r4, #0]
 800d6e6:	bd38      	pop	{r3, r4, r5, pc}
 800d6e8:	20002944 	.word	0x20002944

0800d6ec <abort>:
 800d6ec:	b508      	push	{r3, lr}
 800d6ee:	2006      	movs	r0, #6
 800d6f0:	f000 f82c 	bl	800d74c <raise>
 800d6f4:	2001      	movs	r0, #1
 800d6f6:	f7f5 fbeb 	bl	8002ed0 <_exit>

0800d6fa <_raise_r>:
 800d6fa:	291f      	cmp	r1, #31
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	4605      	mov	r5, r0
 800d700:	460c      	mov	r4, r1
 800d702:	d904      	bls.n	800d70e <_raise_r+0x14>
 800d704:	2316      	movs	r3, #22
 800d706:	6003      	str	r3, [r0, #0]
 800d708:	f04f 30ff 	mov.w	r0, #4294967295
 800d70c:	bd38      	pop	{r3, r4, r5, pc}
 800d70e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d710:	b112      	cbz	r2, 800d718 <_raise_r+0x1e>
 800d712:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d716:	b94b      	cbnz	r3, 800d72c <_raise_r+0x32>
 800d718:	4628      	mov	r0, r5
 800d71a:	f000 f831 	bl	800d780 <_getpid_r>
 800d71e:	4622      	mov	r2, r4
 800d720:	4601      	mov	r1, r0
 800d722:	4628      	mov	r0, r5
 800d724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d728:	f000 b818 	b.w	800d75c <_kill_r>
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d00a      	beq.n	800d746 <_raise_r+0x4c>
 800d730:	1c59      	adds	r1, r3, #1
 800d732:	d103      	bne.n	800d73c <_raise_r+0x42>
 800d734:	2316      	movs	r3, #22
 800d736:	6003      	str	r3, [r0, #0]
 800d738:	2001      	movs	r0, #1
 800d73a:	e7e7      	b.n	800d70c <_raise_r+0x12>
 800d73c:	2100      	movs	r1, #0
 800d73e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d742:	4620      	mov	r0, r4
 800d744:	4798      	blx	r3
 800d746:	2000      	movs	r0, #0
 800d748:	e7e0      	b.n	800d70c <_raise_r+0x12>
	...

0800d74c <raise>:
 800d74c:	4b02      	ldr	r3, [pc, #8]	@ (800d758 <raise+0xc>)
 800d74e:	4601      	mov	r1, r0
 800d750:	6818      	ldr	r0, [r3, #0]
 800d752:	f7ff bfd2 	b.w	800d6fa <_raise_r>
 800d756:	bf00      	nop
 800d758:	20000280 	.word	0x20000280

0800d75c <_kill_r>:
 800d75c:	b538      	push	{r3, r4, r5, lr}
 800d75e:	4d07      	ldr	r5, [pc, #28]	@ (800d77c <_kill_r+0x20>)
 800d760:	2300      	movs	r3, #0
 800d762:	4604      	mov	r4, r0
 800d764:	4608      	mov	r0, r1
 800d766:	4611      	mov	r1, r2
 800d768:	602b      	str	r3, [r5, #0]
 800d76a:	f7f5 fba1 	bl	8002eb0 <_kill>
 800d76e:	1c43      	adds	r3, r0, #1
 800d770:	d102      	bne.n	800d778 <_kill_r+0x1c>
 800d772:	682b      	ldr	r3, [r5, #0]
 800d774:	b103      	cbz	r3, 800d778 <_kill_r+0x1c>
 800d776:	6023      	str	r3, [r4, #0]
 800d778:	bd38      	pop	{r3, r4, r5, pc}
 800d77a:	bf00      	nop
 800d77c:	20002944 	.word	0x20002944

0800d780 <_getpid_r>:
 800d780:	f7f5 bb8e 	b.w	8002ea0 <_getpid>

0800d784 <_init>:
 800d784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d786:	bf00      	nop
 800d788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d78a:	bc08      	pop	{r3}
 800d78c:	469e      	mov	lr, r3
 800d78e:	4770      	bx	lr

0800d790 <_fini>:
 800d790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d792:	bf00      	nop
 800d794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d796:	bc08      	pop	{r3}
 800d798:	469e      	mov	lr, r3
 800d79a:	4770      	bx	lr
